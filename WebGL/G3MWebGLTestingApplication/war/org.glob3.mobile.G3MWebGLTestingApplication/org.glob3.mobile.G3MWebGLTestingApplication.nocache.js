function org_glob3_mobile_G3MWebGLTestingApplication(){
  var $wnd_0 = window, $doc_0 = document, gwtOnLoad, bodyDone, base = '', metaProps = {}, values = [], providers = [], answers = [], softPermutationId = 0, onLoadErrorFunc, propertyErrorFunc;
  if (!$wnd_0.__gwt_stylesLoaded) {
    $wnd_0.__gwt_stylesLoaded = {};
  }
  if (!$wnd_0.__gwt_scriptsLoaded) {
    $wnd_0.__gwt_scriptsLoaded = {};
  }
  function isHostedMode(){
    var result = false;
    try {
      var query = $wnd_0.location.search;
      return (query.indexOf('gwt.codesvr=') != -1 || (query.indexOf('gwt.hosted=') != -1 || $wnd_0.external && $wnd_0.external.gwtOnLoad)) && query.indexOf('gwt.hybrid') == -1;
    }
     catch (e) {
    }
    isHostedMode = function(){
      return result;
    }
    ;
    return result;
  }

  function maybeStartModule(){
    if (gwtOnLoad && bodyDone) {
      gwtOnLoad(onLoadErrorFunc, 'org.glob3.mobile.G3MWebGLTestingApplication', base, softPermutationId);
    }
  }

  function computeScriptBase(){
    var thisScript, markerId = '__gwt_marker_org.glob3.mobile.G3MWebGLTestingApplication', markerScript;
    $doc_0.write('<script id="' + markerId + '"><\/script>');
    markerScript = $doc_0.getElementById(markerId);
    thisScript = markerScript && markerScript.previousSibling;
    while (thisScript && thisScript.tagName != 'SCRIPT') {
      thisScript = thisScript.previousSibling;
    }
    function getDirectoryOfFile(path){
      var hashIndex = path.lastIndexOf('#');
      if (hashIndex == -1) {
        hashIndex = path.length;
      }
      var queryIndex = path.indexOf('?');
      if (queryIndex == -1) {
        queryIndex = path.length;
      }
      var slashIndex = path.lastIndexOf('/', Math.min(queryIndex, hashIndex));
      return slashIndex >= 0?path.substring(0, slashIndex + 1):'';
    }

    ;
    if (thisScript && thisScript.src) {
      base = getDirectoryOfFile(thisScript.src);
    }
    if (base == '') {
      var baseElements = $doc_0.getElementsByTagName('base');
      if (baseElements.length > 0) {
        base = baseElements[baseElements.length - 1].href;
      }
       else {
        base = getDirectoryOfFile($doc_0.location.href);
      }
    }
     else if (base.match(/^\w+:\/\//)) {
    }
     else {
      var img = $doc_0.createElement('img');
      img.src = base + 'clear.cache.gif';
      base = getDirectoryOfFile(img.src);
    }
    if (markerScript) {
      markerScript.parentNode.removeChild(markerScript);
    }
  }

  function processMetas(){
    var metas = document.getElementsByTagName('meta');
    for (var i = 0, n = metas.length; i < n; ++i) {
      var meta = metas[i], name_0 = meta.getAttribute('name'), content_0;
      if (name_0) {
        if (name_0 == 'gwt:property') {
          content_0 = meta.getAttribute('content');
          if (content_0) {
            var value_0, eq = content_0.indexOf('=');
            if (eq >= 0) {
              name_0 = content_0.substring(0, eq);
              value_0 = content_0.substring(eq + 1);
            }
             else {
              name_0 = content_0;
              value_0 = '';
            }
            metaProps[name_0] = value_0;
          }
        }
         else if (name_0 == 'gwt:onPropertyErrorFn') {
          content_0 = meta.getAttribute('content');
          if (content_0) {
            try {
              propertyErrorFunc = eval(content_0);
            }
             catch (e) {
              alert('Bad handler "' + content_0 + '" for "gwt:onPropertyErrorFn"');
            }
          }
        }
         else if (name_0 == 'gwt:onLoadErrorFn') {
          content_0 = meta.getAttribute('content');
          if (content_0) {
            try {
              onLoadErrorFunc = eval(content_0);
            }
             catch (e) {
              alert('Bad handler "' + content_0 + '" for "gwt:onLoadErrorFn"');
            }
          }
        }
      }
    }
  }

  function unflattenKeylistIntoAnswers(propValArray, value_0){
    var answer = answers;
    for (var i = 0, n = propValArray.length - 1; i < n; ++i) {
      answer = answer[propValArray[i]] || (answer[propValArray[i]] = []);
    }
    answer[propValArray[n]] = value_0;
  }

  function computePropValue(propName){
    var value_0 = providers[propName](), allowedValuesMap = values[propName];
    if (value_0 in allowedValuesMap) {
      return value_0;
    }
    var allowedValuesList = [];
    for (var k in allowedValuesMap) {
      allowedValuesList[allowedValuesMap[k]] = k;
    }
    if (propertyErrorFunc) {
      propertyErrorFunc(propName, allowedValuesList, value_0);
    }
    throw null;
  }

  providers['user.agent'] = function(){
    var ua = navigator.userAgent.toLowerCase();
    var makeVersion = function(result){
      return parseInt(result[1]) * 1000 + parseInt(result[2]);
    }
    ;
    if (function(){
      return ua.indexOf('webkit') != -1;
    }
    ())
      return 'safari';
    if (function(){
      return ua.indexOf('msie') != -1 && $doc_0.documentMode >= 10;
    }
    ())
      return 'ie10';
    if (function(){
      return ua.indexOf('msie') != -1 && $doc_0.documentMode >= 9;
    }
    ())
      return 'ie9';
    if (function(){
      return ua.indexOf('msie') != -1 && $doc_0.documentMode >= 8;
    }
    ())
      return 'ie8';
    if (function(){
      return ua.indexOf('gecko') != -1;
    }
    ())
      return 'gecko1_8';
    return 'unknown';
  }
  ;
  values['user.agent'] = {gecko1_8:0, ie10:1, ie8:2, ie9:3, safari:4};
  org_glob3_mobile_G3MWebGLTestingApplication.onScriptLoad = function(gwtOnLoadFunc){
    org_glob3_mobile_G3MWebGLTestingApplication = null;
    gwtOnLoad = gwtOnLoadFunc;
    maybeStartModule();
  }
  ;
  if (isHostedMode()) {
    alert('Single-script hosted mode not yet implemented. See issue ' + 'http://code.google.com/p/google-web-toolkit/issues/detail?id=2079');
    return;
  }
  computeScriptBase();
  processMetas();
  try {
    var strongName;
    unflattenKeylistIntoAnswers(['gecko1_8'], 'E6E4E8C31CDB6C30EC557E22D2D79E3E');
    unflattenKeylistIntoAnswers(['ie10'], 'E6E4E8C31CDB6C30EC557E22D2D79E3E' + ':1');
    unflattenKeylistIntoAnswers(['ie8'], 'E6E4E8C31CDB6C30EC557E22D2D79E3E' + ':2');
    unflattenKeylistIntoAnswers(['ie9'], 'E6E4E8C31CDB6C30EC557E22D2D79E3E' + ':3');
    unflattenKeylistIntoAnswers(['safari'], 'E6E4E8C31CDB6C30EC557E22D2D79E3E' + ':4');
    strongName = answers[computePropValue('user.agent')];
    var idx = strongName.indexOf(':');
    if (idx != -1) {
      softPermutationId = Number(strongName.substring(idx + 1));
    }
  }
   catch (e) {
    return;
  }
  var onBodyDoneTimerId;
  function onBodyDone(){
    if (!bodyDone) {
      bodyDone = true;
      maybeStartModule();
      if ($doc_0.removeEventListener) {
        $doc_0.removeEventListener('DOMContentLoaded', onBodyDone, false);
      }
      if (onBodyDoneTimerId) {
        clearInterval(onBodyDoneTimerId);
      }
    }
  }

  if ($doc_0.addEventListener) {
    $doc_0.addEventListener('DOMContentLoaded', function(){
      onBodyDone();
    }
    , false);
  }
  var onBodyDoneTimerId = setInterval(function(){
    if (/loaded|complete/.test($doc_0.readyState)) {
      onBodyDone();
    }
  }
  , 50);
}

org_glob3_mobile_G3MWebGLTestingApplication();
(function () {var $gwt_version = "2.6.0";var $wnd = window;var $doc = $wnd.document;var $moduleName, $moduleBase;var $stats = $wnd.__gwtStatsEvent ? function(a) {$wnd.__gwtStatsEvent(a)} : null;var $strongName = 'E6E4E8C31CDB6C30EC557E22D2D79E3E';var _, N8000000000000000_longLit = {l:0, m:0, h:524288}, N10000000000000_longLit = {l:0, m:0, h:1048320}, N5f5e100_longLit = {l:663296, m:4194280, h:1048575}, N81_longLit = {l:4194175, m:4194303, h:1048575}, N1_longLit = {l:4194303, m:4194303, h:1048575}, P0_longLit = {l:0, m:0, h:0}, P1_longLit = {l:1, m:0, h:0}, P2_longLit = {l:2, m:0, h:0}, Pa_longLit = {l:10, m:0, h:0}, P14_longLit = {l:20, m:0, h:0}, P19_longLit = {l:25, m:0, h:0}, P80_longLit = {l:128, m:0, h:0}, Pff_longLit = {l:255, m:0, h:0}, P1f4_longLit = {l:500, m:0, h:0}, P2ee_longLit = {l:750, m:0, h:0}, P3e8_longLit = {l:1000, m:0, h:0}, P7d0_longLit = {l:2000, m:0, h:0}, P1388_longLit = {l:5000, m:0, h:0}, P2710_longLit = {l:10000, m:0, h:0}, P186a0_longLit = {l:100000, m:0, h:0}, P5265c00_longLit = {l:2513920, m:20, h:0}, P80000000_longLit = {l:0, m:512, h:0}, P9a7ec800_longLit = {l:4114432, m:617, h:0}, P7ff0000000000000_longLit = {l:0, m:0, h:524032}, P7ff8000000000000_longLit = {l:0, m:0, h:524160}, seedTable = {}, Q$Object = 0, Q$String = 1, Q$AnimationScheduler$AnimationHandle = 2, Q$AnimationSchedulerImplTimer$AnimationHandleImpl = 3, Q$AnimationSchedulerImplTimer$AnimationHandleImpl_$1 = 4, Q$JavaScriptException = 5, Q$SerializableThrowable = 6, Q$Style$Display = 7, Q$Style$HasCssName = 8, Q$Style$Overflow = 9, Q$Style$Position = 10, Q$Style$TextAlign = 11, Q$Style$Unit = 12, Q$ClickHandler = 13, Q$DomEvent$Type = 14, Q$MouseDownHandler = 15, Q$MouseMoveHandler = 16, Q$MouseUpHandler = 17, Q$TouchCancelHandler = 18, Q$TouchEndHandler = 19, Q$TouchMoveHandler = 20, Q$TouchStartHandler = 21, Q$AttachEvent$Handler = 22, Q$CloseHandler = 23, Q$HasAttachHandlers = 24, Q$ResizeHandler = 25, Q$ValueChangeHandler = 26, Q$EventHandler = 27, Q$HandlerRegistration = 28, Q$HasHandlers = 29, Q$HasDirection$Direction = 30, Q$JSONArray = 31, Q$JSONNumber = 32, Q$JSONObject = 33, Q$JSONString = 34, Q$LongLibBase$LongEmul = 35, Q$HtmlLogFormatter = 36, Q$Point = 37, Q$TouchScroller$4 = 38, Q$TouchScroller$5 = 39, Q$TouchScroller$TemporalPoint = 40, Q$Event$NativePreviewHandler = 41, Q$EventListener = 42, Q$HasVisibility = 43, Q$HasWidgets = 44, Q$IsRenderable = 45, Q$IsWidget = 46, Q$RootPanel = 47, Q$UIObject = 48, Q$Widget = 49, Q$FocusImplStandard = 50, Q$UserAgent = 51, Q$SimpleEventBus$Command = 52, Q$UmbrellaException = 53, Q$Serializable = 54, Q$Boolean = 55, Q$Byte = 56, Q$CharSequence = 57, Q$Comparable = 58, Q$Double = 59, Q$Enum = 60, Q$Integer = 61, Q$Long = 62, Q$Number = 63, Q$Object_$1 = 64, Q$StackTraceElement = 65, Q$Throwable = 66, Q$Date = 67, Q$List = 68, Q$Map = 69, Q$Map$Entry = 70, Q$NoSuchElementException = 71, Q$RandomAccess = 72, Q$Set = 73, Q$Handler = 74, Q$Handler_$1 = 75, Q$Logger = 76, Q$Angle = 77, Q$CameraEventHandler = 78, Q$CanvasElement = 79, Q$ChildRenderer = 80, Q$CompositeRenderer = 81, Q$CompositeTileImageContribution = 82, Q$CompositeTileImageContribution$ChildContribution = 83, Q$CompositeTileImageProvider$ChildResult = 84, Q$CompositeTileImageProvider$Composer = 85, Q$DirectionLightGLFeature = 86, Q$EffectsScheduler$EffectRun = 87, Q$FrameTask = 88, Q$GLCameraGroupFeature = 89, Q$GLFeature = 90, Q$GLFeatureGroup = 91, Q$GLFeatureGroupName = 92, Q$GPUAttribute = 93, Q$GPUAttributeKey = 94, Q$GPUAttributeValue = 95, Q$GPUAttributeValueVecFloat = 96, Q$GPUProgram = 97, Q$GPUProgramSources = 98, Q$GPUUniform = 99, Q$GPUUniformKey = 100, Q$GPUUniformValue = 101, Q$GPUUniformValueFloat = 102, Q$GPUUniformValueInt = 103, Q$GPUUniformValueMatrix4 = 104, Q$GPUUniformValueVec2Float = 105, Q$GPUUniformValueVec3Float = 106, Q$GPUUniformValueVec4Float = 107, Q$GPUVariable = 108, Q$GPUVariableType = 109, Q$Geodetic2D = 110, Q$Gesture = 111, Q$ICameraConstrainer = 112, Q$IGLTextureId = 113, Q$Info = 114, Q$InterfaceOrientation = 115, Q$JSONBaseObject = 116, Q$JSONInteger = 117, Q$Layer = 118, Q$LayerTilesRenderParameters = 119, Q$LazyTextureMapping = 120, Q$Matrix44D = 121, Q$Matrix44DProvider = 122, Q$Mesh = 123, Q$MeshHolder = 124, Q$ModelViewGLFeature = 125, Q$PriorityGLFeature = 126, Q$ProjectedCornersDistanceTileLODTester$PvtData = 127, Q$ProjectionGLFeature = 128, Q$PyramidElevationDataProvider$PyramidComposition = 129, Q$Quality = 130, Q$RCObject = 131, Q$Renderer = 132, Q$Sector = 133, Q$ShaderType = 134, Q$TextureGLFeature = 135, Q$TextureHolder = 136, Q$TextureSpec = 137, Q$Tile = 138, Q$TileData = 139, Q$TileImageProvider = 140, Q$TimeInterval = 141, Q$TimedCacheTileLODTester$PvtData = 142, Q$TimedCacheTileVisibilityTester$PvtData = 143, Q$Touch = 144, Q$TouchEvent = 145, Q$TouchEventType = 146, Q$URL = 147, Q$Vector2F = 148, Q$Vector3F = 149, Q$VisibleSectorListenerEntry = 150, Q$Downloader_WebGL_Handler = 151, Q$ListenerEntry = 152, CM$ = {};
function newSeed(id_0){
  return new seedTable[id_0];
}

function defineSeed(id_0, superSeed, castableTypeMap){
  var seed = seedTable[id_0];
  if (seed && !seed.___clazz$) {
    _ = seed.prototype;
  }
   else {
    !seed && (seed = seedTable[id_0] = function(){
    }
    );
    _ = seed.prototype = superSeed < 0?{}:newSeed(superSeed);
    _.castableTypeMap$ = castableTypeMap;
  }
  for (var i_0 = 3; i_0 < arguments.length; ++i_0) {
    arguments[i_0].prototype = _;
  }
  if (seed.___clazz$) {
    _.___clazz$ = seed.___clazz$;
    seed.___clazz$ = null;
  }
}

function makeCastMap(a){
  var result = {};
  for (var i_0 = 0, c = a.length; i_0 < c; ++i_0) {
    result[a[i_0]] = 1;
  }
  return result;
}

function nullMethod(){
}

function Object_1(){
}

defineSeed(1, -1, CM$, Object_1);
_.equals$ = function equals(other){
  return this === other;
}
;
_.getClass$ = function getClass_0(){
  return this.___clazz$;
}
;
_.hashCode$ = function hashCode_0(){
  return getHashCode(this);
}
;
_.toString$ = function toString_0(){
  return this.___clazz$.typeName + '@' + toPowerOfTwoString(this.hashCode$());
}
;
_.toString = function(){
  return this.toString$();
}
;
_.typeMarker$ = nullMethod;
function $cancel(this$static){
  if (!this$static.isRunning) {
    return;
  }
  this$static.wasStarted = this$static.isStarted;
  this$static.element = null;
  this$static.isRunning = false;
  this$static.isStarted = false;
  if (this$static.requestHandle) {
    this$static.requestHandle.cancel();
    this$static.requestHandle = null;
  }
  this$static.wasStarted && $onComplete(this$static);
}

function $update(this$static, curTime){
  var finished, progress;
  finished = curTime >= -2;
  if (this$static.isStarted && !finished) {
    progress = -(curTime - -1);
    $onUpdate(this$static, (1 + Math.cos(3.141592653589793 + progress * 3.141592653589793)) / 2);
    return this$static.isRunning;
  }
  if (!this$static.isStarted && curTime >= -1) {
    this$static.isStarted = true;
    this$static.offsetHeight = $getOffsetHeight(this$static.curPanel);
    this$static.offsetWidth_0 = $getOffsetWidth(this$static.curPanel);
    $setPropertyImpl($getElement(this$static.curPanel).style, 'overflow', 'hidden');
    $onUpdate(this$static, (1 + cos_0(3.141592653589793)) / 2);
    if (!this$static.isRunning) {
      return false;
    }
  }
  if (finished) {
    this$static.isRunning = false;
    this$static.isStarted = false;
    $onComplete(this$static);
    return false;
  }
  return true;
}

function Animation_0(scheduler){
  this.callback = new Animation$1_0(this);
  this.scheduler = scheduler;
}

defineSeed(3, 1, {});
_.isRunning = false;
_.isStarted = false;
_.wasStarted = false;
function $execute(this$static, timestamp){
  $update(this$static.this$0, timestamp)?(this$static.this$0.requestHandle = this$static.this$0.scheduler.requestAnimationFrame_0(this$static.this$0.callback, this$static.this$0.element)):(this$static.this$0.requestHandle = null);
}

function Animation$1_0(this$0){
  this.this$0 = this$0;
}

defineSeed(4, 1, {}, Animation$1_0);
_.execute = function execute(timestamp){
  $execute(this, timestamp);
}
;
defineSeed(5, 1, {});
defineSeed(6, 1, makeCastMap([Q$AnimationScheduler$AnimationHandle]));
function $clinit_AnimationSchedulerImpl(){
  $clinit_AnimationSchedulerImpl = nullMethod;
  var impl;
  impl = com_google_gwt_animation_client_AnimationScheduler();
  !!impl && (impl.isNativelySupported() || (impl = new AnimationSchedulerImplTimer_0));
  INSTANCE = impl;
}

defineSeed(7, 5, {});
var INSTANCE;
function $requestAnimationFrameImpl(callback, handle){
  var wrapper = $entry(function(){
    if (!handle.canceled) {
      var now_0 = currentTimeMillis();
      callback.execute(now_0);
    }
  }
  );
  $wnd.mozRequestAnimationFrame(wrapper);
}

function AnimationSchedulerImplMozilla_0(){
  $clinit_AnimationSchedulerImpl();
}

defineSeed(8, 7, {}, AnimationSchedulerImplMozilla_0);
_.isNativelySupported = function isNativelySupported(){
  return !!$wnd.mozRequestAnimationFrame;
}
;
_.requestAnimationFrame_0 = function requestAnimationFrame(callback, element){
  var handle;
  handle = new AnimationSchedulerImplMozilla$AnimationHandleImpl_0;
  $requestAnimationFrameImpl(callback, handle);
  return handle;
}
;
function AnimationSchedulerImplMozilla$AnimationHandleImpl_0(){
}

defineSeed(9, 6, makeCastMap([Q$AnimationScheduler$AnimationHandle]), AnimationSchedulerImplMozilla$AnimationHandleImpl_0);
_.cancel = function cancel(){
  this.canceled = true;
}
;
_.canceled = false;
function $cancelAnimationFrame(this$static, requestId){
  $remove_8(this$static.animationRequests, requestId);
  this$static.animationRequests.size_0 == 0 && $cancel_0(this$static.timer);
}

function $updateAnimations(this$static){
  var curAnimations, duration, requestId, requestId$index, requestId$max;
  curAnimations = initDim(_3Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer$AnimationHandleImpl_2_classLit, makeCastMap([Q$AnimationSchedulerImplTimer$AnimationHandleImpl_$1, Q$Serializable, Q$Object_$1]), Q$AnimationSchedulerImplTimer$AnimationHandleImpl, this$static.animationRequests.size_0, 0);
  curAnimations = dynamicCast($toArray(this$static.animationRequests, curAnimations), Q$AnimationSchedulerImplTimer$AnimationHandleImpl_$1);
  duration = new Duration_0;
  for (requestId$index = 0 , requestId$max = curAnimations.length; requestId$index < requestId$max; ++requestId$index) {
    requestId = curAnimations[requestId$index];
    $remove_8(this$static.animationRequests, requestId);
    $execute(requestId.callback, duration.start_0);
  }
  this$static.animationRequests.size_0 > 0 && $schedule(this$static.timer, max_1(5, 16 - (currentTimeMillis() - duration.start_0)));
}

function AnimationSchedulerImplTimer_0(){
  $clinit_AnimationSchedulerImpl();
  this.animationRequests = new ArrayList_0;
  this.timer = new AnimationSchedulerImplTimer$1_0(this);
}

defineSeed(10, 7, {}, AnimationSchedulerImplTimer_0);
_.isNativelySupported = function isNativelySupported_0(){
  return true;
}
;
_.requestAnimationFrame_0 = function requestAnimationFrame_0(callback, element){
  var requestId;
  requestId = new AnimationSchedulerImplTimer$AnimationHandleImpl_0(this, callback);
  $add_5(this.animationRequests, requestId);
  this.animationRequests.size_0 == 1 && $schedule(this.timer, 16);
  return requestId;
}
;
function $cancel_0(this$static){
  if (!this$static.timerId) {
    return;
  }
  ++this$static.cancelCounter;
  this$static.isRepeating?clearInterval0(this$static.timerId.value_0):clearTimeout0(this$static.timerId.value_0);
  this$static.timerId = null;
}

function $schedule(this$static, delayMillis){
  if (delayMillis < 0) {
    throw new IllegalArgumentException_0('must be non-negative');
  }
  !!this$static.timerId && $cancel_0(this$static);
  this$static.isRepeating = false;
  this$static.timerId = valueOf_0(setTimeout0(createCallback(this$static, this$static.cancelCounter), delayMillis, null));
}

function Timer_0(){
}

function createCallback(timer, cancelCounter){
  return $entry(function(){
    timer.fire(cancelCounter);
  }
  );
}

defineSeed(12, 1, {});
_.fire = function fire(scheduleCancelCounter){
  if (scheduleCancelCounter != this.cancelCounter) {
    return;
  }
  this.isRepeating || (this.timerId = null);
  this.run();
}
;
_.cancelCounter = 0;
_.isRepeating = false;
_.timerId = null;
function AnimationSchedulerImplTimer$1_0(this$0){
  this.this$0 = this$0;
  Timer_0.call(this);
}

defineSeed(11, 12, {}, AnimationSchedulerImplTimer$1_0);
_.run = function run(){
  $updateAnimations(this.this$0);
}
;
function AnimationSchedulerImplTimer$AnimationHandleImpl_0(this$0, callback){
  this.this$0 = this$0;
  this.callback = callback;
}

defineSeed(13, 6, makeCastMap([Q$AnimationScheduler$AnimationHandle, Q$AnimationSchedulerImplTimer$AnimationHandleImpl]), AnimationSchedulerImplTimer$AnimationHandleImpl_0);
_.cancel = function cancel_0(){
  $cancelAnimationFrame(this.this$0, this);
}
;
function $cancelAnimationFrameImpl(requestId){
  $wnd.webkitCancelRequestAnimationFrame(requestId);
}

function $requestAnimationFrameImpl_0(callback, element){
  var _callback = callback;
  var wrapper = $entry(function(){
    var now_0 = currentTimeMillis();
    _callback.execute(now_0);
  }
  );
  return $wnd.webkitRequestAnimationFrame(wrapper, element);
}

function AnimationSchedulerImplWebkit_0(){
  $clinit_AnimationSchedulerImpl();
}

defineSeed(14, 7, {}, AnimationSchedulerImplWebkit_0);
_.isNativelySupported = function isNativelySupported_1(){
  return !!($wnd.webkitRequestAnimationFrame && $wnd.webkitCancelRequestAnimationFrame);
}
;
_.requestAnimationFrame_0 = function requestAnimationFrame_1(callback, element){
  var requestId;
  requestId = $requestAnimationFrameImpl_0(callback, element);
  return new AnimationSchedulerImplWebkit$AnimationHandleImpl_0(requestId);
}
;
function AnimationSchedulerImplWebkit$AnimationHandleImpl_0(requestId){
  this.requestId = requestId;
}

defineSeed(15, 6, makeCastMap([Q$AnimationScheduler$AnimationHandle]), AnimationSchedulerImplWebkit$AnimationHandleImpl_0);
_.cancel = function cancel_1(){
  $cancelAnimationFrameImpl(this.requestId);
}
;
_.requestId = 0;
function $getElement(this$static){
  return $clinit_DOM() , this$static.element;
}

function $setElement(this$static, elem){
  $setElement_0(this$static, ($clinit_DOM() , elem));
}

function $setElement_0(this$static, elem){
  this$static.element = elem;
}

function $setHeight(this$static, height){
  ($clinit_DOM() , this$static.element).style['height'] = height;
}

function $setPixelSize(this$static, width_0, height){
  width_0 >= 0 && this$static.setWidth(width_0 + 'px');
  height >= 0 && this$static.setHeight(height + 'px');
}

function $setVisible(this$static, visible){
  setVisible(($clinit_DOM() , this$static.element), visible);
}

function $setWidth(this$static, width_0){
  ($clinit_DOM() , this$static.element).style['width'] = width_0;
}

function $sinkBitlessEvent(this$static, eventTypeName){
  sinkBitlessEvent(($clinit_DOM() , this$static.element), eventTypeName);
}

function setVisible(elem, visible){
  elem.style.display = visible?'':'none';
  visible?elem.removeAttribute('aria-hidden'):elem.setAttribute('aria-hidden', 'true');
}

defineSeed(19, 1, makeCastMap([Q$HasVisibility, Q$UIObject]));
_.resolvePotentialElement = function resolvePotentialElement(){
  throw new UnsupportedOperationException_0;
}
;
_.setHeight = function setHeight(height){
  $setHeight(this, height);
}
;
_.setWidth = function setWidth(width_0){
  $setWidth(this, width_0);
}
;
_.toString$ = function toString_1(){
  if (!this.element) {
    return '(null handle)';
  }
  return $getString(($clinit_DOM() , this.element));
}
;
function $addDomHandler(this$static, handler, type_0){
  var typeInt;
  typeInt = getTypeInt(type_0.name_0);
  typeInt == -1?$sinkBitlessEvent(this$static, type_0.name_0):this$static.eventsToSink == -1?sinkEvents(($clinit_DOM() , this$static.element), typeInt | (this$static.element.__eventBits || 0)):(this$static.eventsToSink |= typeInt);
  return $addHandler_0(!this$static.handlerManager?(this$static.handlerManager = new HandlerManager_0(this$static)):this$static.handlerManager, type_0, handler);
}

function $addHandler(this$static, handler, type_0){
  return $addHandler_0(!this$static.handlerManager?(this$static.handlerManager = new HandlerManager_0(this$static)):this$static.handlerManager, type_0, handler);
}

function $fireEvent(this$static, event_0){
  !!this$static.handlerManager && $fireEvent_0(this$static.handlerManager, event_0);
}

function $onAttach(this$static){
  var bitsToAdd;
  if (this$static.isAttached()) {
    throw new IllegalStateException_1("Should only call onAttach when the widget is detached from the browser's document");
  }
  this$static.attached = true;
  $clinit_DOM();
  setEventListener_0(this$static.element, this$static);
  bitsToAdd = this$static.eventsToSink;
  this$static.eventsToSink = -1;
  bitsToAdd > 0 && (this$static.eventsToSink == -1?sinkEvents(this$static.element, bitsToAdd | (this$static.element.__eventBits || 0)):(this$static.eventsToSink |= bitsToAdd));
  this$static.doAttachChildren();
  fire_0(this$static, true);
}

function $onBrowserEvent(this$static, event_0){
  var related;
  switch ($clinit_DOM() , $eventGetTypeInt(($clinit_DOMImpl() , event_0).type)) {
    case 16:
    case 32:
      related = impl_1.eventGetRelatedTarget(event_0);
      if (!!related && $isOrHasChild(this$static.element, related)) {
        return;
      }

  }
  fireNativeEvent(event_0, this$static, this$static.element);
}

function $onDetach(this$static){
  if (!this$static.isAttached()) {
    throw new IllegalStateException_1("Should only call onDetach when the widget is attached to the browser's document");
  }
  try {
    this$static.onUnload();
    fire_0(this$static, false);
  }
   finally {
    try {
      this$static.doDetachChildren();
    }
     finally {
      $clinit_DOM();
      setEventListener_0(this$static.element, null);
      this$static.attached = false;
    }
  }
}

function $removeFromParent(this$static){
  if (!this$static.parent_0) {
    $clinit_RootPanel();
    $contains_0(widgetsToDetach, this$static) && detachNow(this$static);
  }
   else if (instanceOf(this$static.parent_0, Q$HasWidgets)) {
    dynamicCast(this$static.parent_0, Q$HasWidgets).remove_0(this$static);
  }
   else if (this$static.parent_0) {
    throw new IllegalStateException_1("This widget's parent does not implement HasWidgets");
  }
}

function $setParent(this$static, parent_0){
  var oldParent;
  oldParent = this$static.parent_0;
  if (!parent_0) {
    try {
      !!oldParent && oldParent.isAttached() && this$static.onDetach();
    }
     finally {
      this$static.parent_0 = null;
    }
  }
   else {
    if (oldParent) {
      throw new IllegalStateException_1('Cannot set a new parent without first clearing the old parent');
    }
    this$static.parent_0 = parent_0;
    parent_0.isAttached() && this$static.onAttach();
  }
}

function $sinkEvents(this$static, eventBitsToAdd){
  this$static.eventsToSink == -1?sinkEvents(($clinit_DOM() , this$static.element), eventBitsToAdd | (this$static.element.__eventBits || 0)):(this$static.eventsToSink |= eventBitsToAdd);
}

function $unsinkEvents(this$static, eventBitsToRemove){
  this$static.eventsToSink == -1?sinkEvents(($clinit_DOM() , this$static.element), (this$static.element.__eventBits || 0) & ~eventBitsToRemove):(this$static.eventsToSink &= ~eventBitsToRemove);
}

defineSeed(18, 19, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$IsWidget, Q$UIObject, Q$Widget]));
_.doAttachChildren = function doAttachChildren(){
}
;
_.doDetachChildren = function doDetachChildren(){
}
;
_.fireEvent_0 = function fireEvent(event_0){
  $fireEvent(this, event_0);
}
;
_.isAttached = function isAttached(){
  return this.attached;
}
;
_.onAttach = function onAttach(){
  $onAttach(this);
}
;
_.onBrowserEvent = function onBrowserEvent(event_0){
  $onBrowserEvent(this, event_0);
}
;
_.onDetach = function onDetach(){
  $onDetach(this);
}
;
_.onUnload = function onUnload(){
}
;
_.attached = false;
_.eventsToSink = 0;
function $clinit_FocusWidget(){
  $clinit_FocusWidget = nullMethod;
  impl_0 = ($clinit_FocusImpl() , $clinit_FocusImpl() , implWidget);
}

function $setFocus(this$static){
  impl_0.focus_0(($clinit_DOM() , this$static.element));
}

defineSeed(17, 18, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$IsWidget, Q$UIObject, Q$Widget]));
_.onAttach = function onAttach_0(){
  var tabIndex;
  $onAttach(this);
  tabIndex = $getTabIndex(($clinit_DOM() , this.element));
  -1 == tabIndex && (this.element.tabIndex = 0 , undefined);
}
;
var impl_0;
function $setCoordinateSpaceHeight(this$static, height){
  $setHeight_0(($clinit_DOM() , this$static.element), height);
}

function $setCoordinateSpaceWidth(this$static, width_0){
  $setWidth_0(($clinit_DOM() , this$static.element), width_0);
}

function Canvas_1(element){
  $setElement_0(this, ($clinit_DOM() , element));
}

function createIfSupported(){
  $clinit_FocusWidget();
  var element;
  !detector && (detector = com_google_gwt_canvas_client_Canvas_CanvasElementSupportDetector());
  if (!detector.isSupportedCompileTime()) {
    return null;
  }
  element = $createCanvasElement($doc);
  if (!element.getContext) {
    return null;
  }
  return new Canvas_1(element);
}

defineSeed(16, 17, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$IsWidget, Q$UIObject, Q$Widget]), Canvas_1);
_.getCanvasElement = function getCanvasElement(){
  return $clinit_DOM() , this.element;
}
;
var detector;
defineSeed(21, 1, {});
_.isSupportedCompileTime = function isSupportedCompileTime(){
  return false;
}
;
function Canvas$CanvasElementSupportDetectedMaybe_0(){
}

defineSeed(20, 21, {}, Canvas$CanvasElementSupportDetectedMaybe_0);
_.isSupportedCompileTime = function isSupportedCompileTime_0(){
  return true;
}
;
function Canvas$CanvasElementSupportDetectedNo_0(){
}

defineSeed(22, 21, {}, Canvas$CanvasElementSupportDetectedNo_0);
_.isSupportedCompileTime = function isSupportedCompileTime_1(){
  return false;
}
;
function $elapsedMillis(this$static){
  return currentTimeMillis() - this$static.start_0;
}

function Duration_0(){
  this.start_0 = currentTimeMillis();
}

function currentTimeMillis(){
  return (new Date).getTime();
}

defineSeed(23, 1, {}, Duration_0);
_.start_0 = 0;
function setUncaughtExceptionHandler(handler){
  uncaughtExceptionHandler = handler;
}

var uncaughtExceptionHandler = null;
function $getStackTrace(this$static){
  if (this$static.stackTrace == null) {
    return initDim(_3Ljava_lang_StackTraceElement_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$StackTraceElement, 0, 0);
  }
  return this$static.stackTrace;
}

function $initCause(this$static, cause){
  if (this$static.cause) {
    throw new IllegalStateException_1("Can't overwrite cause");
  }
  if (cause == this$static) {
    throw new IllegalArgumentException_0('Self-causation not permitted');
  }
  this$static.cause = cause;
  return this$static;
}

function $printStackTrace(this$static, out){
  var element, element$array, element$index, element$max, t;
  for (t = this$static; t; t = t.cause) {
    t != this$static && out.append('Caused by: ');
    out.append('' + t);
    out.newLine();
    for (element$array = $getStackTrace(t) , element$index = 0 , element$max = element$array.length; element$index < element$max; ++element$index) {
      element = element$array[element$index];
      out.append('\tat ' + element);
      out.newLine();
    }
  }
}

function $setStackTrace(this$static, stackTrace){
  var c, copy, i_0;
  copy = initDim(_3Ljava_lang_StackTraceElement_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$StackTraceElement, stackTrace.length, 0);
  for (i_0 = 0 , c = stackTrace.length; i_0 < c; ++i_0) {
    if (!stackTrace[i_0]) {
      throw new NullPointerException_0;
    }
    copy[i_0] = stackTrace[i_0];
  }
  this$static.stackTrace = copy;
}

function $toString(this$static){
  var className, msg;
  className = this$static.___clazz$.typeName;
  msg = this$static.getMessage();
  return msg != null?className + ': ' + msg:className;
}

function Throwable_0(message){
  this.detailMessage = message;
  this.fillInStackTrace();
}

defineSeed(28, 1, makeCastMap([Q$Serializable, Q$Throwable]));
_.fillInStackTrace = function fillInStackTrace(){
  com_google_gwt_core_client_impl_StackTraceCreator_Collector().fillInStackTrace_0(this);
  return this;
}
;
_.getMessage = function getMessage(){
  return this.detailMessage;
}
;
_.toString$ = function toString_2(){
  return $toString(this);
}
;
defineSeed(27, 28, makeCastMap([Q$Serializable, Q$Throwable]));
function RuntimeException_0(){
  this.fillInStackTrace();
}

function RuntimeException_1(message){
  Throwable_0.call(this, message);
}

function RuntimeException_2(message, cause){
  this.cause = cause;
  this.detailMessage = message;
  this.fillInStackTrace();
}

defineSeed(26, 27, makeCastMap([Q$Serializable, Q$Throwable]), RuntimeException_1);
function $clinit_JavaScriptException(){
  $clinit_JavaScriptException = nullMethod;
  NOT_SET = new Object_1;
}

function $ensureInit(this$static){
  var exception;
  if (this$static.message_0 == null) {
    exception = this$static.e === NOT_SET?null:this$static.e;
    this$static.name_0 = exception == null?'null':instanceOfJso(exception)?getExceptionName0(dynamicCastJso(exception)):instanceOf(exception, Q$String)?'String':getClass__devirtual$(exception).typeName;
    this$static.description = this$static.description + ': ' + (instanceOfJso(exception)?getExceptionDescription0(dynamicCastJso(exception)):exception + '');
    this$static.message_0 = '(' + this$static.name_0 + ') ' + (instanceOfJso(exception)?getProperties(dynamicCastJso(exception)):'') + this$static.description;
  }
}

function JavaScriptException_0(e){
  $clinit_JavaScriptException();
  RuntimeException_0.call(this);
  this.description = '';
  this.e = e;
  this.description = '';
  com_google_gwt_core_client_impl_StackTraceCreator_Collector().createStackTrace(this);
}

function getExceptionDescription0(e){
  return e == null?null:e.message;
}

function getExceptionName0(e){
  return e == null?null:e.name;
}

defineSeed(25, 26, makeCastMap([Q$JavaScriptException, Q$Serializable, Q$Throwable]), JavaScriptException_0);
_.getMessage = function getMessage_0(){
  $ensureInit(this);
  return this.message_0;
}
;
_.getThrown = function getThrown(){
  return this.e === NOT_SET?null:this.e;
}
;
var NOT_SET;
function equals__devirtual$(this$static, other){
  var maybeJsoInvocation;
  return maybeJsoInvocation = this$static , isJavaObject(maybeJsoInvocation)?maybeJsoInvocation.equals$(other):maybeJsoInvocation === other;
}

function getClass__devirtual$(this$static){
  var maybeJsoInvocation;
  return maybeJsoInvocation = this$static , isJavaObject(maybeJsoInvocation)?maybeJsoInvocation.___clazz$:Lcom_google_gwt_core_client_JavaScriptObject_2_classLit;
}

function hashCode__devirtual$(this$static){
  var maybeJsoInvocation;
  return maybeJsoInvocation = this$static , isJavaObject(maybeJsoInvocation)?maybeJsoInvocation.hashCode$():getHashCode(maybeJsoInvocation);
}

function $push(this$static, value_0){
  this$static[this$static.length] = value_0;
}

function create(milliseconds){
  return new Date(milliseconds);
}

function $clinit_JsonUtils(){
  $clinit_JsonUtils = nullMethod;
  escapeTable = initEscapeTable();
  hasJsonParse = typeof JSON == 'object' && typeof JSON.parse == 'function';
}

function escapeChar(c){
  var lookedUp = escapeTable[c.charCodeAt(0)];
  return lookedUp == null?c:lookedUp;
}

function escapeJsonForEval(toEscape){
  $clinit_JsonUtils();
  var s = toEscape.replace(/[\xad\u0600-\u0603\u06dd\u070f\u17b4\u17b5\u200b-\u200f\u2028-\u202e\u2060-\u2064\u206a-\u206f\ufeff\ufff9-\ufffb]/g, function(x_0){
    return escapeChar(x_0);
  }
  );
  return s;
}

function escapeValue(toEscape){
  $clinit_JsonUtils();
  var s = toEscape.replace(/[\x00-\x1f\xad\u0600-\u0603\u06dd\u070f\u17b4\u17b5\u200b-\u200f\u2028-\u202e\u2060-\u2064\u206a-\u206f\ufeff\ufff9-\ufffb"\\]/g, function(x_0){
    return escapeChar(x_0);
  }
  );
  return '"' + s + '"';
}

function initEscapeTable(){
  var out = ['\\u0000', '\\u0001', '\\u0002', '\\u0003', '\\u0004', '\\u0005', '\\u0006', '\\u0007', '\\b', '\\t', '\\n', '\\u000B', '\\f', '\\r', '\\u000E', '\\u000F', '\\u0010', '\\u0011', '\\u0012', '\\u0013', '\\u0014', '\\u0015', '\\u0016', '\\u0017', '\\u0018', '\\u0019', '\\u001A', '\\u001B', '\\u001C', '\\u001D', '\\u001E', '\\u001F'];
  out[34] = '\\"';
  out[92] = '\\\\';
  out[173] = '\\u00ad';
  out[1536] = '\\u0600';
  out[1537] = '\\u0601';
  out[1538] = '\\u0602';
  out[1539] = '\\u0603';
  out[1757] = '\\u06dd';
  out[1807] = '\\u070f';
  out[6068] = '\\u17b4';
  out[6069] = '\\u17b5';
  out[8203] = '\\u200b';
  out[8204] = '\\u200c';
  out[8205] = '\\u200d';
  out[8206] = '\\u200e';
  out[8207] = '\\u200f';
  out[8232] = '\\u2028';
  out[8233] = '\\u2029';
  out[8234] = '\\u202a';
  out[8235] = '\\u202b';
  out[8236] = '\\u202c';
  out[8237] = '\\u202d';
  out[8238] = '\\u202e';
  out[8288] = '\\u2060';
  out[8289] = '\\u2061';
  out[8290] = '\\u2062';
  out[8291] = '\\u2063';
  out[8292] = '\\u2064';
  out[8298] = '\\u206a';
  out[8299] = '\\u206b';
  out[8300] = '\\u206c';
  out[8301] = '\\u206d';
  out[8302] = '\\u206e';
  out[8303] = '\\u206f';
  out[65279] = '\\ufeff';
  out[65529] = '\\ufff9';
  out[65530] = '\\ufffa';
  out[65531] = '\\ufffb';
  return out;
}

var escapeTable, hasJsonParse = false;
defineSeed(34, 1, {});
function apply_0(jsFunction, thisObj, args){
  return jsFunction.apply(thisObj, args);
  var __0;
}

function dispose(d){
  !!d && (d.this$0.disposeEventSystem() , cleanupDOM(d.this$0));
}

function enter(){
  var now_0;
  if (entryDepth != 0) {
    now_0 = currentTimeMillis();
    if (now_0 - watchdogEntryDepthLastScheduled > 2000) {
      watchdogEntryDepthLastScheduled = now_0;
      watchdogEntryDepthTimerId = watchdogEntryDepthSchedule();
    }
  }
  if (entryDepth++ == 0) {
    $flushEntryCommands(($clinit_SchedulerImpl() , INSTANCE_0));
    return true;
  }
  return false;
}

function entry_0(jsFunction){
  return function(){
    try {
      return entry0(jsFunction, this, arguments);
    }
     catch (e) {
      throw e;
    }
  }
  ;
}

function entry0(jsFunction, thisObj, args){
  var initialEntry, t;
  initialEntry = enter();
  try {
    if (uncaughtExceptionHandler) {
      try {
        return apply_0(jsFunction, thisObj, args);
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, Q$Throwable)) {
          t = $e0;
          reportUncaughtException(t);
          return undefined;
        }
         else 
          throw unwrap($e0);
      }
    }
     else {
      return apply_0(jsFunction, thisObj, args);
    }
  }
   finally {
    exit(initialEntry);
  }
}

function exit(initialEntry){
  initialEntry && $flushFinallyCommands(($clinit_SchedulerImpl() , INSTANCE_0));
  --entryDepth;
  if (initialEntry) {
    if (watchdogEntryDepthTimerId != -1) {
      watchdogEntryDepthCancel(watchdogEntryDepthTimerId);
      watchdogEntryDepthTimerId = -1;
    }
  }
}

function getHashCode(o){
  return o.$H || (o.$H = ++sNextHashId);
}

function registerEntry(){
  return entry_0;
}

function reportToBrowser(e){
  $wnd.setTimeout(function(){
    throw e;
  }
  , 0);
}

function reportUncaughtException(e){
  var handler;
  handler = uncaughtExceptionHandler;
  if (handler) {
    if (handler == uncaughtExceptionHandlerForTest) {
      return;
    }
    $log_2(handler.val$log, ($clinit_Level() , SEVERE), e.getMessage(), e);
    return;
  }
  reportToBrowser(instanceOf(e, Q$JavaScriptException)?dynamicCast(e, Q$JavaScriptException).getThrown():e);
}

function setTimeout_0(func, time){
  return setTimeout0(func, time, null);
}

function watchdogEntryDepthCancel(timerId){
  clearTimeout0(timerId);
}

function watchdogEntryDepthSchedule(){
  return setTimeout_0(function(){
    entryDepth != 0 && (entryDepth = 0);
    watchdogEntryDepthTimerId = -1;
  }
  , 10);
}

var entryDepth = 0, sNextHashId = 0, uncaughtExceptionHandlerForTest, watchdogEntryDepthLastScheduled = 0, watchdogEntryDepthTimerId = -1;
function $clinit_SchedulerImpl(){
  $clinit_SchedulerImpl = nullMethod;
  INSTANCE_0 = new SchedulerImpl_0;
}

function $flushEntryCommands(this$static){
  var oldQueue, rescheduled;
  if (this$static.entryCommands) {
    rescheduled = null;
    do {
      oldQueue = this$static.entryCommands;
      this$static.entryCommands = null;
      rescheduled = runScheduledTasks(oldQueue, rescheduled);
    }
     while (this$static.entryCommands);
    this$static.entryCommands = rescheduled;
  }
}

function $flushFinallyCommands(this$static){
  var oldQueue, rescheduled;
  if (this$static.finallyCommands) {
    rescheduled = null;
    do {
      oldQueue = this$static.finallyCommands;
      this$static.finallyCommands = null;
      rescheduled = runScheduledTasks(oldQueue, rescheduled);
    }
     while (this$static.finallyCommands);
    this$static.finallyCommands = rescheduled;
  }
}

function $flushPostEventPumpCommands(this$static){
  var oldDeferred;
  if (this$static.deferredCommands) {
    oldDeferred = this$static.deferredCommands;
    this$static.deferredCommands = null;
    !this$static.incrementalCommands && (this$static.incrementalCommands = []);
    runScheduledTasks(oldDeferred, this$static.incrementalCommands);
  }
  !!this$static.incrementalCommands && (this$static.incrementalCommands = $runRepeatingTasks(this$static.incrementalCommands));
}

function $isWorkQueued(this$static){
  return !!this$static.deferredCommands || !!this$static.incrementalCommands;
}

function $maybeSchedulePostEventPumpCommands(this$static){
  if (!this$static.shouldBeRunning) {
    this$static.shouldBeRunning = true;
    !this$static.flusher && (this$static.flusher = new SchedulerImpl$Flusher_0(this$static));
    scheduleFixedDelayImpl(this$static.flusher, 1);
    !this$static.rescue && (this$static.rescue = new SchedulerImpl$Rescuer_0(this$static));
    scheduleFixedDelayImpl(this$static.rescue, 50);
  }
}

function $runRepeatingTasks(tasks){
  var canceledSomeTasks, duration, executedSomeTask, i_0, length_0, newTasks, t;
  length_0 = tasks.length;
  if (length_0 == 0) {
    return null;
  }
  canceledSomeTasks = false;
  duration = new Duration_0;
  while (currentTimeMillis() - duration.start_0 < 100) {
    executedSomeTask = false;
    for (i_0 = 0; i_0 < length_0; i_0++) {
      t = tasks[i_0];
      if (!t) {
        continue;
      }
      executedSomeTask = true;
      if (!t[0].execute_0()) {
        tasks[i_0] = null;
        canceledSomeTasks = true;
      }
    }
    if (!executedSomeTask) {
      break;
    }
  }
  if (canceledSomeTasks) {
    newTasks = [];
    for (i_0 = 0; i_0 < length_0; i_0++) {
      !!tasks[i_0] && $push(newTasks, tasks[i_0]);
    }
    return newTasks.length == 0?null:newTasks;
  }
   else {
    return tasks;
  }
}

function $scheduleDeferred(this$static, cmd){
  this$static.deferredCommands = push_0(this$static.deferredCommands, [cmd, false]);
  $maybeSchedulePostEventPumpCommands(this$static);
}

function SchedulerImpl_0(){
}

function execute_0(cmd){
  return cmd.execute_0();
}

function push_0(queue, task){
  !queue && (queue = []);
  $push(queue, task);
  return queue;
}

function runScheduledTasks(tasks, rescheduled){
  var e, i_0, j, t;
  for (i_0 = 0 , j = tasks.length; i_0 < j; i_0++) {
    t = tasks[i_0];
    try {
      t[1]?t[0].execute_0() && (rescheduled = push_0(rescheduled, t)):t[0].execute_1();
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, Q$Throwable)) {
        e = $e0;
        reportUncaughtException(e);
      }
       else 
        throw unwrap($e0);
    }
  }
  return rescheduled;
}

function scheduleFixedDelayImpl(cmd, delayMs){
  $clinit_SchedulerImpl();
  setTimeout_0(function(){
    var ret = $entry(execute_0)(cmd);
    ret && setTimeout_0(arguments.callee, delayMs);
  }
  , delayMs);
}

defineSeed(36, 34, {}, SchedulerImpl_0);
_.flushRunning = false;
_.shouldBeRunning = false;
var INSTANCE_0;
function SchedulerImpl$Flusher_0(this$0){
  this.this$0 = this$0;
}

defineSeed(37, 1, {}, SchedulerImpl$Flusher_0);
_.execute_0 = function execute_1(){
  this.this$0.flushRunning = true;
  $flushPostEventPumpCommands(this.this$0);
  this.this$0.flushRunning = false;
  return this.this$0.shouldBeRunning = $isWorkQueued(this.this$0);
}
;
function SchedulerImpl$Rescuer_0(this$0){
  this.this$0 = this$0;
}

defineSeed(38, 1, {}, SchedulerImpl$Rescuer_0);
_.execute_0 = function execute_2(){
  this.this$0.flushRunning && scheduleFixedDelayImpl(this.this$0.flusher, 1);
  return this.this$0.shouldBeRunning;
}
;
function extractNameFromToString(fnToString){
  var index_0, start_0, toReturn;
  toReturn = '';
  fnToString = $trim(fnToString);
  index_0 = fnToString.indexOf('(');
  start_0 = fnToString.indexOf('function') == 0?8:0;
  if (index_0 == -1) {
    index_0 = $indexOf_0(fnToString, fromCodePoint(64));
    start_0 = fnToString.indexOf('function ') == 0?9:0;
  }
  index_0 != -1 && (toReturn = $trim($substring_0(fnToString, start_0, index_0)));
  return toReturn.length > 0?toReturn:'anonymous';
}

function getProperties(e){
  return $getProperties((com_google_gwt_core_client_impl_StackTraceCreator_Collector() , e));
}

function parseInt_0(number){
  return parseInt(number) || -1;
}

function splice(arr, length_0){
  arr.length >= length_0 && arr.splice(0, length_0);
  return arr;
}

function $getProperties(e){
  var result = '';
  try {
    for (var prop in e) {
      if (prop != 'name' && prop != 'message' && prop != 'toString') {
        try {
          var propValue = prop != '__gwt$exception'?e[prop]:'<skipped>';
          result += '\n ' + prop + ': ' + propValue;
        }
         catch (ignored) {
        }
      }
    }
  }
   catch (ignored) {
  }
  return result;
}

function $makeException(){
  try {
    null.a();
  }
   catch (e) {
    return e;
  }
}

function StackTraceCreator$Collector_0(){
}

defineSeed(41, 1, {}, StackTraceCreator$Collector_0);
_.collect = function collect(){
  var seen = {};
  var toReturn = [];
  var callee = arguments.callee.caller.caller;
  while (callee) {
    var name_0 = this.extractName(callee.toString());
    toReturn.push(name_0);
    var keyName = ':' + name_0;
    var withThisName = seen[keyName];
    if (withThisName) {
      var i_0, j;
      for (i_0 = 0 , j = withThisName.length; i_0 < j; i_0++) {
        if (withThisName[i_0] === callee) {
          return toReturn;
        }
      }
    }
    (withThisName || (seen[keyName] = [])).push(callee);
    callee = callee.caller;
  }
  return toReturn;
}
;
_.createStackTrace = function createStackTrace(e){
  var i_0, j, stack_0, stackTrace;
  stack_0 = this.inferFrom(e.e === ($clinit_JavaScriptException() , NOT_SET)?null:e.e);
  stackTrace = initDim(_3Ljava_lang_StackTraceElement_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$StackTraceElement, stack_0.length, 0);
  for (i_0 = 0 , j = stackTrace.length; i_0 < j; i_0++) {
    stackTrace[i_0] = new StackTraceElement_0(stack_0[i_0], null, -1);
  }
  $setStackTrace(e, stackTrace);
}
;
_.extractName = function extractName(fnToString){
  return extractNameFromToString(fnToString);
}
;
_.fillInStackTrace_0 = function fillInStackTrace_0(t){
  var i_0, j, stack_0, stackTrace;
  stack_0 = com_google_gwt_core_client_impl_StackTraceCreator_Collector().collect();
  stackTrace = initDim(_3Ljava_lang_StackTraceElement_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$StackTraceElement, stack_0.length, 0);
  for (i_0 = 0 , j = stackTrace.length; i_0 < j; i_0++) {
    stackTrace[i_0] = new StackTraceElement_0(stack_0[i_0], null, -1);
  }
  $setStackTrace(t, stackTrace);
}
;
_.inferFrom = function inferFrom(e){
  return [];
}
;
function $inferFrom(this$static, e){
  var i_0, j, jso, stack_0;
  jso = instanceOfJso(e)?dynamicCastJso(e):null;
  stack_0 = jso && jso.stack?jso.stack.split('\n'):[];
  for (i_0 = 0 , j = stack_0.length; i_0 < j; i_0++) {
    stack_0[i_0] = this$static.extractName(stack_0[i_0]);
  }
  return stack_0;
}

function StackTraceCreator$CollectorMoz_0(){
}

defineSeed(43, 41, {}, StackTraceCreator$CollectorMoz_0);
_.collect = function collect_0(){
  return splice(this.inferFrom($makeException()), this.toSplice());
}
;
_.inferFrom = function inferFrom_0(e){
  return $inferFrom(this, e);
}
;
_.toSplice = function toSplice(){
  return 2;
}
;
function $clinit_StackTraceCreator$CollectorChrome(){
  $clinit_StackTraceCreator$CollectorChrome = nullMethod;
  Error.stackTraceLimit = 128;
}

function $inferFrom_0(this$static, e){
  var stack_0;
  stack_0 = $inferFrom(this$static, e);
  if (stack_0.length == 0) {
    return (new StackTraceCreator$Collector_0).inferFrom(e);
  }
   else {
    stack_0[0].indexOf('anonymous@@') == 0 && (stack_0 = splice(stack_0, 1));
    return stack_0;
  }
}

function $parseStackTrace(this$static, e, stack_0){
  var col, endFileUrl, fileName, i_0, j, lastColon, line, location_0, stackElements, stackTrace;
  stackTrace = initDim(_3Ljava_lang_StackTraceElement_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$StackTraceElement, stack_0.length, 0);
  for (i_0 = 0 , j = stackTrace.length; i_0 < j; i_0++) {
    stackElements = $split(stack_0[i_0], '@@', 0);
    line = -1;
    col = -1;
    fileName = 'Unknown';
    if (stackElements.length == 2 && stackElements[1] != null) {
      location_0 = stackElements[1];
      lastColon = $lastIndexOf(location_0, fromCodePoint(58));
      endFileUrl = $lastIndexOf_0(location_0, fromCodePoint(58), lastColon - 1);
      fileName = $substring_0(location_0, 0, endFileUrl);
      if (lastColon != -1 && endFileUrl != -1) {
        line = parseInt_0($substring_0(location_0, endFileUrl + 1, lastColon));
        col = parseInt_0($substring(location_0, lastColon + 1));
      }
    }
    stackTrace[i_0] = new StackTraceElement_0(stackElements[0], fileName + '@' + col, this$static.replaceIfNoSourceMap(line < 0?-1:line));
  }
  $setStackTrace(e, stackTrace);
}

defineSeed(42, 43, {});
_.collect = function collect_1(){
  var res;
  res = splice($inferFrom_0(this, $makeException()), 3);
  res.length == 0 && (res = splice((new StackTraceCreator$Collector_0).collect(), 1));
  return res;
}
;
_.createStackTrace = function createStackTrace_0(e){
  var stack_0;
  stack_0 = $inferFrom_0(this, e.e === ($clinit_JavaScriptException() , NOT_SET)?null:e.e);
  $parseStackTrace(this, e, stack_0);
}
;
_.extractName = function extractName_0(fnToString){
  var closeParen, index_0, location_0, toReturn;
  if (fnToString.length == 0) {
    return 'anonymous';
  }
  toReturn = $trim(fnToString);
  toReturn.indexOf('at ') == 0 && (toReturn = $substring(toReturn, 3));
  index_0 = toReturn.indexOf('[');
  index_0 != -1 && (toReturn = $trim($substring_0(toReturn, 0, index_0)) + $trim($substring(toReturn, toReturn.indexOf(']', index_0) + 1)));
  index_0 = toReturn.indexOf('(');
  if (index_0 == -1) {
    index_0 = toReturn.indexOf('@');
    if (index_0 == -1) {
      location_0 = toReturn;
      toReturn = '';
    }
     else {
      location_0 = $trim($substring(toReturn, index_0 + 1));
      toReturn = $trim($substring_0(toReturn, 0, index_0));
    }
  }
   else {
    closeParen = toReturn.indexOf(')', index_0);
    location_0 = $substring_0(toReturn, index_0 + 1, closeParen);
    toReturn = $trim($substring_0(toReturn, 0, index_0));
  }
  index_0 = $indexOf_0(toReturn, fromCodePoint(46));
  index_0 != -1 && (toReturn = $substring(toReturn, index_0 + 1));
  return (toReturn.length > 0?toReturn:'anonymous') + '@@' + location_0;
}
;
_.fillInStackTrace_0 = function fillInStackTrace_1(t){
  var stack_0;
  stack_0 = com_google_gwt_core_client_impl_StackTraceCreator_Collector().collect();
  $parseStackTrace(this, t, stack_0);
}
;
_.inferFrom = function inferFrom_1(e){
  return $inferFrom_0(this, e);
}
;
_.replaceIfNoSourceMap = function replaceIfNoSourceMap(line){
  return line;
}
;
_.toSplice = function toSplice_0(){
  return 3;
}
;
function StackTraceCreator$CollectorChromeNoSourceMap_0(){
  $clinit_StackTraceCreator$CollectorChrome();
}

defineSeed(44, 42, {}, StackTraceCreator$CollectorChromeNoSourceMap_0);
_.replaceIfNoSourceMap = function replaceIfNoSourceMap_0(line){
  return -1;
}
;
defineSeed(45, 1, {});
function $append(this$static, x_0){
  this$static.string += x_0;
}

function $append_0(this$static, x_0){
  this$static.string += x_0;
}

function StringBufferImplAppend_0(){
}

defineSeed(46, 45, {}, StringBufferImplAppend_0);
_.string = '';
function clearInterval0(timerId){
  $wnd.clearInterval(timerId);
}

function clearTimeout0(timerId){
  $wnd.clearTimeout(timerId);
}

function setTimeout0(func, time, disposeable){
  var timerId = $wnd.setTimeout(function(){
    func();
    disposeable != null && dispose(disposeable);
  }
  , time);
  return timerId;
}

function $initCause_0(this$static, cause){
  return $initCause(this$static, instanceOf(cause, Q$SerializableThrowable)?dynamicCast(cause, Q$SerializableThrowable):cause?createSerializable(cause):null);
}

function $setDesignatedType(this$static, typeName){
  this$static.typeName = typeName;
  this$static.exactTypeKnown = true;
}

function SerializableThrowable_0(message){
  Throwable_0.call(this, message);
  this.typeName = null;
}

function createSerializable(t){
  var throwable;
  throwable = new SerializableThrowable_0(t.getMessage());
  $setStackTrace(throwable, $getStackTrace(t));
  $initCause_0(throwable, t.cause);
  $setDesignatedType(throwable, t.___clazz$.typeName);
  return throwable;
}

defineSeed(48, 28, makeCastMap([Q$SerializableThrowable, Q$Serializable, Q$Throwable]), SerializableThrowable_0);
_.fillInStackTrace = function fillInStackTrace_2(){
  return this;
}
;
_.toString$ = function toString_3(){
  var msg, type_0;
  type_0 = this.exactTypeKnown?this.typeName:this.typeName + '(EXACT TYPE UNKNOWN)';
  msg = this.detailMessage;
  return msg == null?type_0:type_0 + ': ' + msg;
}
;
_.exactTypeKnown = false;
function $appendChild(this$static, newChild){
  return this$static.appendChild(newChild);
}

function $getParentElement(this$static){
  return $getParentElement_0(($clinit_DOMImpl() , this$static));
}

function $isOrHasChild(this$static, child){
  return ($clinit_DOMImpl() , impl_1).isOrHasChild(this$static, child);
}

function $removeChild(this$static, oldChild){
  return this$static.removeChild(oldChild);
}

function is(o){
  try {
    return !!o && !!o.nodeType;
  }
   catch (e) {
    return false;
  }
}

function $dispatchEvent(this$static, evt){
  ($clinit_DOMImpl() , impl_1).dispatchEvent_0(this$static, evt);
}

function $getAbsoluteLeft(this$static){
  return ($clinit_DOMImpl() , impl_1).getAbsoluteLeft(this$static);
}

function $getAbsoluteTop(this$static){
  return ($clinit_DOMImpl() , impl_1).getAbsoluteTop(this$static);
}

function $getFirstChildElement(this$static){
  return $getFirstChildElement_0(($clinit_DOMImpl() , this$static));
}

function $getInnerText(this$static){
  return ($clinit_DOMImpl() , impl_1).getInnerText(this$static);
}

function $getPropertyInt(this$static, name_0){
  return parseInt(this$static[name_0]) | 0;
}

function $getScrollLeft(this$static){
  return ($clinit_DOMImpl() , impl_1).getScrollLeft_0(this$static);
}

function $getString(this$static){
  return ($clinit_DOMImpl() , impl_1).toString_0(this$static);
}

function $getSubPixelScrollTop(this$static){
  return this$static.scrollTop || 0;
}

function $getSubPixelScrollWidth(this$static){
  return this$static.scrollWidth || 0;
}

function $setClassName(this$static, className){
  this$static.className = className;
}

function $setInnerHTML(this$static, html){
  this$static.innerHTML = html || '';
}

function $setInnerText(this$static, text_0){
  ($clinit_DOMImpl() , impl_1).setInnerText(this$static, text_0);
}

function $setPropertyString(this$static, name_0, value_0){
  this$static[name_0] = value_0;
}

function $setScrollLeft(this$static, scrollLeft){
  ($clinit_DOMImpl() , impl_1).setScrollLeft(this$static, scrollLeft);
}

function $setScrollTop(this$static, scrollTop){
  this$static.scrollTop = scrollTop;
}

function is_0(o){
  if (is(o)) {
    return !!o && o.nodeType == 1;
  }
  return false;
}

function $setHeight_0(this$static, height){
  this$static.height = height;
}

function $setWidth_0(this$static, width_0){
  this$static.width = width_0;
}

function $clinit_DOMImpl(){
  $clinit_DOMImpl = nullMethod;
  impl_1 = com_google_gwt_dom_client_DOMImpl();
}

function $getFirstChildElement_0(elem){
  var child = elem.firstChild;
  while (child && child.nodeType != 1)
    child = child.nextSibling;
  return child;
}

function $getParentElement_0(node){
  var parent_0 = node.parentNode;
  (!parent_0 || parent_0.nodeType != 1) && (parent_0 = null);
  return parent_0;
}

function $getSubPixelAbsoluteLeft(elem){
  var left = 0;
  var curr = elem;
  while (curr.offsetParent) {
    left -= curr.scrollLeft;
    curr = curr.parentNode;
  }
  while (elem) {
    left += elem.offsetLeft;
    elem = elem.offsetParent;
  }
  return left;
}

function $getSubPixelAbsoluteTop(elem){
  var top_0 = 0;
  var curr = elem;
  while (curr.offsetParent) {
    top_0 -= curr.scrollTop;
    curr = curr.parentNode;
  }
  while (elem) {
    top_0 += elem.offsetTop;
    elem = elem.offsetParent;
  }
  return top_0;
}

function $getSubPixelScrollLeft(elem){
  return elem.scrollLeft || 0;
}

function $setScrollLeft_0(elem, left){
  elem.scrollLeft = left;
}

function toInt32(val){
  $clinit_DOMImpl();
  return val | 0;
}

defineSeed(54, 1, {});
_.createButtonElement = function createButtonElement(doc, type_0){
  var e = doc.createElement('BUTTON');
  e.type = type_0;
  return e;
}
;
_.createElement_0 = function createElement(doc, tag){
  return doc.createElement(tag);
}
;
_.createScriptElement = function createScriptElement(doc, source){
  var elem;
  elem = this.createElement_0(doc, 'script');
  elem.text = source;
  return elem;
}
;
_.eventGetButton = function eventGetButton(evt){
  return evt.button | 0;
}
;
_.eventGetCurrentTarget = function eventGetCurrentTarget(event_0){
  return event_0.currentTarget;
}
;
_.eventStopPropagation = function eventStopPropagation(evt){
  evt.stopPropagation();
}
;
_.getAbsoluteLeft = function getAbsoluteLeft(elem){
  return toInt32($getSubPixelAbsoluteLeft(elem));
}
;
_.getAbsoluteTop = function getAbsoluteTop(elem){
  return toInt32($getSubPixelAbsoluteTop(elem));
}
;
_.getBodyOffsetLeft = function getBodyOffsetLeft(doc){
  return 0;
}
;
_.getBodyOffsetTop = function getBodyOffsetTop(doc){
  return 0;
}
;
_.getInnerText = function getInnerText(node){
  var text_0 = '', child = node.firstChild;
  while (child) {
    child.nodeType == 1?(text_0 += this.getInnerText(child)):child.nodeValue && (text_0 += child.nodeValue);
    child = child.nextSibling;
  }
  return text_0;
}
;
_.getScrollLeft = function getScrollLeft(doc){
  return $getScrollLeft($equals(doc.compatMode, 'CSS1Compat')?doc.documentElement:doc.body);
}
;
_.getScrollLeft_0 = function getScrollLeft_0(elem){
  return toInt32($getSubPixelScrollLeft(elem));
}
;
_.getScrollTop = function getScrollTop(doc){
  return (($equals(doc.compatMode, 'CSS1Compat')?doc.documentElement:doc.body).scrollTop || 0) | 0;
}
;
_.getTabIndex = function getTabIndex(elem){
  return elem.tabIndex;
}
;
_.getTagName = function getTagName(elem){
  return elem.tagName;
}
;
_.setInnerText = function setInnerText(elem, text_0){
  while (elem.firstChild) {
    elem.removeChild(elem.firstChild);
  }
  text_0 != null && elem.appendChild(elem.ownerDocument.createTextNode(text_0));
}
;
_.setScrollLeft = function setScrollLeft(elem, left){
  $setScrollLeft_0(elem, left);
}
;
_.toString_0 = function toString_4(elem){
  return elem.outerHTML;
}
;
var impl_1;
function $getBoundingClientRectLeft(elem){
  try {
    return elem.getBoundingClientRect().left;
  }
   catch (e) {
    return 0;
  }
}

function $getBoundingClientRectTop(elem){
  try {
    return elem.getBoundingClientRect().top;
  }
   catch (e) {
    return 0;
  }
}

function $isRTL(elem){
  return elem.currentStyle.direction == 'rtl';
}

function isOrHasChildImpl(parent_0, child){
  if (parent_0.nodeType != 1 && parent_0.nodeType != 9) {
    return parent_0 == child;
  }
  if (child.nodeType != 1) {
    child = child.parentNode;
    if (!child) {
      return false;
    }
  }
  if (parent_0.nodeType == 9) {
    return parent_0 === child || parent_0.body && parent_0.body.contains(child);
  }
   else {
    return parent_0 === child || parent_0.contains(child);
  }
}

defineSeed(56, 54, {});
_.createButtonElement = function createButtonElement_0(doc, type_0){
  return doc.createElement("<BUTTON type='" + type_0 + "'><\/BUTTON>");
}
;
_.createElement_0 = function createElement_0(doc, tagName){
  var container, elem;
  if (tagName.indexOf(':') != -1) {
    container = (!doc.__gwt_container && (doc.__gwt_container = doc.createElement('div')) , doc.__gwt_container);
    $setInnerHTML(container, '<' + tagName + '/>');
    elem = $getFirstChildElement_0(($clinit_DOMImpl() , container));
    container.removeChild(elem);
    return elem;
  }
  return doc.createElement(tagName);
}
;
_.createHtmlEvent = function createHtmlEvent(doc, type_0, canBubble, cancelable){
  var evt = doc.createEventObject();
  evt.type = type_0;
  return evt;
}
;
_.dispatchEvent_0 = function dispatchEvent_1(target, evt){
  target.fireEvent('on' + evt.type, evt);
}
;
_.eventGetCurrentTarget = function eventGetCurrentTarget_0(event_0){
  return currentEventTarget;
}
;
_.eventGetRelatedTarget = function eventGetRelatedTarget(evt){
  return evt.relatedTarget || (evt.type == 'mouseout'?evt.toElement:evt.fromElement);
}
;
_.eventGetTarget = function eventGetTarget(evt){
  return evt.srcElement;
}
;
_.eventPreventDefault = function eventPreventDefault(evt){
  evt.returnValue = false;
}
;
_.eventStopPropagation = function eventStopPropagation_0(evt){
  evt.cancelBubble = true;
}
;
_.getBodyOffsetLeft = function getBodyOffsetLeft_0(doc){
  return ($equals(doc.compatMode, 'CSS1Compat')?doc.documentElement:doc.body).clientLeft;
}
;
_.getBodyOffsetTop = function getBodyOffsetTop_0(doc){
  return ($equals(doc.compatMode, 'CSS1Compat')?doc.documentElement:doc.body).clientTop;
}
;
_.getInnerText = function getInnerText_0(elem){
  return elem.innerText;
}
;
_.getTagName = function getTagName_0(elem){
  var scopeName, tagName;
  tagName = elem.tagName;
  scopeName = elem.scopeName;
  if (scopeName == null || $equalsIgnoreCase('html', scopeName)) {
    return tagName;
  }
  return scopeName + ':' + tagName;
}
;
_.isOrHasChild = function isOrHasChild(parent_0, child){
  return isOrHasChildImpl(parent_0, child);
}
;
_.setInnerText = function setInnerText_0(elem, text_0){
  elem.innerText = text_0 || '';
}
;
var currentEventTarget;
function DOMImplIE8_0(){
  $clinit_DOMImpl();
}

defineSeed(55, 56, {}, DOMImplIE8_0);
_.getAbsoluteLeft = function getAbsoluteLeft_0(elem){
  var doc;
  doc = elem.ownerDocument;
  return $getBoundingClientRectLeft(elem) + impl_1.getScrollLeft(doc);
}
;
_.getAbsoluteTop = function getAbsoluteTop_0(elem){
  var doc;
  doc = elem.ownerDocument;
  return $getBoundingClientRectTop(elem) + impl_1.getScrollTop(doc);
}
;
_.getScrollLeft_0 = function getScrollLeft_1(elem){
  if ($isRTL(elem)) {
    return -toInt32($getSubPixelScrollLeft(elem));
  }
  return toInt32($getSubPixelScrollLeft(elem));
}
;
_.setScrollLeft = function setScrollLeft_0(elem, left){
  $isRTL(elem) && (left = -left);
  $setScrollLeft_0(elem, left);
}
;
defineSeed(59, 54, {});
_.createHtmlEvent = function createHtmlEvent_0(doc, type_0, canBubble, cancelable){
  var evt = doc.createEvent('HTMLEvents');
  evt.initEvent(type_0, canBubble, cancelable);
  return evt;
}
;
_.dispatchEvent_0 = function dispatchEvent_2(target, evt){
  target.dispatchEvent(evt);
}
;
_.eventGetButton = function eventGetButton_0(evt){
  var button = evt.button;
  if (button == 1) {
    return 4;
  }
   else if (button == 2) {
    return 2;
  }
  return 1;
}
;
_.eventGetRelatedTarget = function eventGetRelatedTarget_0(evt){
  return evt.relatedTarget;
}
;
_.eventGetTarget = function eventGetTarget_0(evt){
  return evt.target;
}
;
_.eventPreventDefault = function eventPreventDefault_0(evt){
  evt.preventDefault();
}
;
_.getInnerText = function getInnerText_1(elem){
  return elem.textContent;
}
;
_.isOrHasChild = function isOrHasChild_0(parent_0, child){
  return parent_0.contains(child);
}
;
_.setInnerText = function setInnerText_1(elem, text_0){
  elem.textContent = text_0 || '';
}
;
function $isRTL_0(elem){
  return elem.ownerDocument.defaultView.getComputedStyle(elem, '').direction == 'rtl';
}

function getAbsoluteLeftUsingOffsets(elem){
  if (elem.offsetLeft == null) {
    return 0;
  }
  var left = 0;
  var doc = elem.ownerDocument;
  var curr = elem.parentNode;
  if (curr) {
    while (curr.offsetParent) {
      left -= curr.scrollLeft;
      doc.defaultView.getComputedStyle(curr, '').getPropertyValue('direction') == 'rtl' && (left += curr.scrollWidth - curr.clientWidth);
      curr = curr.parentNode;
    }
  }
  while (elem) {
    left += elem.offsetLeft;
    if (doc.defaultView.getComputedStyle(elem, '')['position'] == 'fixed') {
      left += doc.body.scrollLeft;
      return left;
    }
    var parent_0 = elem.offsetParent;
    parent_0 && $wnd.devicePixelRatio && (left += parseInt(doc.defaultView.getComputedStyle(parent_0, '').getPropertyValue('border-left-width')));
    if (parent_0 && parent_0.tagName == 'BODY' && elem.style.position == 'absolute') {
      break;
    }
    elem = parent_0;
  }
  return left;
}

function getAbsoluteTopUsingOffsets(elem){
  if (elem.offsetTop == null) {
    return 0;
  }
  var top_0 = 0;
  var doc = elem.ownerDocument;
  var curr = elem.parentNode;
  if (curr) {
    while (curr.offsetParent) {
      top_0 -= curr.scrollTop;
      curr = curr.parentNode;
    }
  }
  while (elem) {
    top_0 += elem.offsetTop;
    if (doc.defaultView.getComputedStyle(elem, '')['position'] == 'fixed') {
      top_0 += doc.body.scrollTop;
      return top_0;
    }
    var parent_0 = elem.offsetParent;
    parent_0 && $wnd.devicePixelRatio && (top_0 += parseInt(doc.defaultView.getComputedStyle(parent_0, '').getPropertyValue('border-top-width')));
    if (parent_0 && parent_0.tagName == 'BODY' && elem.style.position == 'absolute') {
      break;
    }
    elem = parent_0;
  }
  return top_0;
}

function getBoundingClientRect(element){
  return element.getBoundingClientRect && element.getBoundingClientRect();
}

defineSeed(58, 59, {});
_.createButtonElement = function createButtonElement_1(doc, type_0){
  var e = doc.createElement('BUTTON');
  e.setAttribute('type', type_0);
  return e;
}
;
_.createScriptElement = function createScriptElement_0(doc, source){
  var elem;
  elem = doc.createElement('script');
  impl_1.setInnerText(elem, source);
  return elem;
}
;
_.eventGetCurrentTarget = function eventGetCurrentTarget_1(event_0){
  return event_0.currentTarget || $wnd;
}
;
_.getAbsoluteLeft = function getAbsoluteLeft_1(elem){
  var left, rect;
  rect = getBoundingClientRect(elem);
  left = rect?rect.left + $getScrollLeft(elem.ownerDocument.body):getAbsoluteLeftUsingOffsets(elem);
  return toInt32(left);
}
;
_.getAbsoluteTop = function getAbsoluteTop_1(elem){
  var rect, top_0, top_1;
  rect = getBoundingClientRect(elem);
  top_0 = rect?rect.top + ((elem.ownerDocument.body.scrollTop || 0) | 0):getAbsoluteTopUsingOffsets(elem);
  return toInt32(top_0);
}
;
_.getScrollLeft = function getScrollLeft_2(doc){
  return $getScrollLeft(doc.body);
}
;
_.getScrollLeft_0 = function getScrollLeft_3(elem){
  if (!$equalsIgnoreCase('body', impl_1.getTagName(elem)) && $isRTL_0(elem)) {
    return toInt32($getSubPixelScrollLeft(elem)) - (($getSubPixelScrollWidth(elem) | 0) - (elem.clientWidth | 0));
  }
  return toInt32($getSubPixelScrollLeft(elem));
}
;
_.getScrollTop = function getScrollTop_0(doc){
  return $getSubPixelScrollTop(doc.body) | 0;
}
;
_.getTabIndex = function getTabIndex_0(elem){
  return typeof elem.tabIndex != 'undefined'?elem.tabIndex:-1;
}
;
_.setScrollLeft = function setScrollLeft_1(elem, left){
  !$equalsIgnoreCase('body', impl_1.getTagName(elem)) && $isRTL_0(elem) && (left += ($getSubPixelScrollWidth(elem) | 0) - (elem.clientWidth | 0));
  $setScrollLeft_0(elem, left);
}
;
function $getBoundingClientRectLeft_0(elem){
  try {
    return elem.getBoundingClientRect().left;
  }
   catch (e) {
    return 0;
  }
}

function $getBoundingClientRectTop_0(elem){
  try {
    return elem.getBoundingClientRect().top;
  }
   catch (e) {
    return 0;
  }
}

function $getParentOffsetDelta(elem){
  var offsetParent = elem.offsetParent;
  if (offsetParent) {
    return offsetParent.offsetWidth - offsetParent.clientWidth;
  }
  return 0;
}

function DOMImplIE9_0(){
  $clinit_DOMImpl();
}

defineSeed(57, 58, {}, DOMImplIE9_0);
_.getAbsoluteLeft = function getAbsoluteLeft_2(elem){
  var left;
  left = $getBoundingClientRectLeft_0(elem) + $wnd.pageXOffset;
  $isRTL_0(elem) && (left += $getParentOffsetDelta(elem));
  return toInt32(left);
}
;
_.getAbsoluteTop = function getAbsoluteTop_2(elem){
  return toInt32($getBoundingClientRectTop_0(elem) + $wnd.pageYOffset);
}
;
_.getScrollLeft = function getScrollLeft_4(doc){
  return toInt32($wnd.pageXOffset);
}
;
_.getScrollLeft_0 = function getScrollLeft_5(elem){
  var left;
  left = toInt32(elem.scrollLeft || 0);
  $isRTL_0(elem) && (left = -left);
  return left;
}
;
_.getScrollTop = function getScrollTop_1(doc){
  return toInt32($wnd.pageYOffset);
}
;
_.getTabIndex = function getTabIndex_1(elem){
  return elem.tabIndex < 65535?elem.tabIndex:-(elem.tabIndex % 65535) - 1;
}
;
_.isOrHasChild = function isOrHasChild_1(parent_0, child){
  return isOrHasChildImpl(parent_0, child);
}
;
_.setScrollLeft = function setScrollLeft_2(elem, left){
  $isRTL_0(elem) && (left = -left);
  elem.scrollLeft = left;
}
;
function $getAbsoluteLeftImpl(viewport, elem){
  if (Element.prototype.getBoundingClientRect) {
    return elem.getBoundingClientRect().left + viewport.scrollLeft | 0;
  }
   else {
    var doc = elem.ownerDocument;
    return doc.getBoxObjectFor(elem).screenX - doc.getBoxObjectFor(doc.documentElement).screenX;
  }
}

function $getAbsoluteTopImpl(viewport, elem){
  if (Element.prototype.getBoundingClientRect) {
    return elem.getBoundingClientRect().top + viewport.scrollTop | 0;
  }
   else {
    var doc = elem.ownerDocument;
    return doc.getBoxObjectFor(elem).screenY - doc.getBoxObjectFor(doc.documentElement).screenY;
  }
}

function $isGecko19(){
  var geckoVersion = getGeckoVersion();
  return geckoVersion != -1 && geckoVersion >= 1009000;
}

function $isRTL_1(elem){
  var style = elem.ownerDocument.defaultView.getComputedStyle(elem, null);
  return style.direction == 'rtl';
}

function DOMImplMozilla_0(){
  $clinit_DOMImpl();
}

function getGeckoVersion(){
  var result = /rv:([0-9]+)\.([0-9]+)(\.([0-9]+))?.*?/.exec(navigator.userAgent.toLowerCase());
  if (result && result.length >= 3) {
    var version = parseInt(result[1]) * 1000000 + parseInt(result[2]) * 1000 + parseInt(result.length >= 5 && !isNaN(result[4])?result[4]:0);
    return version;
  }
  return -1;
}

defineSeed(60, 59, {}, DOMImplMozilla_0);
_.eventGetRelatedTarget = function eventGetRelatedTarget_1(evt){
  var relatedTarget = evt.relatedTarget;
  if (!relatedTarget) {
    return null;
  }
  try {
    var nodeName = relatedTarget.nodeName;
    return relatedTarget;
  }
   catch (e) {
    return null;
  }
}
;
_.getAbsoluteLeft = function getAbsoluteLeft_3(elem){
  return $getAbsoluteLeftImpl($getViewportElement(elem.ownerDocument), elem);
}
;
_.getAbsoluteTop = function getAbsoluteTop_3(elem){
  return $getAbsoluteTopImpl($getViewportElement(elem.ownerDocument), elem);
}
;
_.getBodyOffsetLeft = function getBodyOffsetLeft_1(doc){
  var style = $wnd.getComputedStyle(doc.documentElement, null);
  if (style == null) {
    return 0;
  }
  return parseInt(style.marginLeft, 10) + parseInt(style.borderLeftWidth, 10);
}
;
_.getBodyOffsetTop = function getBodyOffsetTop_1(doc){
  var style = $wnd.getComputedStyle(doc.documentElement, null);
  if (style == null) {
    return 0;
  }
  return parseInt(style.marginTop, 10) + parseInt(style.borderTopWidth, 10);
}
;
_.getScrollLeft_0 = function getScrollLeft_6(elem){
  if (!$isGecko19() && $isRTL_1(elem)) {
    return toInt32($getSubPixelScrollLeft(elem)) - (($getSubPixelScrollWidth(elem) | 0) - (elem.clientWidth | 0));
  }
  return toInt32($getSubPixelScrollLeft(elem));
}
;
_.isOrHasChild = function isOrHasChild_2(parent_0, child){
  return parent_0 === child || !!(parent_0.compareDocumentPosition(child) & 16);
}
;
_.setScrollLeft = function setScrollLeft_3(elem, left){
  !$isGecko19() && $isRTL_1(elem) && (left += ($getSubPixelScrollWidth(elem) | 0) - (elem.clientWidth | 0));
  $setScrollLeft_0(elem, left);
}
;
_.toString_0 = function toString_5(elem){
  var doc = elem.ownerDocument;
  var temp = elem.cloneNode(true);
  var tempDiv = doc.createElement('DIV');
  tempDiv.appendChild(temp);
  outer = tempDiv.innerHTML;
  temp.innerHTML = '';
  return outer;
}
;
function DOMImplWebkit_0(){
  $clinit_DOMImpl();
}

defineSeed(62, 58, {}, DOMImplWebkit_0);
_.eventGetTarget = function eventGetTarget_1(evt){
  var target = evt.target;
  target && target.nodeType == 3 && (target = target.parentNode);
  return target;
}
;
function $createCanvasElement(this$static){
  return ($clinit_DOMImpl() , impl_1).createElement_0(this$static, 'canvas');
}

function $createDivElement(this$static){
  return ($clinit_DOMImpl() , impl_1).createElement_0(this$static, 'div');
}

function $createPushButtonElement(this$static){
  return ($clinit_DOMImpl() , impl_1).createButtonElement(this$static, 'button');
}

function $createScriptElement(this$static, source){
  return ($clinit_DOMImpl() , impl_1).createScriptElement(this$static, source);
}

function $createScrollEvent(this$static){
  return ($clinit_DOMImpl() , impl_1).createHtmlEvent(this$static, 'scroll', false, false);
}

function $createTBodyElement(this$static){
  return ($clinit_DOMImpl() , impl_1).createElement_0(this$static, 'tbody');
}

function $createTDElement(this$static){
  return ($clinit_DOMImpl() , impl_1).createElement_0(this$static, 'td');
}

function $createTRElement(this$static){
  return ($clinit_DOMImpl() , impl_1).createElement_0(this$static, 'tr');
}

function $createTableElement(this$static){
  return ($clinit_DOMImpl() , impl_1).createElement_0(this$static, 'table');
}

function $getBodyOffsetLeft(this$static){
  return ($clinit_DOMImpl() , impl_1).getBodyOffsetLeft(this$static);
}

function $getBodyOffsetTop(this$static){
  return ($clinit_DOMImpl() , impl_1).getBodyOffsetTop(this$static);
}

function $getClientHeight(this$static){
  return ($equals(this$static.compatMode, 'CSS1Compat')?this$static.documentElement:this$static.body).clientHeight | 0;
}

function $getClientWidth(this$static){
  return ($equals(this$static.compatMode, 'CSS1Compat')?this$static.documentElement:this$static.body).clientWidth | 0;
}

function $getElementById(this$static, elementId){
  return this$static.getElementById(elementId);
}

function $getScrollHeight(this$static){
  return (($equals(this$static.compatMode, 'CSS1Compat')?this$static.documentElement:this$static.body).scrollHeight || 0) | 0;
}

function $getScrollLeft_0(this$static){
  return ($clinit_DOMImpl() , impl_1).getScrollLeft(this$static);
}

function $getScrollTop(this$static){
  return ($clinit_DOMImpl() , impl_1).getScrollTop(this$static);
}

function $getScrollWidth(this$static){
  return (($equals(this$static.compatMode, 'CSS1Compat')?this$static.documentElement:this$static.body).scrollWidth || 0) | 0;
}

function $getViewportElement(this$static){
  return $equals(this$static.compatMode, 'CSS1Compat')?this$static.documentElement:this$static.body;
}

function $getClientX(this$static){
  return toInt32(($clinit_DOMImpl() , this$static).clientX || 0);
}

function $getClientY(this$static){
  return toInt32(($clinit_DOMImpl() , this$static).clientY || 0);
}

function $getTouches(this$static){
  return ($clinit_DOMImpl() , this$static).touches;
}

function $preventDefault(this$static){
  ($clinit_DOMImpl() , impl_1).eventPreventDefault(this$static);
}

function $stopPropagation(this$static){
  ($clinit_DOMImpl() , impl_1).eventStopPropagation(this$static);
}

function $setPropertyImpl(this$static, name_0, value_0){
  this$static[name_0] = value_0;
}

function $compareTo(this$static, other){
  return this$static.ordinal - other.ordinal;
}

function Enum_0(name_0, ordinal){
  this.name_0 = name_0;
  this.ordinal = ordinal;
}

defineSeed(70, 1, makeCastMap([Q$Serializable, Q$Comparable, Q$Enum]));
_.compareTo$ = function compareTo(other){
  return $compareTo(this, dynamicCast(other, Q$Enum));
}
;
_.equals$ = function equals_0(other){
  return this === other;
}
;
_.hashCode$ = function hashCode_1(){
  return getHashCode(this);
}
;
_.toString$ = function toString_6(){
  return this.name_0;
}
;
_.ordinal = 0;
function $clinit_Style$Display(){
  $clinit_Style$Display = nullMethod;
  NONE = new Style$Display$1_0;
  BLOCK = new Style$Display$2_0;
  INLINE = new Style$Display$3_0;
  INLINE_BLOCK = new Style$Display$4_0;
  $VALUES = initValues(_3Lcom_google_gwt_dom_client_Style$Display_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Style$Display, [NONE, BLOCK, INLINE, INLINE_BLOCK]);
}

function Style$Display_0(enum$name, enum$ordinal){
  Enum_0.call(this, enum$name, enum$ordinal);
}

function values_0(){
  $clinit_Style$Display();
  return $VALUES;
}

defineSeed(69, 70, makeCastMap([Q$Style$Display, Q$Style$HasCssName, Q$Serializable, Q$Comparable, Q$Enum]));
var $VALUES, BLOCK, INLINE, INLINE_BLOCK, NONE;
function Style$Display$1_0(){
  Style$Display_0.call(this, 'NONE', 0);
}

defineSeed(71, 69, makeCastMap([Q$Style$Display, Q$Style$HasCssName, Q$Serializable, Q$Comparable, Q$Enum]), Style$Display$1_0);
function Style$Display$2_0(){
  Style$Display_0.call(this, 'BLOCK', 1);
}

defineSeed(72, 69, makeCastMap([Q$Style$Display, Q$Style$HasCssName, Q$Serializable, Q$Comparable, Q$Enum]), Style$Display$2_0);
function Style$Display$3_0(){
  Style$Display_0.call(this, 'INLINE', 2);
}

defineSeed(73, 69, makeCastMap([Q$Style$Display, Q$Style$HasCssName, Q$Serializable, Q$Comparable, Q$Enum]), Style$Display$3_0);
function Style$Display$4_0(){
  Style$Display_0.call(this, 'INLINE_BLOCK', 3);
}

defineSeed(74, 69, makeCastMap([Q$Style$Display, Q$Style$HasCssName, Q$Serializable, Q$Comparable, Q$Enum]), Style$Display$4_0);
function $clinit_Style$Overflow(){
  $clinit_Style$Overflow = nullMethod;
  VISIBLE = new Style$Overflow$1_0;
  HIDDEN = new Style$Overflow$2_0;
  SCROLL = new Style$Overflow$3_0;
  AUTO = new Style$Overflow$4_0;
  $VALUES_0 = initValues(_3Lcom_google_gwt_dom_client_Style$Overflow_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Style$Overflow, [VISIBLE, HIDDEN, SCROLL, AUTO]);
}

function Style$Overflow_0(enum$name, enum$ordinal){
  Enum_0.call(this, enum$name, enum$ordinal);
}

function values_1(){
  $clinit_Style$Overflow();
  return $VALUES_0;
}

defineSeed(75, 70, makeCastMap([Q$Style$HasCssName, Q$Style$Overflow, Q$Serializable, Q$Comparable, Q$Enum]));
var $VALUES_0, AUTO, HIDDEN, SCROLL, VISIBLE;
function Style$Overflow$1_0(){
  Style$Overflow_0.call(this, 'VISIBLE', 0);
}

defineSeed(76, 75, makeCastMap([Q$Style$HasCssName, Q$Style$Overflow, Q$Serializable, Q$Comparable, Q$Enum]), Style$Overflow$1_0);
function Style$Overflow$2_0(){
  Style$Overflow_0.call(this, 'HIDDEN', 1);
}

defineSeed(77, 75, makeCastMap([Q$Style$HasCssName, Q$Style$Overflow, Q$Serializable, Q$Comparable, Q$Enum]), Style$Overflow$2_0);
function Style$Overflow$3_0(){
  Style$Overflow_0.call(this, 'SCROLL', 2);
}

defineSeed(78, 75, makeCastMap([Q$Style$HasCssName, Q$Style$Overflow, Q$Serializable, Q$Comparable, Q$Enum]), Style$Overflow$3_0);
function Style$Overflow$4_0(){
  Style$Overflow_0.call(this, 'AUTO', 3);
}

defineSeed(79, 75, makeCastMap([Q$Style$HasCssName, Q$Style$Overflow, Q$Serializable, Q$Comparable, Q$Enum]), Style$Overflow$4_0);
function $clinit_Style$Position(){
  $clinit_Style$Position = nullMethod;
  STATIC = new Style$Position$1_0;
  RELATIVE = new Style$Position$2_0;
  ABSOLUTE = new Style$Position$3_0;
  FIXED = new Style$Position$4_0;
  $VALUES_1 = initValues(_3Lcom_google_gwt_dom_client_Style$Position_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Style$Position, [STATIC, RELATIVE, ABSOLUTE, FIXED]);
}

function Style$Position_0(enum$name, enum$ordinal){
  Enum_0.call(this, enum$name, enum$ordinal);
}

function values_2(){
  $clinit_Style$Position();
  return $VALUES_1;
}

defineSeed(80, 70, makeCastMap([Q$Style$HasCssName, Q$Style$Position, Q$Serializable, Q$Comparable, Q$Enum]));
var $VALUES_1, ABSOLUTE, FIXED, RELATIVE, STATIC;
function Style$Position$1_0(){
  Style$Position_0.call(this, 'STATIC', 0);
}

defineSeed(81, 80, makeCastMap([Q$Style$HasCssName, Q$Style$Position, Q$Serializable, Q$Comparable, Q$Enum]), Style$Position$1_0);
function Style$Position$2_0(){
  Style$Position_0.call(this, 'RELATIVE', 1);
}

defineSeed(82, 80, makeCastMap([Q$Style$HasCssName, Q$Style$Position, Q$Serializable, Q$Comparable, Q$Enum]), Style$Position$2_0);
function Style$Position$3_0(){
  Style$Position_0.call(this, 'ABSOLUTE', 2);
}

defineSeed(83, 80, makeCastMap([Q$Style$HasCssName, Q$Style$Position, Q$Serializable, Q$Comparable, Q$Enum]), Style$Position$3_0);
function Style$Position$4_0(){
  Style$Position_0.call(this, 'FIXED', 3);
}

defineSeed(84, 80, makeCastMap([Q$Style$HasCssName, Q$Style$Position, Q$Serializable, Q$Comparable, Q$Enum]), Style$Position$4_0);
function $clinit_Style$TextAlign(){
  $clinit_Style$TextAlign = nullMethod;
  CENTER = new Style$TextAlign$1_0;
  JUSTIFY = new Style$TextAlign$2_0;
  LEFT = new Style$TextAlign$3_0;
  RIGHT = new Style$TextAlign$4_0;
  $VALUES_2 = initValues(_3Lcom_google_gwt_dom_client_Style$TextAlign_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Style$TextAlign, [CENTER, JUSTIFY, LEFT, RIGHT]);
}

function Style$TextAlign_0(enum$name, enum$ordinal){
  Enum_0.call(this, enum$name, enum$ordinal);
}

function values_3(){
  $clinit_Style$TextAlign();
  return $VALUES_2;
}

defineSeed(85, 70, makeCastMap([Q$Style$HasCssName, Q$Style$TextAlign, Q$Serializable, Q$Comparable, Q$Enum]));
var $VALUES_2, CENTER, JUSTIFY, LEFT, RIGHT;
function Style$TextAlign$1_0(){
  Style$TextAlign_0.call(this, 'CENTER', 0);
}

defineSeed(86, 85, makeCastMap([Q$Style$HasCssName, Q$Style$TextAlign, Q$Serializable, Q$Comparable, Q$Enum]), Style$TextAlign$1_0);
function Style$TextAlign$2_0(){
  Style$TextAlign_0.call(this, 'JUSTIFY', 1);
}

defineSeed(87, 85, makeCastMap([Q$Style$HasCssName, Q$Style$TextAlign, Q$Serializable, Q$Comparable, Q$Enum]), Style$TextAlign$2_0);
function Style$TextAlign$3_0(){
  Style$TextAlign_0.call(this, 'LEFT', 2);
}

defineSeed(88, 85, makeCastMap([Q$Style$HasCssName, Q$Style$TextAlign, Q$Serializable, Q$Comparable, Q$Enum]), Style$TextAlign$3_0);
function Style$TextAlign$4_0(){
  Style$TextAlign_0.call(this, 'RIGHT', 3);
}

defineSeed(89, 85, makeCastMap([Q$Style$HasCssName, Q$Style$TextAlign, Q$Serializable, Q$Comparable, Q$Enum]), Style$TextAlign$4_0);
function $clinit_Style$Unit(){
  $clinit_Style$Unit = nullMethod;
  PX = new Style$Unit$1_0;
  PCT = new Style$Unit$2_0;
  EM = new Style$Unit$3_0;
  EX = new Style$Unit$4_0;
  PT = new Style$Unit$5_0;
  PC = new Style$Unit$6_0;
  IN = new Style$Unit$7_0;
  CM = new Style$Unit$8_0;
  MM = new Style$Unit$9_0;
  $VALUES_3 = initValues(_3Lcom_google_gwt_dom_client_Style$Unit_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Style$Unit, [PX, PCT, EM, EX, PT, PC, IN, CM, MM]);
}

function Style$Unit_0(enum$name, enum$ordinal){
  Enum_0.call(this, enum$name, enum$ordinal);
}

function values_4(){
  $clinit_Style$Unit();
  return $VALUES_3;
}

defineSeed(90, 70, makeCastMap([Q$Style$Unit, Q$Serializable, Q$Comparable, Q$Enum]));
var $VALUES_3, CM, EM, EX, IN, MM, PC, PCT, PT, PX;
function Style$Unit$1_0(){
  Style$Unit_0.call(this, 'PX', 0);
}

defineSeed(91, 90, makeCastMap([Q$Style$Unit, Q$Serializable, Q$Comparable, Q$Enum]), Style$Unit$1_0);
function Style$Unit$2_0(){
  Style$Unit_0.call(this, 'PCT', 1);
}

defineSeed(92, 90, makeCastMap([Q$Style$Unit, Q$Serializable, Q$Comparable, Q$Enum]), Style$Unit$2_0);
function Style$Unit$3_0(){
  Style$Unit_0.call(this, 'EM', 2);
}

defineSeed(93, 90, makeCastMap([Q$Style$Unit, Q$Serializable, Q$Comparable, Q$Enum]), Style$Unit$3_0);
function Style$Unit$4_0(){
  Style$Unit_0.call(this, 'EX', 3);
}

defineSeed(94, 90, makeCastMap([Q$Style$Unit, Q$Serializable, Q$Comparable, Q$Enum]), Style$Unit$4_0);
function Style$Unit$5_0(){
  Style$Unit_0.call(this, 'PT', 4);
}

defineSeed(95, 90, makeCastMap([Q$Style$Unit, Q$Serializable, Q$Comparable, Q$Enum]), Style$Unit$5_0);
function Style$Unit$6_0(){
  Style$Unit_0.call(this, 'PC', 5);
}

defineSeed(96, 90, makeCastMap([Q$Style$Unit, Q$Serializable, Q$Comparable, Q$Enum]), Style$Unit$6_0);
function Style$Unit$7_0(){
  Style$Unit_0.call(this, 'IN', 6);
}

defineSeed(97, 90, makeCastMap([Q$Style$Unit, Q$Serializable, Q$Comparable, Q$Enum]), Style$Unit$7_0);
function Style$Unit$8_0(){
  Style$Unit_0.call(this, 'CM', 7);
}

defineSeed(98, 90, makeCastMap([Q$Style$Unit, Q$Serializable, Q$Comparable, Q$Enum]), Style$Unit$8_0);
function Style$Unit$9_0(){
  Style$Unit_0.call(this, 'MM', 8);
}

defineSeed(99, 90, makeCastMap([Q$Style$Unit, Q$Serializable, Q$Comparable, Q$Enum]), Style$Unit$9_0);
function $getRelativeX(this$static, target){
  return toInt32(($clinit_DOMImpl() , this$static).clientX || 0) - impl_1.getAbsoluteLeft(target) + impl_1.getScrollLeft_0(target) + $getScrollLeft_0(target.ownerDocument);
}

function $getRelativeY(this$static, target){
  return toInt32(($clinit_DOMImpl() , this$static).clientY || 0) - impl_1.getAbsoluteTop(target) + ($getSubPixelScrollTop(target) | 0) + $getScrollTop(target.ownerDocument);
}

defineSeed(106, 1, {});
_.toString$ = function toString_7(){
  return 'An event type';
}
;
function $overrideSource(this$static, source){
  this$static.source = source;
}

defineSeed(105, 106, {});
_.revive = function revive(){
  this.dead = false;
  this.source = null;
}
;
_.dead = false;
function $setNativeEvent(this$static, nativeEvent){
  this$static.nativeEvent = nativeEvent;
}

function $setRelativeElement(this$static, relativeElem){
  this$static.relativeElem = relativeElem;
}

function fireNativeEvent(nativeEvent, handlerSource, relativeElem){
  var currentNative, currentRelativeElem, type_0, type$iterator, types;
  if (registered) {
    types = dynamicCast($unsafeGet(registered, ($clinit_DOMImpl() , nativeEvent).type), Q$List);
    if (types) {
      for (type$iterator = types.iterator(); type$iterator.hasNext();) {
        type_0 = dynamicCast(type$iterator.next_0(), Q$DomEvent$Type);
        currentNative = type_0.flyweight.nativeEvent;
        currentRelativeElem = type_0.flyweight.relativeElem;
        $setNativeEvent(type_0.flyweight, nativeEvent);
        $setRelativeElement(type_0.flyweight, relativeElem);
        $fireEvent(handlerSource, type_0.flyweight);
        $setNativeEvent(type_0.flyweight, currentNative);
        $setRelativeElement(type_0.flyweight, currentRelativeElem);
      }
    }
  }
}

defineSeed(104, 105, {});
_.getAssociatedType = function getAssociatedType(){
  return this.getAssociatedType_0();
}
;
var registered;
defineSeed(103, 104, {});
defineSeed(102, 103, {});
function $clinit_ClickEvent(){
  $clinit_ClickEvent = nullMethod;
  TYPE = new DomEvent$Type_0('click', new ClickEvent_0);
}

function ClickEvent_0(){
}

defineSeed(101, 102, {}, ClickEvent_0);
_.dispatch = function dispatch(handler){
  $onClick(dynamicCast(handler, Q$ClickHandler));
}
;
_.getAssociatedType_0 = function getAssociatedType_0(){
  return TYPE;
}
;
var TYPE;
defineSeed(109, 1, {});
_.hashCode$ = function hashCode_2(){
  return this.index_0;
}
;
_.toString$ = function toString_8(){
  return 'Event type';
}
;
_.index_0 = 0;
var nextHashCode = 0;
function GwtEvent$Type_0(){
  this.index_0 = ++nextHashCode;
}

defineSeed(108, 109, {}, GwtEvent$Type_0);
function DomEvent$Type_0(eventName, flyweight){
  var types;
  GwtEvent$Type_0.call(this);
  this.flyweight = flyweight;
  !registered && (registered = new PrivateMap_0);
  types = dynamicCast($unsafeGet(registered, eventName), Q$List);
  if (!types) {
    types = new ArrayList_0;
    $unsafePut(registered, eventName, types);
  }
  types.add_0(this);
  this.name_0 = eventName;
}

defineSeed(107, 108, makeCastMap([Q$DomEvent$Type]), DomEvent$Type_0);
function $clinit_MouseDownEvent(){
  $clinit_MouseDownEvent = nullMethod;
  TYPE_0 = new DomEvent$Type_0('mousedown', new MouseDownEvent_0);
}

function MouseDownEvent_0(){
}

defineSeed(110, 102, {}, MouseDownEvent_0);
_.dispatch = function dispatch_0(handler){
  dynamicCast(handler, Q$MouseDownHandler).onMouseDown(this);
}
;
_.getAssociatedType_0 = function getAssociatedType_1(){
  return TYPE_0;
}
;
var TYPE_0;
function $clinit_MouseMoveEvent(){
  $clinit_MouseMoveEvent = nullMethod;
  TYPE_1 = new DomEvent$Type_0('mousemove', new MouseMoveEvent_0);
}

function MouseMoveEvent_0(){
}

defineSeed(111, 102, {}, MouseMoveEvent_0);
_.dispatch = function dispatch_1(handler){
  dynamicCast(handler, Q$MouseMoveHandler).onMouseMove(this);
}
;
_.getAssociatedType_0 = function getAssociatedType_2(){
  return TYPE_1;
}
;
var TYPE_1;
function $clinit_MouseUpEvent(){
  $clinit_MouseUpEvent = nullMethod;
  TYPE_2 = new DomEvent$Type_0('mouseup', new MouseUpEvent_0);
}

function MouseUpEvent_0(){
}

defineSeed(112, 102, {}, MouseUpEvent_0);
_.dispatch = function dispatch_2(handler){
  dynamicCast(handler, Q$MouseUpHandler).onMouseUp(this);
}
;
_.getAssociatedType_0 = function getAssociatedType_3(){
  return TYPE_2;
}
;
var TYPE_2;
function $unsafeGet(this$static, key){
  return this$static.map_0[key];
}

function $unsafePut(this$static, key, value_0){
  this$static.map_0[key] = value_0;
}

function PrivateMap_0(){
  this.map_0 = {};
}

defineSeed(113, 1, {}, PrivateMap_0);
defineSeed(116, 103, {});
var impl_2;
function $clinit_TouchCancelEvent(){
  $clinit_TouchCancelEvent = nullMethod;
  TYPE_3 = new DomEvent$Type_0('touchcancel', new TouchCancelEvent_0);
}

function TouchCancelEvent_0(){
}

defineSeed(115, 116, {}, TouchCancelEvent_0);
_.dispatch = function dispatch_3(handler){
  $onTouchEnd(dynamicCast(dynamicCast(handler, Q$TouchCancelHandler), Q$TouchScroller$5).this$0);
}
;
_.getAssociatedType_0 = function getAssociatedType_4(){
  return TYPE_3;
}
;
var TYPE_3;
function $clinit_TouchEndEvent(){
  $clinit_TouchEndEvent = nullMethod;
  TYPE_4 = new DomEvent$Type_0('touchend', new TouchEndEvent_0);
}

function TouchEndEvent_0(){
}

defineSeed(117, 116, {}, TouchEndEvent_0);
_.dispatch = function dispatch_4(handler){
  $onTouchEnd(dynamicCast(dynamicCast(handler, Q$TouchEndHandler), Q$TouchScroller$4).this$0);
}
;
_.getAssociatedType_0 = function getAssociatedType_5(){
  return TYPE_4;
}
;
var TYPE_4;
function TouchEvent$TouchSupportDetector_0(){
  var elem;
  this.isSupported = (elem = document.createElement('div') , elem.setAttribute('ontouchstart', 'return;') , typeof elem.ontouchstart == 'function');
}

defineSeed(118, 1, {}, TouchEvent$TouchSupportDetector_0);
_.isSupported = false;
function $clinit_TouchMoveEvent(){
  $clinit_TouchMoveEvent = nullMethod;
  TYPE_5 = new DomEvent$Type_0('touchmove', new TouchMoveEvent_0);
}

function $dispatch(this$static, handler){
  $onTouchMove(handler.this$0, this$static);
}

function TouchMoveEvent_0(){
}

defineSeed(119, 116, {}, TouchMoveEvent_0);
_.dispatch = function dispatch_5(handler){
  $dispatch(this, dynamicCast(handler, Q$TouchMoveHandler));
}
;
_.getAssociatedType_0 = function getAssociatedType_6(){
  return TYPE_5;
}
;
var TYPE_5;
function $clinit_TouchStartEvent(){
  $clinit_TouchStartEvent = nullMethod;
  TYPE_6 = new DomEvent$Type_0('touchstart', new TouchStartEvent_0);
}

function $dispatch_0(this$static, handler){
  $onTouchStart(handler.this$0, this$static);
}

function TouchStartEvent_0(){
}

defineSeed(120, 116, {}, TouchStartEvent_0);
_.dispatch = function dispatch_6(handler){
  $dispatch_0(this, dynamicCast(handler, Q$TouchStartHandler));
}
;
_.getAssociatedType_0 = function getAssociatedType_7(){
  return TYPE_6;
}
;
var TYPE_6;
function $dispatch_1(this$static, handler){
  this$static.attached?$setupBustClickHandler(handler.this$0):$removeBustClickHandler(handler.this$0);
}

function AttachEvent_0(attached){
  this.attached = attached;
}

function fire_0(source, attached){
  var event_0;
  if (TYPE_7) {
    event_0 = new AttachEvent_0(attached);
    !!source.handlerManager && $fireEvent_0(source.handlerManager, event_0);
  }
}

defineSeed(121, 105, {}, AttachEvent_0);
_.dispatch = function dispatch_7(handler){
  $dispatch_1(this, dynamicCast(handler, Q$AttachEvent$Handler));
}
;
_.getAssociatedType = function getAssociatedType_8(){
  return TYPE_7;
}
;
_.attached = false;
var TYPE_7;
function CloseEvent_1(){
}

function fire_1(source){
  var event_0;
  if (TYPE_8) {
    event_0 = new CloseEvent_1;
    source.fireEvent_0(event_0);
  }
}

defineSeed(122, 105, {}, CloseEvent_1);
_.dispatch = function dispatch_8(handler){
  dynamicCast(handler, Q$CloseHandler);
  detachWidgets();
}
;
_.getAssociatedType = function getAssociatedType_9(){
  return TYPE_8;
}
;
var TYPE_8;
function ResizeEvent_0(){
}

function fire_2(source){
  var event_0;
  if (TYPE_9) {
    event_0 = new ResizeEvent_0;
    $fireEvent_0(source, event_0);
  }
}

defineSeed(123, 105, {}, ResizeEvent_0);
_.dispatch = function dispatch_9(handler){
  dynamicCast(handler, Q$ResizeHandler).onResize(this);
}
;
_.getAssociatedType = function getAssociatedType_10(){
  return TYPE_9;
}
;
var TYPE_9;
function $dispatch_2(handler){
  handler.this$0.autoHideOnHistoryEvents && $hide(handler.this$0);
}

function ValueChangeEvent_0(){
}

function fire_3(source){
  var event_0;
  if (TYPE_10) {
    event_0 = new ValueChangeEvent_0;
    $fireEvent_0(source.handlers, event_0);
  }
}

defineSeed(124, 105, {}, ValueChangeEvent_0);
_.dispatch = function dispatch_10(handler){
  $dispatch_2(dynamicCast(handler, Q$ValueChangeHandler));
}
;
_.getAssociatedType = function getAssociatedType_11(){
  return TYPE_10;
}
;
var TYPE_10;
function $addHandler_0(this$static, type_0, handler){
  return new LegacyHandlerWrapper_0($doAdd(this$static.eventBus, type_0, handler));
}

function $fireEvent_0(this$static, event_0){
  var e, oldSource;
  !event_0.dead || event_0.revive();
  oldSource = event_0.source;
  $overrideSource(event_0, this$static.source);
  try {
    $doFire(this$static.eventBus, event_0);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, Q$UmbrellaException)) {
      e = $e0;
      throw new UmbrellaException_2(e.causes);
    }
     else 
      throw unwrap($e0);
  }
   finally {
    oldSource == null?(event_0.dead = true , event_0.source = null):(event_0.source = oldSource);
  }
}

function $isEventHandled(this$static, e){
  return $isEventHandled_0(this$static.eventBus, e);
}

function HandlerManager_0(source){
  HandlerManager_1.call(this, source, false);
}

function HandlerManager_1(source, fireInReverseOrder){
  this.eventBus = new HandlerManager$Bus_0(fireInReverseOrder);
  this.source = source;
}

defineSeed(125, 1, makeCastMap([Q$HasHandlers]), HandlerManager_0, HandlerManager_1);
_.fireEvent_0 = function fireEvent_0(event_0){
  $fireEvent_0(this, event_0);
}
;
defineSeed(128, 1, {});
function $defer(this$static, command){
  !this$static.deferredDeltas && (this$static.deferredDeltas = new ArrayList_0);
  $add_5(this$static.deferredDeltas, command);
}

function $doAdd(this$static, type_0, handler){
  if (!type_0) {
    throw new NullPointerException_1('Cannot add a handler with a null type');
  }
  if (!handler) {
    throw new NullPointerException_1('Cannot add a null handler');
  }
  this$static.firingDepth > 0?$defer(this$static, new SimpleEventBus$2_0(this$static, type_0, handler)):$doAddNow(this$static, type_0, null, handler);
  return new SimpleEventBus$1_0(this$static, type_0, handler);
}

function $doAddNow(this$static, type_0, source, handler){
  var l_0;
  l_0 = $ensureHandlerList(this$static, type_0, source);
  l_0.add_0(handler);
}

function $doFire(this$static, event_0){
  var causes, e, handler, handlers, it;
  if (!event_0) {
    throw new NullPointerException_1('Cannot fire null event');
  }
  try {
    ++this$static.firingDepth;
    handlers = $getDispatchList(this$static, event_0.getAssociatedType());
    causes = null;
    it = this$static.isReverseOrder?handlers.listIterator_0(handlers.size_1()):handlers.listIterator();
    while (this$static.isReverseOrder?it.hasPrevious():it.hasNext()) {
      handler = this$static.isReverseOrder?it.previous():it.next_0();
      try {
        event_0.dispatch(dynamicCast(handler, Q$EventHandler));
      }
       catch ($e0) {
        $e0 = wrap($e0);
        if (instanceOf($e0, Q$Throwable)) {
          e = $e0;
          !causes && (causes = new HashSet_0);
          $add_6(causes, e);
        }
         else 
          throw unwrap($e0);
      }
    }
    if (causes) {
      throw new UmbrellaException_1(causes);
    }
  }
   finally {
    --this$static.firingDepth;
    this$static.firingDepth == 0 && $handleQueuedAddsAndRemoves(this$static);
  }
}

function $doRemoveNow(this$static, type_0, source, handler){
  var l_0, removed, sourceMap;
  l_0 = $getHandlerList(this$static, type_0, source);
  removed = l_0.remove(handler);
  removed && l_0.isEmpty() && (sourceMap = dynamicCast($get_1(this$static.map_0, type_0), Q$Map) , dynamicCast(sourceMap.remove_2(source), Q$List) , sourceMap.isEmpty() && $remove_4(this$static.map_0, type_0) , undefined);
}

function $ensureHandlerList(this$static, type_0, source){
  var handlers, sourceMap;
  sourceMap = dynamicCast($get_1(this$static.map_0, type_0), Q$Map);
  if (!sourceMap) {
    sourceMap = new HashMap_0;
    $put(this$static.map_0, type_0, sourceMap);
  }
  handlers = dynamicCast(sourceMap.get_0(source), Q$List);
  if (!handlers) {
    handlers = new ArrayList_0;
    sourceMap.put(source, handlers);
  }
  return handlers;
}

function $getDispatchList(this$static, type_0){
  var directHandlers;
  directHandlers = $getHandlerList(this$static, type_0, null);
  return directHandlers;
}

function $getHandlerList(this$static, type_0, source){
  var handlers, sourceMap;
  sourceMap = dynamicCast($get_1(this$static.map_0, type_0), Q$Map);
  if (!sourceMap) {
    return $clinit_Collections() , $clinit_Collections() , EMPTY_LIST;
  }
  handlers = dynamicCast(sourceMap.get_0(source), Q$List);
  if (!handlers) {
    return $clinit_Collections() , $clinit_Collections() , EMPTY_LIST;
  }
  return handlers;
}

function $handleQueuedAddsAndRemoves(this$static){
  var c, c$iterator;
  if (this$static.deferredDeltas) {
    try {
      for (c$iterator = new AbstractList$IteratorImpl_0(this$static.deferredDeltas); c$iterator.i < c$iterator.this$0_0.size_1();) {
        c = dynamicCast($next_2(c$iterator), Q$SimpleEventBus$Command);
        c.execute_1();
      }
    }
     finally {
      this$static.deferredDeltas = null;
    }
  }
}

function $isEventHandled_0(this$static, eventKey){
  return $containsKey_0(this$static.map_0, eventKey);
}

defineSeed(127, 128, {});
_.firingDepth = 0;
_.isReverseOrder = false;
function $doRemove(this$static, type_0, source, handler){
  this$static.firingDepth > 0?$defer(this$static, new SimpleEventBus$3_0(this$static, type_0, source, handler)):$doRemoveNow(this$static, type_0, source, handler);
}

function HandlerManager$Bus_0(fireInReverseOrder){
  this.map_0 = new HashMap_0;
  this.isReverseOrder = fireInReverseOrder;
}

defineSeed(126, 127, {}, HandlerManager$Bus_0);
function LegacyHandlerWrapper_0(real){
  this.real = real;
}

defineSeed(129, 1, makeCastMap([Q$HandlerRegistration]), LegacyHandlerWrapper_0);
function UmbrellaException_1(causes){
  RuntimeException_2.call(this, makeMessage(causes), makeCause(causes));
  this.causes = causes;
}

function makeCause(causes){
  var iterator;
  iterator = causes.iterator();
  if (!iterator.hasNext()) {
    return null;
  }
  return dynamicCast(iterator.next_0(), Q$Throwable);
}

function makeMessage(causes){
  var b, count, first, t, t$iterator;
  count = causes.size_1();
  if (count == 0) {
    return null;
  }
  b = new StringBuilder_1(count == 1?'Exception caught: ':count + ' exceptions caught: ');
  first = true;
  for (t$iterator = causes.iterator(); t$iterator.hasNext();) {
    t = dynamicCast(t$iterator.next_0(), Q$Throwable);
    first?(first = false):($append_0(b.impl, '; ') , b);
    $append_3(b, t.getMessage());
  }
  return b.impl.string;
}

defineSeed(131, 26, makeCastMap([Q$UmbrellaException, Q$Serializable, Q$Throwable]), UmbrellaException_1);
function UmbrellaException_2(causes){
  UmbrellaException_1.call(this, causes);
}

defineSeed(130, 131, makeCastMap([Q$UmbrellaException, Q$Serializable, Q$Throwable]), UmbrellaException_2);
function throwIfNull(value_0){
  if (null == value_0) {
    throw new NullPointerException_1('encodedURLComponent cannot be null');
  }
}

function getDirectionOnElement(elem){
  var dirPropertyValue;
  dirPropertyValue = elem['dir'] == null?null:String(elem['dir']);
  if ($equalsIgnoreCase('rtl', dirPropertyValue)) {
    return $clinit_HasDirection$Direction() , RTL;
  }
   else if ($equalsIgnoreCase('ltr', dirPropertyValue)) {
    return $clinit_HasDirection$Direction() , LTR;
  }
  return $clinit_HasDirection$Direction() , DEFAULT;
}

function setDirectionOnElement(elem, direction){
  switch (direction.ordinal) {
    case 0:
      {
        $setPropertyString(elem, 'dir', 'rtl');
        break;
      }

    case 1:
      {
        $setPropertyString(elem, 'dir', 'ltr');
        break;
      }

    case 2:
      {
        getDirectionOnElement(elem) != ($clinit_HasDirection$Direction() , DEFAULT) && $setPropertyString(elem, 'dir', '');
        break;
      }

  }
}

function $clinit_HasDirection$Direction(){
  $clinit_HasDirection$Direction = nullMethod;
  RTL = new HasDirection$Direction_0('RTL', 0);
  LTR = new HasDirection$Direction_0('LTR', 1);
  DEFAULT = new HasDirection$Direction_0('DEFAULT', 2);
  $VALUES_4 = initValues(_3Lcom_google_gwt_i18n_client_HasDirection$Direction_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$HasDirection$Direction, [RTL, LTR, DEFAULT]);
}

function HasDirection$Direction_0(enum$name, enum$ordinal){
  Enum_0.call(this, enum$name, enum$ordinal);
}

function values_5(){
  $clinit_HasDirection$Direction();
  return $VALUES_4;
}

defineSeed(135, 70, makeCastMap([Q$HasDirection$Direction, Q$Serializable, Q$Comparable, Q$Enum]), HasDirection$Direction_0);
var $VALUES_4, DEFAULT, LTR, RTL;
defineSeed(137, 1, {});
_.isArray = function isArray(){
  return null;
}
;
_.isBoolean = function isBoolean(){
  return null;
}
;
_.isNull = function isNull(){
  return null;
}
;
_.isNumber = function isNumber(){
  return null;
}
;
_.isObject = function isObject(){
  return null;
}
;
_.isString = function isString(){
  return null;
}
;
function $get(this$static, index_0){
  var v = this$static.jsArray[index_0];
  var func = ($clinit_JSONParser() , typeMap)[typeof v];
  return func?func(v):throwUnknownTypeException(typeof v);
}

function JSONArray_0(arr){
  this.jsArray = arr;
}

defineSeed(136, 137, makeCastMap([Q$JSONArray]), JSONArray_0);
_.equals$ = function equals_1(other){
  if (!instanceOf(other, Q$JSONArray)) {
    return false;
  }
  return this.jsArray == dynamicCast(other, Q$JSONArray).jsArray;
}
;
_.hashCode$ = function hashCode_3(){
  return getHashCode(this.jsArray);
}
;
_.isArray = function isArray_0(){
  return this;
}
;
_.toString$ = function toString_9(){
  var c, i_0, sb;
  sb = new StringBuffer_0;
  $append_0(sb.impl, '[');
  for (i_0 = 0 , c = this.jsArray.length; i_0 < c; i_0++) {
    i_0 > 0 && ($append_0(sb.impl, ',') , sb);
    $append_1(sb, $get(this, i_0));
  }
  $append_0(sb.impl, ']');
  return sb.impl.string;
}
;
function $clinit_JSONBoolean(){
  $clinit_JSONBoolean = nullMethod;
  FALSE = new JSONBoolean_0(false);
  TRUE = new JSONBoolean_0(true);
}

function JSONBoolean_0(value_0){
  this.value_0 = value_0;
}

defineSeed(138, 137, {}, JSONBoolean_0);
_.isBoolean = function isBoolean_0(){
  return this;
}
;
_.toString$ = function toString_10(){
  return $clinit_Boolean() , '' + this.value_0;
}
;
_.value_0 = false;
var FALSE, TRUE;
function JSONException_0(message){
  RuntimeException_1.call(this, message);
}

function JSONException_1(cause){
  this.detailMessage = !cause?null:$toString(cause);
  this.cause = cause;
  this.fillInStackTrace();
}

defineSeed(139, 26, makeCastMap([Q$Serializable, Q$Throwable]), JSONException_0, JSONException_1);
function $clinit_JSONNull(){
  $clinit_JSONNull = nullMethod;
  instance = new JSONNull_0;
}

function JSONNull_0(){
}

defineSeed(140, 137, {}, JSONNull_0);
_.isNull = function isNull_0(){
  if (this != instance) {
    return null;
  }
  return this;
}
;
_.toString$ = function toString_11(){
  return 'null';
}
;
var instance;
function JSONNumber_0(value_0){
  this.value_0 = value_0;
}

defineSeed(141, 137, makeCastMap([Q$JSONNumber]), JSONNumber_0);
_.equals$ = function equals_2(other){
  if (!instanceOf(other, Q$JSONNumber)) {
    return false;
  }
  return this.value_0 == dynamicCast(other, Q$JSONNumber).value_0;
}
;
_.hashCode$ = function hashCode_4(){
  return round_int(($clinit_Double() , new Double_0(this.value_0)).value_0);
}
;
_.isNumber = function isNumber_0(){
  return this;
}
;
_.toString$ = function toString_12(){
  return this.value_0 + '';
}
;
_.value_0 = 0;
function $computeKeys0(this$static, result){
  var jsObject = this$static.jsObject;
  var i_0 = 0;
  for (var key in jsObject) {
    jsObject.hasOwnProperty(key) && (result[i_0++] = key);
  }
  return result;
}

function $containsKey(this$static, key){
  return key in this$static.jsObject;
}

function $get_0(this$static, key){
  if (key == null) {
    throw new NullPointerException_0;
  }
  return $get0(this$static, key);
}

function $get0(this$static, key){
  var jsObject = this$static.jsObject;
  var v;
  key = String(key);
  jsObject.hasOwnProperty(key) && (v = jsObject[key]);
  var func = ($clinit_JSONParser() , typeMap)[typeof v];
  var ret = func?func(v):throwUnknownTypeException(typeof v);
  return ret;
}

function JSONObject_0(jsValue){
  this.jsObject = jsValue;
}

defineSeed(142, 137, makeCastMap([Q$JSONObject]), JSONObject_0);
_.equals$ = function equals_3(other){
  if (!instanceOf(other, Q$JSONObject)) {
    return false;
  }
  return this.jsObject == dynamicCast(other, Q$JSONObject).jsObject;
}
;
_.hashCode$ = function hashCode_5(){
  return getHashCode(this.jsObject);
}
;
_.isObject = function isObject_0(){
  return this;
}
;
_.toString$ = function toString_13(){
  var first, key, key$index, key$max, keys_0, sb;
  sb = new StringBuffer_0;
  $append_0(sb.impl, '{');
  first = true;
  keys_0 = $computeKeys0(this, initDim(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$String, 0, 0));
  for (key$index = 0 , key$max = keys_0.length; key$index < key$max; ++key$index) {
    key = keys_0[key$index];
    first?(first = false):($append_0(sb.impl, ', ') , sb);
    $append_2(sb, escapeValue(key));
    $append_0(sb.impl, ':');
    $append_1(sb, $get_0(this, key));
  }
  $append_0(sb.impl, '}');
  return sb.impl.string;
}
;
function $advanceToFind(iter, o){
  var t;
  while (iter.hasNext()) {
    t = iter.next_0();
    if (o == null?t == null:equals__devirtual$(o, t)) {
      return iter;
    }
  }
  return null;
}

function $toString_0(this$static){
  var comma, iter, sb, value_0;
  sb = new StringBuffer_0;
  comma = null;
  $append_0(sb.impl, '[');
  iter = this$static.iterator();
  while (iter.hasNext()) {
    comma != null?($append_0(sb.impl, comma) , sb):(comma = ', ');
    value_0 = iter.next_0();
    $append_0(sb.impl, value_0 === this$static?'(this Collection)':'' + value_0);
  }
  $append_0(sb.impl, ']');
  return sb.impl.string;
}

defineSeed(145, 1, {});
_.add_0 = function add_0(o){
  throw new UnsupportedOperationException_1('Add not supported on this collection');
}
;
_.contains_0 = function contains(o){
  var iter;
  iter = $advanceToFind(this.iterator(), o);
  return !!iter;
}
;
_.isEmpty = function isEmpty(){
  return this.size_1() == 0;
}
;
_.remove = function remove_0(o){
  var iter;
  iter = $advanceToFind(this.iterator(), o);
  if (iter) {
    iter.remove_1();
    return true;
  }
   else {
    return false;
  }
}
;
_.toArray = function toArray(){
  return this.toArray_0(initDim(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, this.size_1(), 0));
}
;
_.toArray_0 = function toArray_0(a){
  var i_0, it, size_0;
  size_0 = this.size_1();
  a.length < size_0 && (a = createFrom(a, size_0));
  it = this.iterator();
  for (i_0 = 0; i_0 < size_0; ++i_0) {
    setCheck(a, i_0, it.next_0());
  }
  a.length > size_0 && setCheck(a, size_0, null);
  return a;
}
;
_.toString$ = function toString_14(){
  return $toString_0(this);
}
;
defineSeed(144, 145, makeCastMap([Q$Set]));
_.equals$ = function equals_4(o){
  var iter, other, otherItem;
  if (o === this) {
    return true;
  }
  if (!instanceOf(o, Q$Set)) {
    return false;
  }
  other = dynamicCast(o, Q$Set);
  if (other.size_1() != this.size_1()) {
    return false;
  }
  for (iter = other.iterator(); iter.hasNext();) {
    otherItem = iter.next_0();
    if (!this.contains_0(otherItem)) {
      return false;
    }
  }
  return true;
}
;
_.hashCode$ = function hashCode_6(){
  var hashCode, iter, next;
  hashCode = 0;
  for (iter = this.iterator(); iter.hasNext();) {
    next = iter.next_0();
    if (next != null) {
      hashCode += hashCode__devirtual$(next);
      hashCode = ~~hashCode;
    }
  }
  return hashCode;
}
;
function JSONObject$1_0(this$0, val$keys){
  this.this$0 = this$0;
  this.val$keys = val$keys;
}

defineSeed(143, 144, makeCastMap([Q$Set]), JSONObject$1_0);
_.contains_0 = function contains_0(o){
  return instanceOf(o, Q$String) && $containsKey(this.this$0, dynamicCast(o, Q$String));
}
;
_.iterator = function iterator_0(){
  return new AbstractList$IteratorImpl_0(new Arrays$ArrayList_0(this.val$keys));
}
;
_.size_1 = function size_1(){
  return this.val$keys.length;
}
;
function $clinit_JSONParser(){
  $clinit_JSONParser = nullMethod;
  typeMap = {'boolean':createBoolean, number:createNumber, string:createString, object:createObject, 'function':createObject, undefined:createUndefined};
}

function createBoolean(v){
  return $clinit_JSONBoolean() , v?TRUE:FALSE;
}

function createNumber(v){
  return new JSONNumber_0(v);
}

function createObject(o){
  if (!o) {
    return $clinit_JSONNull() , instance;
  }
  var v = o.valueOf?o.valueOf():o;
  if (v !== o) {
    var func = typeMap[typeof v];
    return func?func(v):throwUnknownTypeException(typeof v);
  }
   else if (o instanceof Array || o instanceof $wnd.Array) {
    return new JSONArray_0(o);
  }
   else {
    return new JSONObject_0(o);
  }
}

function createString(v){
  return new JSONString_0(v);
}

function createUndefined(){
  return null;
}

function evaluate(json, strict){
  var v;
  if (strict && ($clinit_JsonUtils() , hasJsonParse)) {
    try {
      v = JSON.parse(json);
    }
     catch (e) {
      return throwJSONException('Error parsing JSON: ' + e);
    }
  }
   else {
    if (strict) {
      if (!($clinit_JsonUtils() , !/[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test(json.replace(/"(\\.|[^"\\])*"/g, '')))) {
        return throwJSONException('Illegal character in JSON string');
      }
    }
    json = escapeJsonForEval(json);
    try {
      v = eval('(' + json + ')');
    }
     catch (e) {
      return throwJSONException('Error parsing JSON: ' + e);
    }
  }
  var func = typeMap[typeof v];
  return func?func(v):throwUnknownTypeException(typeof v);
}

function parse_0(jsonString){
  $clinit_JSONParser();
  var ex;
  if (jsonString == null) {
    throw new NullPointerException_0;
  }
  if (jsonString.length == 0) {
    throw new IllegalArgumentException_0('empty argument');
  }
  try {
    return evaluate(jsonString, false);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, Q$JavaScriptException)) {
      ex = $e0;
      throw new JSONException_1(ex);
    }
     else 
      throw unwrap($e0);
  }
}

function throwJSONException(message){
  throw new JSONException_0(message);
}

function throwUnknownTypeException(typeString){
  $clinit_JSONParser();
  throw new JSONException_0("Unexpected typeof result '" + typeString + "'; please report this bug to the GWT team");
}

var typeMap;
function JSONString_0(value_0){
  if (value_0 == null) {
    throw new NullPointerException_0;
  }
  this.value_0 = value_0;
}

defineSeed(147, 137, makeCastMap([Q$JSONString]), JSONString_0);
_.equals$ = function equals_5(other){
  if (!instanceOf(other, Q$JSONString)) {
    return false;
  }
  return $equals(this.value_0, dynamicCast(other, Q$JSONString).value_0);
}
;
_.hashCode$ = function hashCode_7(){
  return getHashCode_0(this.value_0);
}
;
_.isString = function isString_0(){
  return this;
}
;
_.toString$ = function toString_15(){
  return escapeValue(this.value_0);
}
;
function Array_0(){
}

function clone(array){
  return cloneSubrange(array, 0, array.length);
}

function cloneSubrange(array, fromIndex, toIndex){
  var a, result;
  a = array;
  result = a.slice(fromIndex, toIndex);
  initValues(a.___clazz$, a.castableTypeMap$, a.queryId$, result);
  return result;
}

function createFrom(array, length_0){
  var a, result;
  a = array;
  result = createFromSeed(0, length_0);
  initValues(a.___clazz$, a.castableTypeMap$, a.queryId$, result);
  return result;
}

function createFromSeed(seedType, length_0){
  var array = new Array(length_0);
  if (seedType == 3) {
    for (var i_0 = 0; i_0 < length_0; ++i_0) {
      array[i_0] = {l:0, m:0, h:0};
    }
  }
   else if (seedType > 0 && seedType < 3) {
    var value_0 = seedType == 1?0:false;
    for (var i_0 = 0; i_0 < length_0; ++i_0) {
      array[i_0] = value_0;
    }
  }
  return array;
}

function initDim(arrayClass, castableTypeMap, queryId, length_0, seedType){
  var result;
  result = createFromSeed(seedType, length_0);
  initValues(arrayClass, castableTypeMap, queryId, result);
  return result;
}

function initValues(arrayClass, castableTypeMap, queryId, array){
  $clinit_Array$ExpandoWrapper();
  wrapArray(array, expandoNames_0, expandoValues_0);
  array.___clazz$ = arrayClass;
  array.castableTypeMap$ = castableTypeMap;
  array.queryId$ = queryId;
  return array;
}

function setCheck(array, index_0, value_0){
  if (value_0 != null) {
    if (array.queryId$ > 0 && !canCastUnsafe(value_0, array.queryId$)) {
      throw new ArrayStoreException_0;
    }
     else if (array.queryId$ == -1 && (value_0.typeMarker$ == nullMethod || canCast(value_0, 1))) {
      throw new ArrayStoreException_0;
    }
     else if (array.queryId$ < -1 && !(value_0.typeMarker$ != nullMethod && !canCast(value_0, 1)) && !canCastUnsafe(value_0, -array.queryId$)) {
      throw new ArrayStoreException_0;
    }
  }
  return array[index_0] = value_0;
}

defineSeed(148, 1, {}, Array_0);
_.queryId$ = 0;
function $clinit_Array$ExpandoWrapper(){
  $clinit_Array$ExpandoWrapper = nullMethod;
  expandoNames_0 = [];
  expandoValues_0 = [];
  initExpandos(new Array_0, expandoNames_0, expandoValues_0);
}

function initExpandos(protoType, expandoNames, expandoValues){
  var i_0 = 0, value_0;
  for (var name_0 in protoType) {
    if (value_0 = protoType[name_0]) {
      expandoNames[i_0] = name_0;
      expandoValues[i_0] = value_0;
      ++i_0;
    }
  }
}

function wrapArray(array, expandoNames, expandoValues){
  $clinit_Array$ExpandoWrapper();
  for (var i_0 = 0, c = expandoNames.length; i_0 < c; ++i_0) {
    array[expandoNames[i_0]] = expandoValues[i_0];
  }
}

var expandoNames_0, expandoValues_0;
function canCast(src_0, dstId){
  return src_0.castableTypeMap$ && !!src_0.castableTypeMap$[dstId];
}

function canCastUnsafe(src_0, dstId){
  return src_0.castableTypeMap$ && src_0.castableTypeMap$[dstId];
}

function dynamicCast(src_0, dstId){
  if (src_0 != null && !canCastUnsafe(src_0, dstId)) {
    throw new ClassCastException_0;
  }
  return src_0;
}

function dynamicCastJso(src_0){
  if (src_0 != null && (src_0.typeMarker$ == nullMethod || canCast(src_0, 1))) {
    throw new ClassCastException_0;
  }
  return src_0;
}

function instanceOf(src_0, dstId){
  return src_0 != null && canCast(src_0, dstId);
}

function instanceOfJso(src_0){
  return src_0 != null && src_0.typeMarker$ != nullMethod && !canCast(src_0, 1);
}

function isJavaObject(src_0){
  return src_0.typeMarker$ == nullMethod || canCast(src_0, 1);
}

function maskUndefined(src_0){
  return src_0 == null?null:src_0;
}

function narrow_short(x_0){
  return ~~(x_0 << 16) >> 16;
}

function round_int(x_0){
  return ~~Math.max(Math.min(x_0, 2147483647), -2147483648);
}

function round_short(x_0){
  return narrow_short(round_int(x_0));
}

function throwClassCastExceptionUnlessNull(o){
  if (o != null) {
    throw new ClassCastException_0;
  }
  return null;
}

function com_google_gwt_animation_client_AnimationScheduler(){
  switch (permutationId) {
    case 0:
      return new AnimationSchedulerImplMozilla_0;
    case 4:
      return new AnimationSchedulerImplWebkit_0;
  }
  return new AnimationSchedulerImplTimer_0;
}

function com_google_gwt_canvas_client_Canvas_CanvasElementSupportDetector(){
  if (permutationId == 2) {
    return new Canvas$CanvasElementSupportDetectedNo_0;
  }
  return new Canvas$CanvasElementSupportDetectedMaybe_0;
}

function com_google_gwt_core_client_impl_StackTraceCreator_Collector(){
  switch (permutationId) {
    case 0:
      return new StackTraceCreator$CollectorMoz_0;
    case 4:
      return new StackTraceCreator$CollectorChromeNoSourceMap_0;
  }
  return new StackTraceCreator$Collector_0;
}

function com_google_gwt_dom_client_DOMImpl(){
  switch (permutationId) {
    case 2:
      return new DOMImplIE8_0;
    case 0:
      return new DOMImplMozilla_0;
    case 4:
      return new DOMImplWebkit_0;
  }
  return new DOMImplIE9_0;
}

function com_google_gwt_user_client_impl_DOMImpl(){
  switch (permutationId) {
    case 2:
      return new DOMImplIE8_2;
    case 0:
      return new DOMImplMozilla_2;
    case 4:
      return new DOMImplWebkit_2;
  }
  return new DOMImplIE9_2;
}

function com_google_gwt_user_client_impl_HistoryImpl(){
  switch (permutationId) {
    case 4:
      return new HistoryImplSafari_0;
    case 0:
      return new HistoryImplMozilla_0;
  }
  return new HistoryImpl_0;
}

function com_google_gwt_user_client_impl_WindowImpl(){
  switch (permutationId) {
    case 0:
      return new WindowImplMozilla_0;
    case 4:
      return new WindowImpl_0;
  }
  return new WindowImplIE_0;
}

function com_google_gwt_user_client_ui_ScrollImpl(){
  switch (permutationId) {
    case 2:
    case 3:
      return new ScrollImpl$ScrollImplTrident_0;
  }
  return new ScrollImpl_0;
}

function com_google_gwt_user_client_ui_impl_FocusImpl(){
  switch (permutationId) {
    case 0:
      return new FocusImplStandard_0;
    case 4:
      return new FocusImplSafari_0;
  }
  return new FocusImplIE6_0;
}

function com_google_gwt_user_client_ui_impl_PopupImpl(){
  if (permutationId == 0) {
    return new PopupImplMozilla_0;
  }
  return new PopupImpl_0;
}

function com_google_gwt_useragent_client_UserAgent(){
  switch (permutationId) {
    case 4:
      return new UserAgentImplSafari_0;
    case 1:
      return new UserAgentImplIe10_0;
    case 3:
      return new UserAgentImplIe9_0;
    case 2:
      return new UserAgentImplIe8_0;
  }
  return new UserAgentImplGecko1_8_0;
}

function org_glob3_mobile_specific_Downloader_1WebGL_1Handler(){
  if (permutationId == 4) {
    return new Downloader_WebGL_Handler_WebkitImpl_0;
  }
  return new Downloader_WebGL_Handler_DefaultImpl_0;
}

var permutationId = -1;
function init(){
  var impl, compileTimeValue, runtimeValue;
  isStatsAvailable() && onModuleStart('com.google.gwt.useragent.client.UserAgentAsserter');
  impl = dynamicCast(com_google_gwt_useragent_client_UserAgent(), Q$UserAgent);
  compileTimeValue = impl.getCompileTimeValue();
  runtimeValue = impl.getRuntimeValue();
  $equals(compileTimeValue, runtimeValue) || ($wnd.alert('ERROR: Possible problem with your *.gwt.xml module file.\nThe compile time user.agent value (' + compileTimeValue + ') does not match the runtime user.agent value (' + runtimeValue + '). Expect more errors.\n') , undefined);
  isStatsAvailable() && onModuleStart('com.google.gwt.user.client.DocumentModeAsserter');
  $onModuleLoad_0();
  isStatsAvailable() && onModuleStart('com.google.gwt.logging.client.LogConfiguration');
  $onModuleLoad($clinit_LogConfiguration());
  isStatsAvailable() && onModuleStart('org.glob3.mobile.client.G3MWebGLTestingApplication');
  jsCalls();
}

function getCachableJavaScriptException(e_0){
  var jse = e_0.__gwt$exception;
  if (!jse) {
    jse = new JavaScriptException_0(e_0);
    try {
      e_0.__gwt$exception = jse;
    }
     catch (e) {
    }
  }
  return jse;
}

function unwrap(e){
  var jse;
  if (instanceOf(e, Q$JavaScriptException)) {
    jse = dynamicCast(e, Q$JavaScriptException);
    if (jse.e !== ($clinit_JavaScriptException() , NOT_SET)) {
      return jse.e === NOT_SET?null:jse.e;
    }
  }
  return e;
}

function wrap(e){
  if (instanceOf(e, Q$Throwable)) {
    return e;
  }
  return e == null?new JavaScriptException_0(null):getCachableJavaScriptException(e);
}

function create_0(value_0){
  var a0, a1, a2;
  a0 = value_0 & 4194303;
  a1 = ~~value_0 >> 22 & 4194303;
  a2 = value_0 < 0?1048575:0;
  return create0(a0, a1, a2);
}

function create_1(a){
  return create0(a.l, a.m, a.h);
}

function create0(l_0, m_0, h_0){
  return {l:l_0, m:m_0, h:h_0};
}

function divMod(a, b, computeRemainder){
  var aIsCopy, aIsMinValue, aIsNegative, bpower, c, negative;
  if (b.l == 0 && b.m == 0 && b.h == 0) {
    throw new ArithmeticException_0;
  }
  if (a.l == 0 && a.m == 0 && a.h == 0) {
    computeRemainder && (remainder = create0(0, 0, 0));
    return create0(0, 0, 0);
  }
  if (b.h == 524288 && b.m == 0 && b.l == 0) {
    return divModByMinValue(a, computeRemainder);
  }
  negative = false;
  if (~~b.h >> 19 != 0) {
    b = neg(b);
    negative = true;
  }
  bpower = powerOfTwo(b);
  aIsNegative = false;
  aIsMinValue = false;
  aIsCopy = false;
  if (a.h == 524288 && a.m == 0 && a.l == 0) {
    aIsMinValue = true;
    aIsNegative = true;
    if (bpower == -1) {
      a = create_1(($clinit_LongLib$Const() , MAX_VALUE));
      aIsCopy = true;
      negative = !negative;
    }
     else {
      c = shr(a, bpower);
      negative && negate(c);
      computeRemainder && (remainder = create0(0, 0, 0));
      return c;
    }
  }
   else if (~~a.h >> 19 != 0) {
    aIsNegative = true;
    a = neg(a);
    aIsCopy = true;
    negative = !negative;
  }
  if (bpower != -1) {
    return divModByShift(a, bpower, negative, aIsNegative, computeRemainder);
  }
  if (!gte_0(a, b)) {
    computeRemainder && (aIsNegative?(remainder = neg(a)):(remainder = create0(a.l, a.m, a.h)));
    return create0(0, 0, 0);
  }
  return divModHelper(aIsCopy?a:create0(a.l, a.m, a.h), b, negative, aIsNegative, aIsMinValue, computeRemainder);
}

function divModByMinValue(a, computeRemainder){
  if (a.h == 524288 && a.m == 0 && a.l == 0) {
    computeRemainder && (remainder = create0(0, 0, 0));
    return create_1(($clinit_LongLib$Const() , ONE));
  }
  computeRemainder && (remainder = create0(a.l, a.m, a.h));
  return create0(0, 0, 0);
}

function divModByShift(a, bpower, negative, aIsNegative, computeRemainder){
  var c;
  c = shr(a, bpower);
  negative && negate(c);
  if (computeRemainder) {
    a = maskRight(a, bpower);
    aIsNegative?(remainder = neg(a)):(remainder = create0(a.l, a.m, a.h));
  }
  return c;
}

function divModHelper(a, b, negative, aIsNegative, aIsMinValue, computeRemainder){
  var bshift, gte, quotient, shift_0, a1, a2, a0;
  shift_0 = numberOfLeadingZeros(b) - numberOfLeadingZeros(a);
  bshift = shl(b, shift_0);
  quotient = create0(0, 0, 0);
  while (shift_0 >= 0) {
    gte = trialSubtract(a, bshift);
    if (gte) {
      shift_0 < 22?(quotient.l |= 1 << shift_0 , undefined):shift_0 < 44?(quotient.m |= 1 << shift_0 - 22 , undefined):(quotient.h |= 1 << shift_0 - 44 , undefined);
      if (a.l == 0 && a.m == 0 && a.h == 0) {
        break;
      }
    }
    a1 = bshift.m;
    a2 = bshift.h;
    a0 = bshift.l;
    setH(bshift, ~~a2 >>> 1);
    bshift.m = ~~a1 >>> 1 | (a2 & 1) << 21;
    bshift.l = ~~a0 >>> 1 | (a1 & 1) << 21;
    --shift_0;
  }
  negative && negate(quotient);
  if (computeRemainder) {
    if (aIsNegative) {
      remainder = neg(a);
      aIsMinValue && (remainder = sub_0(remainder, ($clinit_LongLib$Const() , ONE)));
    }
     else {
      remainder = create0(a.l, a.m, a.h);
    }
  }
  return quotient;
}

function maskRight(a, bits){
  var b0, b1, b2;
  if (bits <= 22) {
    b0 = a.l & (1 << bits) - 1;
    b1 = b2 = 0;
  }
   else if (bits <= 44) {
    b0 = a.l;
    b1 = a.m & (1 << bits - 22) - 1;
    b2 = 0;
  }
   else {
    b0 = a.l;
    b1 = a.m;
    b2 = a.h & (1 << bits - 44) - 1;
  }
  return create0(b0, b1, b2);
}

function negate(a){
  var neg0, neg1, neg2;
  neg0 = ~a.l + 1 & 4194303;
  neg1 = ~a.m + (neg0 == 0?1:0) & 4194303;
  neg2 = ~a.h + (neg0 == 0 && neg1 == 0?1:0) & 1048575;
  setL(a, neg0);
  setM(a, neg1);
  setH(a, neg2);
}

function numberOfLeadingZeros(a){
  var b1, b2;
  b2 = numberOfLeadingZeros_0(a.h);
  if (b2 == 32) {
    b1 = numberOfLeadingZeros_0(a.m);
    return b1 == 32?numberOfLeadingZeros_0(a.l) + 32:b1 + 20 - 10;
  }
   else {
    return b2 - 12;
  }
}

function powerOfTwo(a){
  var h_0, l_0, m_0;
  l_0 = a.l;
  if ((l_0 & l_0 - 1) != 0) {
    return -1;
  }
  m_0 = a.m;
  if ((m_0 & m_0 - 1) != 0) {
    return -1;
  }
  h_0 = a.h;
  if ((h_0 & h_0 - 1) != 0) {
    return -1;
  }
  if (h_0 == 0 && m_0 == 0 && l_0 == 0) {
    return -1;
  }
  if (h_0 == 0 && m_0 == 0 && l_0 != 0) {
    return numberOfTrailingZeros(l_0);
  }
  if (h_0 == 0 && m_0 != 0 && l_0 == 0) {
    return numberOfTrailingZeros(m_0) + 22;
  }
  if (h_0 != 0 && m_0 == 0 && l_0 == 0) {
    return numberOfTrailingZeros(h_0) + 44;
  }
  return -1;
}

function setH(a, x_0){
  a.h = x_0;
}

function setL(a, x_0){
  a.l = x_0;
}

function setM(a, x_0){
  a.m = x_0;
}

function toDoubleHelper(a){
  return a.l + a.m * 4194304 + a.h * 17592186044416;
}

function trialSubtract(a, b){
  var sum0, sum1, sum2;
  sum2 = a.h - b.h;
  if (sum2 < 0) {
    return false;
  }
  sum0 = a.l - b.l;
  sum1 = a.m - b.m + (~~sum0 >> 22);
  sum2 += ~~sum1 >> 22;
  if (sum2 < 0) {
    return false;
  }
  setL(a, sum0 & 4194303);
  setM(a, sum1 & 4194303);
  setH(a, sum2 & 1048575);
  return true;
}

var remainder;
function add_1(a, b){
  var sum0, sum1, sum2;
  sum0 = a.l + b.l;
  sum1 = a.m + b.m + (~~sum0 >> 22);
  sum2 = a.h + b.h + (~~sum1 >> 22);
  return {l:sum0 & 4194303, m:sum1 & 4194303, h:sum2 & 1048575};
}

function and(a, b){
  return {l:a.l & b.l, m:a.m & b.m, h:a.h & b.h};
}

function eq(a, b){
  return a.l == b.l && a.m == b.m && a.h == b.h;
}

function fromDouble(value_0){
  var a0, a1, a2, negative, result;
  if (isNaN_0(value_0)) {
    return $clinit_LongLib$Const() , ZERO;
  }
  if (value_0 < -9223372036854775808) {
    return $clinit_LongLib$Const() , MIN_VALUE;
  }
  if (value_0 >= 9223372036854775807) {
    return $clinit_LongLib$Const() , MAX_VALUE;
  }
  negative = false;
  if (value_0 < 0) {
    negative = true;
    value_0 = -value_0;
  }
  a2 = 0;
  if (value_0 >= 17592186044416) {
    a2 = round_int(value_0 / 17592186044416);
    value_0 -= a2 * 17592186044416;
  }
  a1 = 0;
  if (value_0 >= 4194304) {
    a1 = round_int(value_0 / 4194304);
    value_0 -= a1 * 4194304;
  }
  a0 = round_int(value_0);
  result = create0(a0, a1, a2);
  negative && negate(result);
  return result;
}

function fromInt(value_0){
  var rebase, result;
  if (value_0 > -129 && value_0 < 128) {
    rebase = value_0 + 128;
    boxedValues == null && (boxedValues = initDim(_3Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$LongLibBase$LongEmul, 256, 0));
    result = boxedValues[rebase];
    !result && (result = boxedValues[rebase] = create_0(value_0));
    return result;
  }
  return create_0(value_0);
}

function gt(a, b){
  var signa, signb;
  signa = ~~a.h >> 19;
  signb = ~~b.h >> 19;
  return signa == 0?signb != 0 || a.h > b.h || a.h == b.h && a.m > b.m || a.h == b.h && a.m == b.m && a.l > b.l:!(signb == 0 || a.h < b.h || a.h == b.h && a.m < b.m || a.h == b.h && a.m == b.m && a.l <= b.l);
}

function gte_0(a, b){
  var signa, signb;
  signa = ~~a.h >> 19;
  signb = ~~b.h >> 19;
  return signa == 0?signb != 0 || a.h > b.h || a.h == b.h && a.m > b.m || a.h == b.h && a.m == b.m && a.l >= b.l:!(signb == 0 || a.h < b.h || a.h == b.h && a.m < b.m || a.h == b.h && a.m == b.m && a.l < b.l);
}

function lt(a, b){
  return !gte_0(a, b);
}

function lte(a, b){
  return !gt(a, b);
}

function neg(a){
  var neg0, neg1, neg2;
  neg0 = ~a.l + 1 & 4194303;
  neg1 = ~a.m + (neg0 == 0?1:0) & 4194303;
  neg2 = ~a.h + (neg0 == 0 && neg1 == 0?1:0) & 1048575;
  return create0(neg0, neg1, neg2);
}

function neq(a, b){
  return a.l != b.l || a.m != b.m || a.h != b.h;
}

function or(a, b){
  return {l:a.l | b.l, m:a.m | b.m, h:a.h | b.h};
}

function shl(a, n){
  var res0, res1, res2;
  n &= 63;
  if (n < 22) {
    res0 = a.l << n;
    res1 = a.m << n | ~~a.l >> 22 - n;
    res2 = a.h << n | ~~a.m >> 22 - n;
  }
   else if (n < 44) {
    res0 = 0;
    res1 = a.l << n - 22;
    res2 = a.m << n - 22 | ~~a.l >> 44 - n;
  }
   else {
    res0 = 0;
    res1 = 0;
    res2 = a.l << n - 44;
  }
  return {l:res0 & 4194303, m:res1 & 4194303, h:res2 & 1048575};
}

function shr(a, n){
  var a2, negative, res0, res1, res2;
  n &= 63;
  a2 = a.h;
  negative = (a2 & 524288) != 0;
  negative && (a2 |= -1048576);
  if (n < 22) {
    res2 = ~~a2 >> n;
    res1 = ~~a.m >> n | a2 << 22 - n;
    res0 = ~~a.l >> n | a.m << 22 - n;
  }
   else if (n < 44) {
    res2 = negative?1048575:0;
    res1 = ~~a2 >> n - 22;
    res0 = ~~a.m >> n - 22 | a2 << 44 - n;
  }
   else {
    res2 = negative?1048575:0;
    res1 = negative?4194303:0;
    res0 = ~~a2 >> n - 44;
  }
  return {l:res0 & 4194303, m:res1 & 4194303, h:res2 & 1048575};
}

function shru(a, n){
  var a2, res0, res1, res2;
  n &= 63;
  a2 = a.h & 1048575;
  if (n < 22) {
    res2 = ~~a2 >>> n;
    res1 = ~~a.m >> n | a2 << 22 - n;
    res0 = ~~a.l >> n | a.m << 22 - n;
  }
   else if (n < 44) {
    res2 = 0;
    res1 = ~~a2 >>> n - 22;
    res0 = ~~a.m >> n - 22 | a.h << 44 - n;
  }
   else {
    res2 = 0;
    res1 = 0;
    res0 = ~~a2 >>> n - 44;
  }
  return {l:res0 & 4194303, m:res1 & 4194303, h:res2 & 1048575};
}

function sub_0(a, b){
  var sum0, sum1, sum2;
  sum0 = a.l - b.l;
  sum1 = a.m - b.m + (~~sum0 >> 22);
  sum2 = a.h - b.h + (~~sum1 >> 22);
  return {l:sum0 & 4194303, m:sum1 & 4194303, h:sum2 & 1048575};
}

function toDouble(a){
  if (eq(a, ($clinit_LongLib$Const() , MIN_VALUE))) {
    return -9223372036854775808;
  }
  if (!gte_0(a, ZERO)) {
    return -toDoubleHelper(neg(a));
  }
  return a.l + a.m * 4194304 + a.h * 17592186044416;
}

function toInt(a){
  return a.l | a.m << 22;
}

function toString_16(a){
  var digits, rem, res, tenPowerLong, zeroesNeeded;
  if (a.l == 0 && a.m == 0 && a.h == 0) {
    return '0';
  }
  if (a.h == 524288 && a.m == 0 && a.l == 0) {
    return '-9223372036854775808';
  }
  if (~~a.h >> 19 != 0) {
    return '-' + toString_16(neg(a));
  }
  rem = a;
  res = '';
  while (!(rem.l == 0 && rem.m == 0 && rem.h == 0)) {
    tenPowerLong = fromInt(1000000000);
    rem = divMod(rem, tenPowerLong, true);
    digits = '' + toInt(remainder);
    if (!(rem.l == 0 && rem.m == 0 && rem.h == 0)) {
      zeroesNeeded = 9 - digits.length;
      for (; zeroesNeeded > 0; zeroesNeeded--) {
        digits = '0' + digits;
      }
    }
    res = digits + res;
  }
  return res;
}

function xor(a, b){
  return {l:a.l ^ b.l, m:a.m ^ b.m, h:a.h ^ b.h};
}

var boxedValues;
function $clinit_LongLib$Const(){
  $clinit_LongLib$Const = nullMethod;
  MAX_VALUE = create0(4194303, 4194303, 524287);
  MIN_VALUE = create0(0, 0, 524288);
  ONE = fromInt(1);
  fromInt(2);
  ZERO = fromInt(0);
}

var MAX_VALUE, MIN_VALUE, ONE, ZERO;
function isStatsAvailable(){
  return !!$stats;
}

function onModuleStart(mainClassName){
  return $stats({moduleName:$moduleName, sessionId:$sessionId, subSystem:'startup', evtGroup:'moduleStartup', millis:(new Date).getTime(), type:'onModuleLoadStart', className:mainClassName});
}

function $getLevel(this$static){
  if (this$static.level) {
    return this$static.level;
  }
  return $clinit_Level() , ALL;
}

function $setFormatter(this$static, newFormatter){
  this$static.formatter = newFormatter;
}

function $setLevel(this$static, newLevel){
  this$static.level = newLevel;
}

defineSeed(162, 1, makeCastMap([Q$Handler]));
function ConsoleLogHandler_0(){
  $setFormatter(this, new TextLogFormatter_0(true));
  $setLevel(this, ($clinit_Level() , ALL));
}

defineSeed(161, 162, makeCastMap([Q$Handler]), ConsoleLogHandler_0);
_.publish = function publish(record){
  var msg, val;
  if (!(window.console != null && window.console.firebug == null) || ($getLevel(this) , -2147483648) > record.level.intValue_0()) {
    return;
  }
  msg = this.formatter.format(record);
  val = record.level.intValue_0();
  val >= ($clinit_Level() , 1000)?(window.console.error(msg) , undefined):val >= 900?(window.console.warn(msg) , undefined):val >= 800?(window.console.info(msg) , undefined):(window.console.log(msg) , undefined);
}
;
function DevelopmentModeLogHandler_0(){
  $setFormatter(this, new TextLogFormatter_0(false));
  $setLevel(this, ($clinit_Level() , ALL));
}

defineSeed(163, 162, makeCastMap([Q$Handler]), DevelopmentModeLogHandler_0);
_.publish = function publish_0(record){
  return;
}
;
function $isSupported(){
  return !!(window.console && window.console.firebug);
}

function $warn(message){
  window.console.warn(message);
}

function FirebugLogHandler_0(){
  $isSupported() && $warn('FirebugLogHandler is deprecated, use the ConsoleLogHandler instead.');
  $setFormatter(this, new TextLogFormatter_0(true));
  $setLevel(this, ($clinit_Level() , ALL));
}

defineSeed(164, 162, makeCastMap([Q$Handler]), FirebugLogHandler_0);
_.publish = function publish_1(record){
  var msg, val;
  if (!$isSupported() || ($getLevel(this) , -2147483648) > record.level.intValue_0()) {
    return;
  }
  msg = this.formatter.format(record);
  val = record.level.intValue_0();
  val <= ($clinit_Level() , 500)?(window.console.debug(msg) , undefined):val < 900?(window.console.info(msg) , undefined):val < 1000?$warn(msg):(window.console.error(msg) , undefined);
}
;
function HasWidgetsLogHandler_0(container){
  this.widgetContainer = container;
  $setFormatter(this, new HtmlLogFormatter_0);
  $setLevel(this, ($clinit_Level() , ALL));
}

defineSeed(165, 162, makeCastMap([Q$Handler]), HasWidgetsLogHandler_0);
_.publish = function publish_2(record){
  var formatter, msg;
  if (($getLevel(this) , -2147483648) > record.level.intValue_0()) {
    return;
  }
  formatter = this.formatter;
  msg = formatter.format(record);
  instanceOf(formatter, Q$HtmlLogFormatter)?$add(this.widgetContainer, new HTML_0(msg)):$add(this.widgetContainer, new Label_1(msg));
}
;
defineSeed(168, 1, {});
function $getRecordInfo(event_0, newline){
  var date, s;
  date = new Date_2(event_0.millis);
  s = new StringBuilder_0;
  $append_3(s, $toString_1(date));
  $append_0(s.impl, ' ');
  $append_3(s, event_0.loggerName);
  $append_0(s.impl, newline);
  $append_3(s, event_0.level.getName());
  $append_0(s.impl, ': ');
  return s.impl.string;
}

defineSeed(167, 168, {});
function $getColor(logLevel){
  if (logLevel == ($clinit_Level() , 2147483647)) {
    return '#000';
  }
  if (logLevel >= 1000) {
    return '#F00';
  }
  if (logLevel >= 900) {
    return '#E56717';
  }
  if (logLevel >= 800) {
    return '#20b000';
  }
  if (logLevel >= 700) {
    return '#2B60DE';
  }
  if (logLevel >= 500) {
    return '#F0F';
  }
  if (logLevel >= 400) {
    return '#F0F';
  }
  if (logLevel >= 300) {
    return '#F0F';
  }
  return '#000';
}

function $getEscaped(text_0){
  text_0 = $replaceAll(text_0, '<', '&lt;');
  text_0 = $replaceAll(text_0, '>', '&gt;');
  text_0 = $replaceAll(text_0, '\t', '&nbsp;&nbsp;&nbsp;');
  return text_0;
}

function HtmlLogFormatter_0(){
  this.showStackTraces = true;
}

defineSeed(166, 167, makeCastMap([Q$HtmlLogFormatter]), HtmlLogFormatter_0);
_.format = function format_0(event_0){
  var html, prefix;
  html = new StringBuilder_0;
  $append_3(html, (prefix = new StringBuilder_0 , $append_0(prefix.impl, "<span style='color:") , $append_3(prefix, $getColor(event_0.level.intValue_0())) , $append_0(prefix.impl, "'>") , $append_0(prefix.impl, '<code>') , prefix.impl.string));
  $append_3(html, $getRecordInfo(event_0, ' '));
  $append_3(html, $getEscaped(event_0.msg));
  this.showStackTraces && !!event_0.thrown && $printStackTrace(event_0.thrown, new HtmlLogFormatter$1_0(html, html));
  $append_0(html.impl, '<\/code><\/span>');
  return html.impl.string;
}
;
_.showStackTraces = false;
defineSeed(173, 1, {});
defineSeed(172, 173, {});
defineSeed(171, 172, {});
function StackTracePrintStream_0(builder){
  this.builder = builder;
}

defineSeed(170, 171, {}, StackTracePrintStream_0);
_.append = function append(text_0){
  $append_3(this.builder, text_0);
}
;
_.newLine = function newLine(){
  $append_3(this.builder, '\n');
}
;
function HtmlLogFormatter$1_0($anonymous0, val$html){
  this.val$html = val$html;
  StackTracePrintStream_0.call(this, $anonymous0);
}

defineSeed(169, 170, {}, HtmlLogFormatter$1_0);
_.append = function append_0(str){
  $append_3(this.val$html, $getEscaped(str));
}
;
_.newLine = function newLine_0(){
  $append_3(this.val$html, '<br>');
}
;
function $clinit_LogConfiguration(){
  $clinit_LogConfiguration = nullMethod;
  impl_3 = new LogConfiguration$LogConfigurationImplRegular_0;
}

function $onModuleLoad(){
  var log_0;
  $configureClientSideLogging(impl_3);
  if (!uncaughtExceptionHandler) {
    log_0 = ($clinit_Logger() , $getLoggerHelper(Lcom_google_gwt_logging_client_LogConfiguration_2_classLit.typeName));
    setUncaughtExceptionHandler(new LogConfiguration$1_0(log_0));
  }
}

var impl_3;
function LogConfiguration$1_0(val$log){
  this.val$log = val$log;
}

defineSeed(175, 1, {}, LogConfiguration$1_0);
function $addHandlerIfNotNull(l_0, h_0){
  $addHandler_1(l_0.impl, h_0);
}

function $configureClientSideLogging(this$static){
  this$static.root = ($clinit_Logger() , $getLoggerHelper(''));
  this$static.root.impl.useParentHandlers = false;
  $setLevels(this$static.root);
  $setDefaultHandlers(this$static.root);
}

function $parseLevel(s){
  if (s == null) {
    return null;
  }
  if ($equals(s, ($clinit_Level() , 'OFF'))) {
    return OFF;
  }
   else if ($equals(s, 'SEVERE')) {
    return SEVERE;
  }
   else if ($equals(s, 'WARNING')) {
    return WARNING;
  }
   else if ($equals(s, 'INFO')) {
    return INFO;
  }
   else if ($equals(s, 'CONFIG')) {
    return CONFIG;
  }
   else if ($equals(s, 'FINE')) {
    return FINE;
  }
   else if ($equals(s, 'FINER')) {
    return FINER;
  }
   else if ($equals(s, 'FINEST')) {
    return FINEST;
  }
   else if ($equals(s, 'ALL')) {
    return ALL;
  }
  return null;
}

function $setDefaultHandlers(l_0){
  var console_0, dev, firebug, loggingWidget, remote, system;
  console_0 = new ConsoleLogHandler_0;
  $addHandler_1(l_0.impl, console_0);
  dev = new DevelopmentModeLogHandler_0;
  $addHandler_1(l_0.impl, dev);
  firebug = new FirebugLogHandler_0;
  $addHandler_1(l_0.impl, firebug);
  system = new SystemLogHandler_0;
  $addHandler_1(l_0.impl, system);
  remote = new NullLogHandler_0;
  !!remote || $addHandler_1(l_0.impl, null);
  loggingWidget = new LoggingPopup_0;
  $addHandlerIfNotNull(l_0, new HasWidgetsLogHandler_0(loggingWidget));
}

function $setLevels(l_0){
  var paramLevel, paramsForName;
  paramLevel = $parseLevel((ensureListParameterMap() , paramsForName = dynamicCast(listParamMap.get_0('logLevel'), Q$List) , !paramsForName?null:dynamicCast(paramsForName.get_1(paramsForName.size_1() - 1), Q$String)));
  paramLevel?$setLevel_0(l_0.impl, paramLevel):$setLevel_1(l_0, ($clinit_Level() , ALL));
}

function LogConfiguration$LogConfigurationImplRegular_0(){
}

defineSeed(176, 1, {}, LogConfiguration$LogConfigurationImplRegular_0);
defineSeed(180, 18, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$HasWidgets, Q$IsWidget, Q$UIObject, Q$Widget]));
_.doAttachChildren = function doAttachChildren_0(){
  tryCommand(this, ($clinit_AttachDetachException() , attachCommand));
}
;
_.doDetachChildren = function doDetachChildren_0(){
  tryCommand(this, ($clinit_AttachDetachException() , detachCommand));
}
;
function $remove(this$static, w){
  if (this$static.widget != w) {
    return false;
  }
  try {
    $setParent(w, null);
  }
   finally {
    $removeChild(this$static.getContainerElement(), ($clinit_DOM() , w.element));
    this$static.widget = null;
  }
  return true;
}

function $setWidget(this$static, w){
  if (w == this$static.widget) {
    return;
  }
  !!w && $removeFromParent(w);
  !!this$static.widget && $remove(this$static, this$static.widget);
  this$static.widget = w;
  if (w) {
    $clinit_DOM();
    $appendChild(this$static.getContainerElement(), ($clinit_PotentialElement() , $resolve($getElement(this$static.widget))));
    $setParent(w, this$static);
  }
}

function SimplePanel_0(){
  SimplePanel_1.call(this, ($clinit_DOM() , $createDivElement($doc)));
}

function SimplePanel_1(elem){
  $setElement_0(this, ($clinit_DOM() , elem));
}

defineSeed(179, 180, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$HasWidgets, Q$IsWidget, Q$UIObject, Q$Widget]));
_.getContainerElement = function getContainerElement(){
  return $clinit_DOM() , this.element;
}
;
_.iterator = function iterator_1(){
  return new SimplePanel$1_0(this);
}
;
_.remove_0 = function remove_1(w){
  return $remove(this, w);
}
;
function $clinit_PopupPanel(){
  $clinit_PopupPanel = nullMethod;
  impl_4 = com_google_gwt_user_client_ui_impl_PopupImpl();
}

function $eventTargetsPopup(this$static, event_0){
  var target;
  target = ($clinit_DOMImpl() , impl_1).eventGetTarget(event_0);
  if (is_0(target)) {
    return $isOrHasChild(($clinit_DOM() , this$static.element), target);
  }
  return false;
}

function $getOffsetHeight(this$static){
  return $getPropertyInt(($clinit_DOM() , this$static.element), 'offsetHeight');
}

function $getOffsetWidth(this$static){
  return $getPropertyInt(($clinit_DOM() , this$static.element), 'offsetWidth');
}

function $hide(this$static){
  if (!this$static.showing) {
    return;
  }
  $setState(this$static.resizeAnimation, false, false);
  fire_1(this$static);
}

function $maybeUpdateSize(this$static){
  var w;
  w = this$static.widget;
  if (w) {
    this$static.desiredHeight != null && $setHeight(w, this$static.desiredHeight);
    this$static.desiredWidth != null && $setWidth(w, this$static.desiredWidth);
  }
}

function $previewNativeEvent(this$static, event_0){
  var eventTargetsPopupOrPartner, nativeEvent, target, type_0;
  if (event_0.isCanceled || !this$static.previewAllNativeEvents && event_0.isConsumed) {
    this$static.modal && (event_0.isCanceled = true);
    return;
  }
  event_0.isFirstHandler && (event_0.nativeEvent , false) && (event_0.isCanceled = true);
  if (event_0.isCanceled) {
    return;
  }
  nativeEvent = event_0.nativeEvent;
  eventTargetsPopupOrPartner = $eventTargetsPopup(this$static, nativeEvent);
  eventTargetsPopupOrPartner && (event_0.isConsumed = true);
  this$static.modal && (event_0.isCanceled = true);
  type_0 = ($clinit_DOM() , $eventGetTypeInt(($clinit_DOMImpl() , nativeEvent).type));
  switch (type_0) {
    case 512:
    case 256:
    case 128:
      {
        (nativeEvent.keyCode | 0) & 65535;
        (nativeEvent.shiftKey?1:0) | (nativeEvent.metaKey?8:0) | (nativeEvent.ctrlKey?2:0) | (nativeEvent.altKey?4:0);
        return;
      }

    case 4:
    case 1048576:
      if (sCaptureElem) {
        event_0.isConsumed = true;
        return;
      }

      if (!eventTargetsPopupOrPartner && this$static.autoHide) {
        $hide(this$static);
        return;
      }

      break;
    case 8:
    case 64:
    case 1:
    case 2:
    case 4194304:
      {
        if (sCaptureElem) {
          event_0.isConsumed = true;
          return;
        }
        break;
      }

    case 2048:
      {
        target = impl_1.eventGetTarget(nativeEvent);
        if (this$static.modal && !eventTargetsPopupOrPartner && !!target) {
          target.blur && target != $doc.body && target.blur();
          event_0.isCanceled = true;
          return;
        }
        break;
      }

  }
}

function $setPopupPosition(this$static, left, top_0){
  var elem;
  this$static.leftPosition = left;
  this$static.topPosition = top_0;
  left -= $getBodyOffsetLeft($doc);
  top_0 -= $getBodyOffsetTop($doc);
  elem = ($clinit_DOM() , this$static.element);
  elem.style['left'] = left + ($clinit_Style$Unit() , 'px');
  elem.style['top'] = top_0 + 'px';
}

function $show(this$static){
  if (this$static.showing) {
    return;
  }
   else 
    this$static.attached && $removeFromParent(this$static);
  $setState(this$static.resizeAnimation, true, false);
}

function $updateHandlers(this$static){
  if (this$static.nativePreviewHandlerRegistration) {
    $removeHandler(this$static.nativePreviewHandlerRegistration.real);
    this$static.nativePreviewHandlerRegistration = null;
  }
  if (this$static.historyHandlerRegistration) {
    $removeHandler(this$static.historyHandlerRegistration.real);
    this$static.historyHandlerRegistration = null;
  }
  if (this$static.showing) {
    this$static.nativePreviewHandlerRegistration = addNativePreviewHandler(new PopupPanel$3_0(this$static));
    this$static.historyHandlerRegistration = addValueChangeHandler(new PopupPanel$4_0(this$static));
  }
}

defineSeed(178, 179, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$HasWidgets, Q$IsWidget, Q$UIObject, Q$Widget]));
_.getContainerElement = function getContainerElement_0(){
  return impl_4.getContainerElement_0(getFirstChild(($clinit_DOM() , this.element)));
}
;
_.onUnload = function onUnload_0(){
  this.showing && $setState(this.resizeAnimation, false, true);
}
;
_.setHeight = function setHeight_0(height){
  this.desiredHeight = height;
  $maybeUpdateSize(this);
  height.length == 0 && (this.desiredHeight = null);
}
;
_.setWidth = function setWidth_0(width_0){
  this.desiredWidth = width_0;
  $maybeUpdateSize(this);
  width_0.length == 0 && (this.desiredWidth = null);
}
;
_.autoHide = false;
_.autoHideOnHistoryEvents = false;
_.isGlassEnabled = false;
_.leftPosition = 0;
_.modal = false;
_.previewAllNativeEvents = false;
_.showing = false;
_.topPosition = 0;
var impl_4;
function $add(this$static, w){
  $add_3(this$static.logArea, w);
  $setScrollPosition(this$static.scrollPanel, ($getElement(this$static.scrollPanel).scrollHeight || 0) | 0);
}

function LoggingPopup_0(){
  $clinit_PopupPanel();
  var bottomBar, mainPanel, maxmin, titleBar;
  SimplePanel_0.call(this);
  this.glassResizer = new PopupPanel$1_0;
  this.leftPosition = -1;
  this.resizeAnimation = new PopupPanel$ResizeAnimation_0(this);
  this.topPosition = -1;
  $appendChild(($clinit_DOM() , this.element), impl_4.createElement_1());
  $setPopupPosition(this, 0, 0);
  impl_4.getStyleElement(getFirstChild(this.element)).className = 'gwt-PopupPanel';
  impl_4.getContainerElement_0($getFirstChildElement(this.element)).className = 'popupContent';
  this.autoHide = false;
  this.autoHideOnHistoryEvents = false;
  this.modal = false;
  mainPanel = new VerticalPanel_0;
  $setPropertyString(mainPanel.table, 'border', '1');
  mainPanel.element.style['backgroundColor'] = 'white';
  titleBar = new HTML_0('<center><b>Logging<\/b><\/center>');
  $add_3(mainPanel, titleBar);
  new LoggingPopup$WindowMoveHandler_0(this, titleBar);
  this.scrollPanel = new LoggingPopup$ScrollPanelWithMinSize_0;
  $add_3(mainPanel, this.scrollPanel);
  this.logArea = new VerticalPanel_0;
  $setWidget(this.scrollPanel, this.logArea);
  $setPixelSize_0(this.scrollPanel, 300, 200);
  bottomBar = new HorizontalPanel_0;
  $add_3(mainPanel, bottomBar);
  bottomBar.element.style['width'] = '100%';
  $setVerticalAlignment(bottomBar, ($clinit_HasVerticalAlignment() , ALIGN_BOTTOM));
  maxmin = new Button_0;
  $add_2(bottomBar, maxmin);
  $addDomHandler(maxmin, new LoggingPopup$1_0(this, maxmin), ($clinit_ClickEvent() , $clinit_ClickEvent() , TYPE));
  this.resizeIcon = new HTML_0("<div style='font-size:200%; line-height:75%'>\u21F2<\/div>");
  $setAutoHorizontalAlignment(this.resizeIcon, ($clinit_HasHorizontalAlignment() , ALIGN_RIGHT));
  $add_2(bottomBar, this.resizeIcon);
  new LoggingPopup$WindowResizeHandler_0(this, this.resizeIcon);
  $setWidget(this, mainPanel);
  $maybeUpdateSize(this);
  $show(this);
}

defineSeed(177, 178, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$HasWidgets, Q$IsWidget, Q$UIObject, Q$Widget]), LoggingPopup_0);
function $onClick(this$static){
  if ($equals($getInnerText($getElement(this$static.val$maxmin)), 'Minimize')) {
    $setText(this$static.val$maxmin, 'Maximize');
    $setVisible(this$static.this$0.scrollPanel, false);
    $setVisible(this$static.this$0.resizeIcon, false);
  }
   else {
    $setVisible(this$static.this$0.scrollPanel, true);
    $setVisible(this$static.this$0.resizeIcon, true);
    $setText(this$static.val$maxmin, 'Minimize');
  }
}

function LoggingPopup$1_0(this$0, val$maxmin){
  this.this$0 = this$0;
  this.val$maxmin = val$maxmin;
}

defineSeed(181, 1, makeCastMap([Q$ClickHandler, Q$EventHandler]), LoggingPopup$1_0);
function LoggingPopup$MouseDragHandler_0(dragHandle){
  this.dragHandle = dragHandle;
  $addDomHandler(dragHandle, this, ($clinit_MouseDownEvent() , $clinit_MouseDownEvent() , TYPE_0));
  $addDomHandler(dragHandle, this, ($clinit_MouseUpEvent() , $clinit_MouseUpEvent() , TYPE_2));
  $addDomHandler(dragHandle, this, ($clinit_MouseMoveEvent() , $clinit_MouseMoveEvent() , TYPE_1));
}

defineSeed(182, 1, makeCastMap([Q$MouseDownHandler, Q$MouseMoveHandler, Q$MouseUpHandler, Q$EventHandler]));
_.onMouseDown = function onMouseDown(event_0){
  this.dragging = true;
  setCapture($getElement(this.dragHandle));
  this.dragStartX = $getClientX(event_0.nativeEvent);
  this.dragStartY = $getClientY(event_0.nativeEvent);
  $preventDefault(($clinit_DOM() , $clinit_DOM() , currentEvent));
}
;
_.onMouseMove = function onMouseMove(event_0){
  if (this.dragging) {
    this.handleDrag($getClientX(event_0.nativeEvent) - this.dragStartX, $getClientY(event_0.nativeEvent) - this.dragStartY);
    this.dragStartX = $getClientX(event_0.nativeEvent);
    this.dragStartY = $getClientY(event_0.nativeEvent);
  }
}
;
_.onMouseUp = function onMouseUp(event_0){
  this.dragging = false;
  releaseCapture($getElement(this.dragHandle));
}
;
_.dragStartX = 0;
_.dragStartY = 0;
_.dragging = false;
function $getHorizontalScrollPosition(this$static){
  return $getScrollLeft(($clinit_DOM() , this$static.scrollableElem));
}

function $getMaximumHorizontalScrollPosition(this$static){
  return $getMaximumHorizontalScrollPosition_0((!impl_8 && (impl_8 = com_google_gwt_user_client_ui_ScrollImpl()) , impl_8), ($clinit_DOM() , this$static.scrollableElem));
}

function $getMaximumVerticalScrollPosition(this$static){
  return ((($clinit_DOM() , this$static.scrollableElem).scrollHeight || 0) | 0) - (this$static.scrollableElem.clientHeight | 0);
}

function $getMinimumHorizontalScrollPosition(this$static){
  return $getMinimumHorizontalScrollPosition_0((!impl_8 && (impl_8 = com_google_gwt_user_client_ui_ScrollImpl()) , impl_8), ($clinit_DOM() , this$static.scrollableElem));
}

function $getVerticalScrollPosition(this$static){
  return (($clinit_DOM() , this$static.scrollableElem).scrollTop || 0) | 0;
}

function $setHorizontalScrollPosition(this$static, position){
  $setScrollLeft(($clinit_DOM() , this$static.scrollableElem), position);
}

function $setScrollPosition(this$static, position){
  $setScrollTop(($clinit_DOM() , this$static.scrollableElem), position);
}

function $setTouchScrollingDisabled(this$static){
  var scroller, ua;
  if (this$static.touchScroller) {
    return false;
  }
  this$static.touchScroller = (scroller = (!isSupported && (isSupported = ($clinit_Boolean() , !impl_2 && (impl_2 = new TouchEvent$TouchSupportDetector_0) , impl_2.isSupported && !(ua = navigator.userAgent.toLowerCase() , /android ([3-9]+)\.([0-9]+)/.exec(ua) != null)?TRUE_0:FALSE_0)) , isSupported.value_0?new TouchScroller_0:null) , !!scroller && $setTargetWidget(scroller, this$static) , scroller);
  return !this$static.touchScroller;
}

function $setVerticalScrollPosition(this$static, position){
  $setScrollTop(($clinit_DOM() , this$static.scrollableElem), position);
}

defineSeed(184, 179, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$HasWidgets, Q$IsWidget, Q$UIObject, Q$Widget]));
_.getContainerElement = function getContainerElement_1(){
  return $clinit_DOM() , this.containerElem;
}
;
_.onAttach = function onAttach_1(){
  $onAttach(this);
  setEventListener(($clinit_DOM() , this.scrollableElem), this);
}
;
_.onDetach = function onDetach_0(){
  setEventListener(($clinit_DOM() , this.scrollableElem), null);
  $onDetach(this);
}
;
_.setHeight = function setHeight_1(height){
  ($clinit_DOM() , this.element).style['height'] = height;
}
;
_.setWidth = function setWidth_1(width_0){
  ($clinit_DOM() , this.element).style['width'] = width_0;
}
;
function $incrementPixelSize(this$static, width_0, height){
  $setPixelSize_0(this$static, this$static.scrollPanelWidth + width_0, this$static.scrollPanelHeight + height);
}

function $setPixelSize_0(this$static, width_0, height){
  $setPixelSize(this$static, this$static.scrollPanelWidth = width_0 > 100?width_0:100, this$static.scrollPanelHeight = height > 100?height:100);
}

function LoggingPopup$ScrollPanelWithMinSize_0(){
  SimplePanel_0.call(this);
  this.scrollableElem = ($clinit_DOM() , this.element);
  this.containerElem = $createDivElement($doc);
  $appendChild(this.scrollableElem, this.containerElem);
  this.scrollableElem.style['overflow'] = ($clinit_Style$Overflow() , 'auto');
  this.scrollableElem.style['position'] = ($clinit_Style$Position() , 'relative');
  this.containerElem.style['position'] = 'relative';
  $setPropertyImpl(this.scrollableElem.style, 'zoom', '1');
  $setPropertyImpl(this.containerElem.style, 'zoom', '1');
  $setTouchScrollingDisabled(this);
  (!impl_8 && (impl_8 = com_google_gwt_user_client_ui_ScrollImpl()) , impl_8).initialize(this.scrollableElem, this.containerElem);
}

defineSeed(183, 184, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$HasWidgets, Q$IsWidget, Q$UIObject, Q$Widget]), LoggingPopup$ScrollPanelWithMinSize_0);
_.scrollPanelHeight = 0;
_.scrollPanelWidth = 0;
function LoggingPopup$WindowMoveHandler_0(this$0, dragHandle){
  this.this$0 = this$0;
  LoggingPopup$MouseDragHandler_0.call(this, dragHandle);
}

defineSeed(185, 182, makeCastMap([Q$MouseDownHandler, Q$MouseMoveHandler, Q$MouseUpHandler, Q$EventHandler]), LoggingPopup$WindowMoveHandler_0);
_.handleDrag = function handleDrag(absX, absY){
  var moveTarget;
  moveTarget = this.this$0;
  $setWidgetPosition(($clinit_RootPanel() , get_0(null)), moveTarget, $getAbsoluteLeft(($clinit_DOM() , moveTarget.element)) + absX, $getAbsoluteTop(moveTarget.element) + absY);
}
;
function LoggingPopup$WindowResizeHandler_0(this$0, dragHandle){
  this.this$0 = this$0;
  LoggingPopup$MouseDragHandler_0.call(this, dragHandle);
}

defineSeed(186, 182, makeCastMap([Q$MouseDownHandler, Q$MouseMoveHandler, Q$MouseUpHandler, Q$EventHandler]), LoggingPopup$WindowResizeHandler_0);
_.handleDrag = function handleDrag_0(absX, absY){
  $incrementPixelSize(this.this$0.scrollPanel, absX, absY);
}
;
function NullLogHandler_0(){
}

defineSeed(187, 162, makeCastMap([Q$Handler]), NullLogHandler_0);
_.publish = function publish_3(record){
}
;
function SystemLogHandler_0(){
  $setFormatter(this, new TextLogFormatter_0(true));
  $setLevel(this, ($clinit_Level() , ALL));
}

defineSeed(188, 162, makeCastMap([Q$Handler]), SystemLogHandler_0);
_.publish = function publish_4(record){
  return;
}
;
function TextLogFormatter_0(showStackTraces){
  this.showStackTraces = showStackTraces;
}

defineSeed(189, 167, {}, TextLogFormatter_0);
_.format = function format_1(event_0){
  var message;
  message = new StringBuilder_0;
  $append_3(message, $getRecordInfo(event_0, '\n'));
  $append_3(message, event_0.msg);
  this.showStackTraces && !!event_0.thrown && $printStackTrace(event_0.thrown, new StackTracePrintStream_0(message));
  return message.impl.string;
}
;
_.showStackTraces = false;
function $addHandler_1(this$static, handler){
  $add_5(this$static.handlers, handler);
}

function $getEffectiveLevel(this$static){
  var effectiveLevel, logger;
  if (this$static.level) {
    return this$static.level;
  }
  logger = this$static.parent_0;
  while (logger) {
    effectiveLevel = logger.impl.level;
    if (effectiveLevel) {
      return effectiveLevel;
    }
    logger = logger.impl.parent_0;
  }
  return $clinit_Level() , INFO;
}

function $getHandlers(this$static){
  return dynamicCast($toArray(this$static.handlers, initDim(_3Ljava_util_logging_Handler_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1, Q$Handler_$1]), Q$Handler, this$static.handlers.size_0, 0)), Q$Handler_$1);
}

function $getLoggerHelper(name_0){
  var logger, manager, newLogger;
  manager = (!singleton_0 && (singleton_0 = new LogManager_0) , singleton_0);
  logger = dynamicCast($get_1(manager.loggerList, name_0), Q$Logger);
  if (!logger) {
    newLogger = new LoggerWithExposedConstructor_0(name_0);
    $addLogger(manager, newLogger);
    return newLogger;
  }
  return logger;
}

function $isLoggable(this$static, messageLevel){
  return $getEffectiveLevel(this$static).intValue_0() <= messageLevel.intValue_0();
}

function $log(this$static, level, msg, thrown){
  var record;
  if ($getEffectiveLevel(this$static).intValue_0() <= level.intValue_0()) {
    record = new LogRecord_0(level, msg);
    record.thrown = instanceOf(thrown, Q$SerializableThrowable)?dynamicCast(thrown, Q$SerializableThrowable):thrown?createSerializable(thrown):null;
    $setLoggerName(record, this$static.name_0);
    $log_0(this$static, record);
  }
}

function $log_0(this$static, record){
  var handler, handler$array, handler$array0, handler$index, handler$index0, handler$max, handler$max0, logger;
  if ($isLoggable(this$static, record.level)) {
    for (handler$array0 = dynamicCast($toArray(this$static.handlers, initDim(_3Ljava_util_logging_Handler_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1, Q$Handler_$1]), Q$Handler, this$static.handlers.size_0, 0)), Q$Handler_$1) , handler$index0 = 0 , handler$max = handler$array0.length; handler$index0 < handler$max; ++handler$index0) {
      handler = handler$array0[handler$index0];
      handler.publish(record);
    }
    logger = this$static.useParentHandlers?this$static.parent_0:null;
    while (logger) {
      for (handler$array = $getHandlers(logger.impl) , handler$index = 0 , handler$max0 = handler$array.length; handler$index < handler$max0; ++handler$index) {
        handler = handler$array[handler$index];
        handler.publish(record);
      }
      logger = logger.impl.useParentHandlers?logger.impl.parent_0:null;
    }
  }
}

function $setLevel_0(this$static, newLevel){
  this$static.level = newLevel;
}

function $setName(this$static, newName){
  this$static.name_0 = newName;
}

function $setParent_0(this$static, newParent){
  !!newParent && (this$static.parent_0 = newParent);
}

function LoggerImplRegular_0(){
  this.useParentHandlers = true;
  this.handlers = new ArrayList_0;
}

defineSeed(190, 1, {}, LoggerImplRegular_0);
_.level = null;
_.useParentHandlers = false;
function $clinit_Logger(){
  $clinit_Logger = nullMethod;
  new LoggerImplRegular_0;
}

function $log_1(this$static, level, msg){
  $log(this$static.impl, level, msg, null);
}

function $log_2(this$static, level, msg, thrown){
  $log(this$static.impl, level, msg, thrown);
}

function $setLevel_1(this$static, newLevel){
  $setLevel_0(this$static.impl, newLevel);
}

function Logger_0(name_0){
  $clinit_Logger();
  this.impl = new LoggerImplRegular_0;
  $setName(this.impl, name_0);
}

defineSeed(192, 1, makeCastMap([Q$Logger]), Logger_0);
function LoggerWithExposedConstructor_0(name_0){
  $clinit_Logger();
  Logger_0.call(this, name_0);
}

defineSeed(191, 192, makeCastMap([Q$Logger]), LoggerWithExposedConstructor_0);
function $calcNewVelocity(initialVelocity, decelFactor, oldVelocity, minDecel){
  var maxVelocityX, minVelocityX, newVelocity;
  newVelocity = initialVelocity * decelFactor;
  if (oldVelocity >= 0) {
    maxVelocityX = 0 > oldVelocity - minDecel?0:oldVelocity - minDecel;
    newVelocity = newVelocity < maxVelocityX?newVelocity:maxVelocityX;
  }
   else {
    minVelocityX = 0 < oldVelocity + minDecel?0:oldVelocity + minDecel;
    newVelocity = newVelocity > minVelocityX?newVelocity:minVelocityX;
  }
  return newVelocity;
}

function $updateState(state){
  var decelFactor, dist, elapsedMillis, ellapsedMillis, initialVelocity, minDecel, newVelocity, newVelocityX, newVelocityY, oldVelocity, position, totalEllapsedMillis;
  ellapsedMillis = state.elapsedMillis;
  totalEllapsedMillis = state.cumulativeElapsedMillis;
  initialVelocity = state.initialVelocity;
  oldVelocity = state.velocity;
  decelFactor = pow_0(0.9993, totalEllapsedMillis);
  minDecel = ellapsedMillis * 5.0E-4;
  newVelocityX = $calcNewVelocity(initialVelocity.x_0, decelFactor, oldVelocity.x_0, minDecel);
  newVelocityY = $calcNewVelocity(initialVelocity.y_0, decelFactor, oldVelocity.y_0, minDecel);
  newVelocity = new Point_0(newVelocityX, newVelocityY);
  state.velocity = newVelocity;
  elapsedMillis = state.elapsedMillis;
  dist = $mult(newVelocity, new Point_0(elapsedMillis, elapsedMillis));
  position = state.position_0;
  $setPosition(state, new Point_0(position.x_0 + dist.x_0, position.y_0 + dist.y_0));
  if (abs_0(newVelocity.x_0) < 0.02 && abs_0(newVelocity.y_0) < 0.02) {
    return false;
  }
  return true;
}

function DefaultMomentum_0(){
}

defineSeed(195, 1, {}, DefaultMomentum_0);
function $setCumulativeElapsedMillis(this$static, cumulativeElapsedMillis){
  this$static.cumulativeElapsedMillis = cumulativeElapsedMillis;
}

function $setElapsedMillis(this$static, elapsedMillis){
  this$static.elapsedMillis = elapsedMillis;
}

function $setPosition(this$static, position){
  this$static.position_0 = position;
}

function Momentum$State_0(initialPosition, initialVelocity){
  this.initialVelocity = initialVelocity;
  this.position_0 = new Point_1(initialPosition);
  this.velocity = new Point_1(initialVelocity);
}

defineSeed(196, 1, {}, Momentum$State_0);
_.cumulativeElapsedMillis = 0;
_.elapsedMillis = 0;
function $minus(this$static, c){
  return new Point_0(this$static.x_0 - c.x_0, this$static.y_0 - c.y_0);
}

function $mult(this$static, c){
  return new Point_0(this$static.x_0 * c.x_0, this$static.y_0 * c.y_0);
}

function $plus(this$static, c){
  return new Point_0(this$static.x_0 + c.x_0, this$static.y_0 + c.y_0);
}

function Point_0(x_0, y_0){
  this.x_0 = x_0;
  this.y_0 = y_0;
}

function Point_1(c){
  Point_0.call(this, c.x_0, c.y_0);
}

defineSeed(197, 1, makeCastMap([Q$Point]), Point_0, Point_1);
_.equals$ = function equals_6(obj){
  var c;
  if (!instanceOf(obj, Q$Point)) {
    return false;
  }
  c = dynamicCast(obj, Q$Point);
  return this.x_0 == c.x_0 && this.y_0 == c.y_0;
}
;
_.hashCode$ = function hashCode_8(){
  return round_int(this.x_0) ^ round_int(this.y_0);
}
;
_.toString$ = function toString_17(){
  return 'Point(' + this.x_0 + ',' + this.y_0 + ')';
}
;
_.x_0 = 0;
_.y_0 = 0;
function $calculateEndVelocity(from, to){
  var dist, time;
  time = to.time - from.time;
  if (time <= 0) {
    return null;
  }
  dist = $minus(from.point, to.point);
  return new Point_0(dist.x_0 / time, dist.y_0 / time);
}

function $cancelAll(this$static){
  this$static.touching = false;
  this$static.dragging = false;
  this$static.momentumCommand = null;
}

function $getTouchFromEvent(event_0){
  var touches;
  touches = $getTouches(event_0.nativeEvent);
  return touches.length > 0?touches[0]:null;
}

function $getWidgetScrollPosition(this$static){
  return new Point_0($getHorizontalScrollPosition(this$static.widget), $getVerticalScrollPosition(this$static.widget));
}

function $hitTest(point1, point2){
  var absDiffX, absDiffY, diff;
  diff = new Point_0(point1.x_0 - point2.x_0, point1.y_0 - point2.y_0);
  absDiffX = abs_0(diff.x_0);
  absDiffY = abs_0(diff.y_0);
  return absDiffX <= 25 && absDiffY <= 25;
}

function $isClickScrollTriggeringTouch(this$static, clickPoint){
  if (this$static.recentScrollTriggeringTouchPosition.point) {
    return $hitTest(clickPoint, this$static.recentScrollTriggeringTouchPosition.point);
  }
  return false;
}

function $isClickTouchPositionDuringMomentum(this$static, clickPoint){
  var currentTime, point, point$iterator, same;
  currentTime = currentTimeMillis();
  same = false;
  for (point$iterator = new AbstractList$IteratorImpl_0(this$static.touchPositionsDuringMomentum); point$iterator.i < point$iterator.this$0_0.size_1();) {
    point = dynamicCast($next_2(point$iterator), Q$TouchScroller$TemporalPoint);
    if (currentTime - point.time <= 2500 && $hitTest(clickPoint, point.point)) {
      same = true;
      break;
    }
  }
  return same;
}

function $onDragEnd(this$static){
  var endVelocity;
  if (!this$static.momentum) {
    return;
  }
  endVelocity = $calculateEndVelocity(this$static.recentTouchPosition, this$static.lastTouchPosition);
  if (endVelocity) {
    this$static.momentumCommand = new TouchScroller$MomentumCommand_0(this$static, endVelocity);
    scheduleFixedDelayImpl(($clinit_SchedulerImpl() , this$static.momentumCommand), 16);
  }
}

function $onTouchEnd(this$static){
  if (!this$static.touching) {
    return;
  }
  this$static.touching = false;
  if (this$static.dragging) {
    this$static.dragging = false;
    $onDragEnd(this$static);
  }
}

function $onTouchMove(this$static, event_0){
  var absDiffX, absDiffY, diff, hMax, hMin, hPosition, touch, touchPoint, touchTime, trackingTime, vMax, vPosition, diff_0, curScrollPosition;
  if (!this$static.touching) {
    return;
  }
  touch = $getTouchFromEvent(event_0);
  touchPoint = new Point_0(toInt32(($clinit_DOMImpl() , touch).pageX || 0), toInt32(touch.pageY || 0));
  touchTime = currentTimeMillis();
  $setTemporalPoint(this$static.lastTouchPosition, touchPoint, touchTime);
  if (!this$static.dragging) {
    diff = $minus(touchPoint, this$static.startTouchPosition);
    absDiffX = abs_0(diff.x_0);
    absDiffY = abs_0(diff.y_0);
    if (absDiffX > 5 || absDiffY > 5) {
      $setTemporalPoint(this$static.recentScrollTriggeringTouchPosition, this$static.recentTouchPosition.point, this$static.recentTouchPosition.time);
      if (absDiffX > absDiffY) {
        hPosition = $getHorizontalScrollPosition(this$static.widget);
        hMin = $getMinimumHorizontalScrollPosition(this$static.widget);
        hMax = $getMaximumHorizontalScrollPosition(this$static.widget);
        if (diff.x_0 < 0 && hMax <= hPosition) {
          $cancelAll(this$static);
          return;
        }
         else if (diff.x_0 > 0 && hMin >= hPosition) {
          $cancelAll(this$static);
          return;
        }
      }
       else {
        vPosition = $getVerticalScrollPosition(this$static.widget);
        vMax = $getMaximumVerticalScrollPosition(this$static.widget);
        if (diff.y_0 < 0 && vMax <= vPosition) {
          $cancelAll(this$static);
          return;
        }
         else if (diff.y_0 > 0 && 0 >= vPosition) {
          $cancelAll(this$static);
          return;
        }
      }
      this$static.dragging = true;
    }
  }
  $preventDefault(event_0.nativeEvent);
  if (this$static.dragging) {
    diff_0 = $minus(this$static.startTouchPosition, this$static.lastTouchPosition.point);
    curScrollPosition = $plus(this$static.startScrollPosition, diff_0);
    $setHorizontalScrollPosition(this$static.widget, round_int(curScrollPosition.x_0));
    $setVerticalScrollPosition(this$static.widget, round_int(curScrollPosition.y_0));
    trackingTime = touchTime - this$static.recentTouchPosition.time;
    if (trackingTime > 200 && !!this$static.recentTouchPositionOnDeck) {
      $setTemporalPoint(this$static.recentTouchPosition, this$static.recentTouchPositionOnDeck.point, this$static.recentTouchPositionOnDeck.time);
      this$static.recentTouchPositionOnDeck = null;
    }
     else 
      trackingTime > 100 && !this$static.recentTouchPositionOnDeck && (this$static.recentTouchPositionOnDeck = new TouchScroller$TemporalPoint_1(touchPoint, touchTime));
  }
}

function $onTouchStart(this$static, event_0){
  var startTouchTime, touch;
  $setTemporalPoint(this$static.recentScrollTriggeringTouchPosition, null, 0);
  if (this$static.touching) {
    return;
  }
  touch = $getTouchFromEvent(event_0);
  this$static.startTouchPosition = new Point_0(toInt32(($clinit_DOMImpl() , touch).pageX || 0), toInt32(touch.pageY || 0));
  startTouchTime = currentTimeMillis();
  $setTemporalPoint(this$static.recentTouchPosition, this$static.startTouchPosition, startTouchTime);
  $setTemporalPoint(this$static.lastTouchPosition, this$static.startTouchPosition, startTouchTime);
  this$static.recentTouchPositionOnDeck = null;
  if (this$static.momentumCommand) {
    $add_5(this$static.touchPositionsDuringMomentum, new TouchScroller$TemporalPoint_1(this$static.startTouchPosition, startTouchTime));
    scheduleFixedDelayImpl(($clinit_SchedulerImpl() , this$static.momentumTouchRemovalCommand), 2500);
  }
  this$static.startScrollPosition = new Point_0($getHorizontalScrollPosition(this$static.widget), $getVerticalScrollPosition(this$static.widget));
  $cancelAll(this$static);
  this$static.touching = true;
}

function $removeAttachHandler(this$static){
  if (this$static.attachHandlerReg) {
    $removeHandler(this$static.attachHandlerReg.real);
    this$static.attachHandlerReg = null;
  }
}

function $removeBustClickHandler(this$static){
  if (this$static.bustClickHandlerReg) {
    $removeHandler(this$static.bustClickHandlerReg.real);
    this$static.bustClickHandlerReg = null;
  }
}

function $setMomentum(this$static, momentum){
  this$static.momentum = momentum;
  !momentum && (this$static.momentumCommand = null);
}

function $setTargetWidget(this$static, widget){
  var reg, reg$iterator;
  if (this$static.widget == widget) {
    return;
  }
  $cancelAll(this$static);
  for (reg$iterator = new AbstractList$IteratorImpl_0(this$static.handlerRegs); reg$iterator.i < reg$iterator.this$0_0.size_1();) {
    reg = dynamicCast($next_2(reg$iterator), Q$HandlerRegistration);
    $removeHandler(reg.real);
  }
  $clear(this$static.handlerRegs);
  $removeAttachHandler(this$static);
  $removeBustClickHandler(this$static);
  this$static.widget = widget;
  if (widget) {
    widget.attached && ($removeBustClickHandler(this$static) , this$static.bustClickHandlerReg = addNativePreviewHandler(new TouchScroller$6_0(this$static)));
    this$static.attachHandlerReg = $addHandler(widget, new TouchScroller$1_0(this$static), (!TYPE_7 && (TYPE_7 = new GwtEvent$Type_0) , TYPE_7));
    $add_5(this$static.handlerRegs, $addDomHandler(widget, new TouchScroller$2_0(this$static), ($clinit_TouchStartEvent() , $clinit_TouchStartEvent() , TYPE_6)));
    $add_5(this$static.handlerRegs, $addDomHandler(widget, new TouchScroller$3_0(this$static), ($clinit_TouchMoveEvent() , $clinit_TouchMoveEvent() , TYPE_5)));
    $add_5(this$static.handlerRegs, $addDomHandler(widget, new TouchScroller$4_0(this$static), ($clinit_TouchEndEvent() , $clinit_TouchEndEvent() , TYPE_4)));
    $add_5(this$static.handlerRegs, $addDomHandler(widget, new TouchScroller$5_0(this$static), ($clinit_TouchCancelEvent() , $clinit_TouchCancelEvent() , TYPE_3)));
  }
}

function $setWidgetScrollPosition(this$static, position){
  $setHorizontalScrollPosition(this$static.widget, round_int(position.x_0));
  $setVerticalScrollPosition(this$static.widget, round_int(position.y_0));
}

function $setupBustClickHandler(this$static){
  $removeBustClickHandler(this$static);
  this$static.bustClickHandlerReg = addNativePreviewHandler(new TouchScroller$6_0(this$static));
}

function TouchScroller_0(){
  this.handlerRegs = new ArrayList_0;
  this.lastTouchPosition = new TouchScroller$TemporalPoint_0;
  this.recentTouchPosition = new TouchScroller$TemporalPoint_0;
  this.recentScrollTriggeringTouchPosition = new TouchScroller$TemporalPoint_0;
  this.touchPositionsDuringMomentum = new ArrayList_0;
  this.momentumTouchRemovalCommand = new TouchScroller$MomentumTouchRemovalCommand_0(this);
  $setMomentum(this, new DefaultMomentum_0);
}

defineSeed(198, 1, {}, TouchScroller_0);
_.dragging = false;
_.touching = false;
var isSupported;
function TouchScroller$1_0(this$0){
  this.this$0 = this$0;
}

defineSeed(199, 1, makeCastMap([Q$AttachEvent$Handler, Q$EventHandler]), TouchScroller$1_0);
function TouchScroller$2_0(this$0){
  this.this$0 = this$0;
}

defineSeed(200, 1, makeCastMap([Q$TouchStartHandler, Q$EventHandler]), TouchScroller$2_0);
function TouchScroller$3_0(this$0){
  this.this$0 = this$0;
}

defineSeed(201, 1, makeCastMap([Q$TouchMoveHandler, Q$EventHandler]), TouchScroller$3_0);
function TouchScroller$4_0(this$0){
  this.this$0 = this$0;
}

defineSeed(202, 1, makeCastMap([Q$TouchEndHandler, Q$EventHandler, Q$TouchScroller$4]), TouchScroller$4_0);
function TouchScroller$5_0(this$0){
  this.this$0 = this$0;
}

defineSeed(203, 1, makeCastMap([Q$TouchCancelHandler, Q$EventHandler, Q$TouchScroller$5]), TouchScroller$5_0);
function TouchScroller$6_0(this$0){
  this.this$0 = this$0;
}

defineSeed(204, 1, makeCastMap([Q$EventHandler, Q$Event$NativePreviewHandler]), TouchScroller$6_0);
_.onPreviewNativeEvent = function onPreviewNativeEvent(event_0){
  var clickPoint;
  if (1 == $getTypeInt(event_0.nativeEvent)) {
    clickPoint = new Point_0($getClientX(event_0.nativeEvent), $getClientY(event_0.nativeEvent));
    if ($isClickScrollTriggeringTouch(this.this$0, clickPoint) || $isClickTouchPositionDuringMomentum(this.this$0, clickPoint)) {
      event_0.isCanceled = true;
      $stopPropagation(event_0.nativeEvent);
      $preventDefault(event_0.nativeEvent);
    }
  }
}
;
function $finish(this$static){
  if (this$static.windowResizeHandler) {
    $removeHandler(this$static.windowResizeHandler.real);
    this$static.windowResizeHandler = null;
  }
  this$static == this$static.this$0.momentumCommand && (this$static.this$0.momentumCommand = null);
}

function TouchScroller$MomentumCommand_0(this$0, endVelocity){
  this.this$0 = this$0;
  this.duration = new Duration_0;
  this.initialPosition = $getWidgetScrollPosition(this.this$0);
  this.state = new Momentum$State_0(this.initialPosition, endVelocity);
  this.windowResizeHandler = addResizeHandler(new TouchScroller$MomentumCommand$1_0(this));
}

defineSeed(205, 1, {}, TouchScroller$MomentumCommand_0);
_.execute_0 = function execute_3(){
  var cumulativeElapsedMillis, hMax, hMin, hPos, notDone, vMax, vPos;
  if (this != this.this$0.momentumCommand) {
    $finish(this);
    return false;
  }
  cumulativeElapsedMillis = $elapsedMillis(this.duration);
  $setElapsedMillis(this.state, cumulativeElapsedMillis - this.lastElapsedMillis);
  this.lastElapsedMillis = cumulativeElapsedMillis;
  $setCumulativeElapsedMillis(this.state, cumulativeElapsedMillis);
  notDone = $updateState(this.state);
  notDone || $finish(this);
  $setWidgetScrollPosition(this.this$0, this.state.position_0);
  hPos = round_int(this.state.position_0.x_0);
  hMin = $getMinimumHorizontalScrollPosition(this.this$0.widget);
  hMax = $getMaximumHorizontalScrollPosition(this.this$0.widget);
  vMax = $getMaximumVerticalScrollPosition(this.this$0.widget);
  vPos = round_int(this.state.position_0.y_0);
  if ((vMax <= vPos || 0 >= vPos) && (hMax <= hPos || hMin >= hPos)) {
    $finish(this);
    return false;
  }
  return notDone;
}
;
_.lastElapsedMillis = 0;
function TouchScroller$MomentumCommand$1_0(this$1){
  this.this$1 = this$1;
}

defineSeed(206, 1, makeCastMap([Q$ResizeHandler, Q$EventHandler]), TouchScroller$MomentumCommand$1_0);
_.onResize = function onResize(event_0){
  $finish(this.this$1);
}
;
function TouchScroller$MomentumTouchRemovalCommand_0(this$0){
  this.this$0 = this$0;
}

defineSeed(207, 1, {}, TouchScroller$MomentumTouchRemovalCommand_0);
_.execute_0 = function execute_4(){
  var currentTime, iter, point;
  currentTime = currentTimeMillis();
  iter = new AbstractList$IteratorImpl_0(this.this$0.touchPositionsDuringMomentum);
  while (iter.i < iter.this$0_0.size_1()) {
    point = dynamicCast($next_2(iter), Q$TouchScroller$TemporalPoint);
    currentTime - point.time >= 2500 && $remove_6(iter);
  }
  return this.this$0.touchPositionsDuringMomentum.size_0 != 0;
}
;
function $setTemporalPoint(this$static, point, time){
  this$static.point = point;
  this$static.time = time;
}

function TouchScroller$TemporalPoint_0(){
}

function TouchScroller$TemporalPoint_1(point, time){
  this.point = point;
  this.time = time;
}

defineSeed(208, 1, makeCastMap([Q$TouchScroller$TemporalPoint]), TouchScroller$TemporalPoint_0, TouchScroller$TemporalPoint_1);
_.time = 0;
function $clinit_DOM(){
  $clinit_DOM = nullMethod;
  impl_5 = com_google_gwt_user_client_impl_DOMImpl();
}

function dispatchEvent_3(evt, elem){
  $clinit_DOM();
  var eventListener;
  eventListener = getEventListener_0(elem);
  if (!eventListener) {
    return false;
  }
  dispatchEvent_4(evt, elem, eventListener);
  return true;
}

function dispatchEvent_4(evt, elem, listener){
  $clinit_DOM();
  var prevCurrentEvent;
  prevCurrentEvent = currentEvent;
  currentEvent = evt;
  elem == sCaptureElem && $eventGetTypeInt(($clinit_DOMImpl() , evt).type) == 8192 && (sCaptureElem = null);
  listener.onBrowserEvent(evt);
  currentEvent = prevCurrentEvent;
}

function getFirstChild(elem){
  $clinit_DOM();
  return $getFirstChildElement_0(($clinit_DOMImpl() , elem));
}

function previewEvent(evt){
  $clinit_DOM();
  var ret;
  ret = fire_4(handlers_0, evt);
  if (!ret && !!evt) {
    ($clinit_DOMImpl() , impl_1).eventStopPropagation(evt);
    impl_1.eventPreventDefault(evt);
  }
  return ret;
}

function releaseCapture(elem){
  $clinit_DOM();
  !!sCaptureElem && elem == sCaptureElem && (sCaptureElem = null);
  impl_5.releaseCapture_0(elem);
}

function setCapture(elem){
  $clinit_DOM();
  sCaptureElem = elem;
  impl_5.setCapture_0(elem);
}

function sinkBitlessEvent(elem, eventTypeName){
  $clinit_DOM();
  impl_5.sinkBitlessEvent(elem, eventTypeName);
}

function sinkEvents(elem, eventBits){
  $clinit_DOM();
  impl_5.sinkEvents(elem, eventBits);
}

var currentEvent = null, impl_5, sCaptureElem;
function $onModuleLoad_0(){
  var allowedModes, currentMode, i_0;
  currentMode = $doc.compatMode;
  allowedModes = initValues(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$String, ['CSS1Compat']);
  for (i_0 = 0; i_0 < allowedModes.length; i_0++) {
    if ($equals(allowedModes[i_0], currentMode)) {
      return;
    }
  }
  allowedModes.length == 1 && $equals('CSS1Compat', allowedModes[0]) && $equals('BackCompat', currentMode)?"GWT no longer supports Quirks Mode (document.compatMode=' BackCompat').<br>Make sure your application's host HTML page has a Standards Mode (document.compatMode=' CSS1Compat') doctype,<br>e.g. by using &lt;!doctype html&gt; at the start of your application's HTML page.<br><br>To continue using this unsupported rendering mode and risk layout problems, suppress this message by adding<br>the following line to your*.gwt.xml module file:<br>&nbsp;&nbsp;&lt;extend-configuration-property name=\"document.compatMode\" value=\"" + currentMode + '"/&gt;':"Your *.gwt.xml module configuration prohibits the use of the current doucment rendering mode (document.compatMode=' " + currentMode + "').<br>Modify your application's host HTML page doctype, or update your custom 'document.compatMode' configuration property settings.";
}

function $getTypeInt(this$static){
  return $clinit_DOM() , $eventGetTypeInt(($clinit_DOMImpl() , this$static).type);
}

function addNativePreviewHandler(handler){
  $clinit_DOM();
  $maybeInitializeEventSystem(impl_5);
  !TYPE_11 && (TYPE_11 = new GwtEvent$Type_0);
  if (!handlers_0) {
    handlers_0 = new HandlerManager_1(null, true);
    singleton = new Event$NativePreviewEvent_0;
  }
  return $addHandler_0(handlers_0, TYPE_11, handler);
}

function getTypeInt(typeName){
  return $eventGetTypeInt(($clinit_DOM() , typeName));
}

function setEventListener(elem, listener){
  $clinit_DOM();
  setEventListener_0(elem, listener);
}

var handlers_0;
function $revive(this$static){
  this$static.dead = false;
  this$static.source = null;
  this$static.isCanceled = false;
  this$static.isConsumed = false;
  this$static.isFirstHandler = true;
  this$static.nativeEvent = null;
}

function $setNativeEvent_0(this$static, nativeEvent){
  this$static.nativeEvent = nativeEvent;
}

function Event$NativePreviewEvent_0(){
}

function fire_4(handlers, nativeEvent){
  var lastIsCanceled, lastIsConsumed, lastIsFirstHandler, lastNativeEvent, ret;
  if (!!TYPE_11 && !!handlers && $isEventHandled(handlers, TYPE_11)) {
    lastIsCanceled = singleton.isCanceled;
    lastIsConsumed = singleton.isConsumed;
    lastIsFirstHandler = singleton.isFirstHandler;
    lastNativeEvent = singleton.nativeEvent;
    $revive(singleton);
    $setNativeEvent_0(singleton, nativeEvent);
    $fireEvent_0(handlers, singleton);
    ret = !(singleton.isCanceled && !singleton.isConsumed);
    singleton.isCanceled = lastIsCanceled;
    singleton.isConsumed = lastIsConsumed;
    singleton.isFirstHandler = lastIsFirstHandler;
    singleton.nativeEvent = lastNativeEvent;
    return ret;
  }
  return true;
}

defineSeed(213, 105, {}, Event$NativePreviewEvent_0);
_.dispatch = function dispatch_11(handler){
  dynamicCast(handler, Q$Event$NativePreviewHandler).onPreviewNativeEvent(this);
  singleton.isFirstHandler = false;
}
;
_.getAssociatedType = function getAssociatedType_12(){
  return TYPE_11;
}
;
_.revive = function revive_0(){
  $revive(this);
}
;
_.isCanceled = false;
_.isConsumed = false;
_.isFirstHandler = false;
var TYPE_11, singleton;
function $clinit_History(){
  $clinit_History = nullMethod;
  impl_6 = com_google_gwt_user_client_impl_HistoryImpl();
  impl_6.init()?null:(impl_6 = null);
}

function addValueChangeHandler(handler){
  $clinit_History();
  return impl_6?$addValueChangeHandler(impl_6, handler):null;
}

var impl_6;
function $clinit_Window(){
  $clinit_Window = nullMethod;
  impl_7 = com_google_gwt_user_client_impl_WindowImpl();
}

function addCloseHandler(handler){
  $clinit_Window();
  maybeInitializeCloseHandlers();
  return addHandler(TYPE_8?TYPE_8:(TYPE_8 = new GwtEvent$Type_0), handler);
}

function addHandler(type_0, handler){
  return $addHandler_0((!handlers_1 && (handlers_1 = new Window$WindowHandlers_0) , handlers_1), type_0, handler);
}

function addResizeHandler(handler){
  $clinit_Window();
  maybeInitializeCloseHandlers();
  maybeInitializeResizeHandlers();
  return addHandler((!TYPE_9 && (TYPE_9 = new GwtEvent$Type_0) , TYPE_9), handler);
}

function maybeInitializeCloseHandlers(){
  if (!closeHandlersInitialized) {
    impl_7.initWindowCloseHandler();
    closeHandlersInitialized = true;
  }
}

function maybeInitializeResizeHandlers(){
  if (!resizeHandlersInitialized) {
    impl_7.initWindowResizeHandler();
    resizeHandlersInitialized = true;
  }
}

function onClosed(){
  $clinit_Window();
  closeHandlersInitialized && fire_1((!handlers_1 && (handlers_1 = new Window$WindowHandlers_0) , handlers_1));
}

function onClosing(){
  $clinit_Window();
  var event_0;
  if (closeHandlersInitialized) {
    event_0 = new Window$ClosingEvent_0;
    !!handlers_1 && $fireEvent_0(handlers_1, event_0);
    return null;
  }
  return null;
}

function onResize_0(){
  $clinit_Window();
  var height, width_0;
  if (resizeHandlersInitialized) {
    width_0 = $getClientWidth($doc);
    height = $getClientHeight($doc);
    if (lastResizeWidth != width_0 || lastResizeHeight != height) {
      lastResizeWidth = width_0;
      lastResizeHeight = height;
      fire_2((!handlers_1 && (handlers_1 = new Window$WindowHandlers_0) , handlers_1));
    }
  }
}

var closeHandlersInitialized = false, handlers_1, impl_7, lastResizeHeight = 0, lastResizeWidth = 0, resizeHandlersInitialized = false;
function $clinit_Window$ClosingEvent(){
  $clinit_Window$ClosingEvent = nullMethod;
  TYPE_12 = new GwtEvent$Type_0;
}

function Window$ClosingEvent_0(){
  $clinit_Window$ClosingEvent();
}

defineSeed(216, 105, {}, Window$ClosingEvent_0);
_.dispatch = function dispatch_12(handler){
  throwClassCastExceptionUnlessNull(handler);
  null.nullMethod();
}
;
_.getAssociatedType = function getAssociatedType_13(){
  return TYPE_12;
}
;
var TYPE_12;
function buildListParamMap(queryString){
  var entry, entry$iterator, kv, kvPair, kvPair$array, kvPair$index, kvPair$max, out, qs, values, regexp;
  out = new HashMap_0;
  if (queryString != null && queryString.length > 1) {
    qs = $substring(queryString, 1);
    for (kvPair$array = $split(qs, '&', 0) , kvPair$index = 0 , kvPair$max = kvPair$array.length; kvPair$index < kvPair$max; ++kvPair$index) {
      kvPair = kvPair$array[kvPair$index];
      kv = $split(kvPair, '=', 2);
      if (kv[0].length == 0) {
        continue;
      }
      values = dynamicCast(out.get_0(kv[0]), Q$List);
      if (!values) {
        values = new ArrayList_0;
        out.put(kv[0], values);
      }
      values.add_0(kv.length > 1?(throwIfNull(kv[1]) , regexp = /\+/g , decodeURIComponent(kv[1].replace(regexp, '%20'))):'');
    }
  }
  for (entry$iterator = out.entrySet_0().iterator(); entry$iterator.hasNext();) {
    entry = dynamicCast(entry$iterator.next_0(), Q$Map$Entry);
    entry.setValue(unmodifiableList(dynamicCast(entry.getValue(), Q$List)));
  }
  out = ($clinit_Collections() , new Collections$UnmodifiableMap_0(out));
  return out;
}

function ensureListParameterMap(){
  var currentQueryString;
  currentQueryString = ($clinit_Window() , impl_7).getQueryString();
  if (!listParamMap || !$equals(cachedQueryString, currentQueryString)) {
    listParamMap = buildListParamMap(currentQueryString);
    cachedQueryString = currentQueryString;
  }
}

var cachedQueryString = '', listParamMap;
function Window$WindowHandlers_0(){
  HandlerManager_0.call(this, null);
}

defineSeed(218, 125, makeCastMap([Q$HasHandlers]), Window$WindowHandlers_0);
function $eventGetTypeInt(eventType){
  switch (eventType) {
    case 'blur':
      return 4096;
    case 'change':
      return 1024;
    case 'click':
      return 1;
    case 'dblclick':
      return 2;
    case 'focus':
      return 2048;
    case 'keydown':
      return 128;
    case 'keypress':
      return 256;
    case 'keyup':
      return 512;
    case 'load':
      return 32768;
    case 'losecapture':
      return 8192;
    case 'mousedown':
      return 4;
    case 'mousemove':
      return 64;
    case 'mouseout':
      return 32;
    case 'mouseover':
      return 16;
    case 'mouseup':
      return 8;
    case 'scroll':
      return 16384;
    case 'error':
      return 65536;
    case 'DOMMouseScroll':
    case 'mousewheel':
      return 131072;
    case 'contextmenu':
      return 262144;
    case 'paste':
      return 524288;
    case 'touchstart':
      return 1048576;
    case 'touchmove':
      return 2097152;
    case 'touchend':
      return 4194304;
    case 'touchcancel':
      return 8388608;
    case 'gesturestart':
      return 16777216;
    case 'gesturechange':
      return 33554432;
    case 'gestureend':
      return 67108864;
    default:return -1;
  }
}

function $maybeInitializeEventSystem(this$static){
  if (!eventSystemIsInitialized) {
    this$static.initEventSystem();
    new DOMImpl$1_0(this$static);
    eventSystemIsInitialized = true;
  }
}

function cleanupDOM(dom){
  var allElements, elem, i_0, listener;
  allElements = $doc.getElementsByTagName('*');
  for (i_0 = 0; i_0 < allElements.length; i_0++) {
    elem = allElements[i_0];
    listener = getEventListener_0(elem);
    if (listener) {
      dom.sinkEvents(elem, 0);
      setEventListener_0(elem, null);
    }
    maybeRemoveDisposableEvent(elem);
  }
}

function getEventListener_0(elem){
  var maybeListener = elem.__listener;
  return !instanceOfJso(maybeListener) && instanceOf(maybeListener, Q$EventListener)?maybeListener:null;
}

function maybeRemoveDisposableEvent(elem){
  var diEvents = elem.__gwt_disposeEvent;
  if (diEvents) {
    for (var i_0 = 0, l_0 = diEvents.length; i_0 < l_0; i_0++) {
      var diEvent = diEvents[i_0];
      elem.removeEventListener(diEvent.event, diEvent.handler, diEvent.capture);
      elem.__gwt_disposeEvent = null;
    }
  }
}

function setEventListener_0(elem, listener){
  elem.__listener = listener;
}

defineSeed(219, 1, {});
var eventSystemIsInitialized = false;
function DOMImpl$1_0(this$0){
  this.this$0 = this$0;
}

defineSeed(220, 1, {}, DOMImpl$1_0);
function $sinkEventsImpl(elem, bits){
  var chMask = (elem.__eventBits || 0) ^ bits;
  elem.__eventBits = bits;
  if (!chMask)
    return;
  chMask & 1 && (elem.onclick = bits & 1?callDispatchEvent:null);
  chMask & 3 && (elem.ondblclick = bits & 3?callDispatchDblClickEvent:null);
  chMask & 4 && (elem.onmousedown = bits & 4?callDispatchEvent:null);
  chMask & 8 && (elem.onmouseup = bits & 8?callDispatchEvent:null);
  chMask & 16 && (elem.onmouseover = bits & 16?callDispatchEvent:null);
  chMask & 32 && (elem.onmouseout = bits & 32?callDispatchEvent:null);
  chMask & 64 && (elem.onmousemove = bits & 64?callDispatchEvent:null);
  chMask & 128 && (elem.onkeydown = bits & 128?callDispatchEvent:null);
  chMask & 256 && (elem.onkeypress = bits & 256?callDispatchEvent:null);
  chMask & 512 && (elem.onkeyup = bits & 512?callDispatchEvent:null);
  chMask & 1024 && (elem.onchange = bits & 1024?callDispatchEvent:null);
  chMask & 2048 && (elem.onfocus = bits & 2048?callDispatchEvent:null);
  chMask & 4096 && (elem.onblur = bits & 4096?callDispatchEvent:null);
  chMask & 8192 && (elem.onlosecapture = bits & 8192?callDispatchEvent:null);
  chMask & 16384 && (elem.onscroll = bits & 16384?callDispatchEvent:null);
  chMask & 32768 && (elem.nodeName == 'IFRAME'?bits & 32768?elem.attachEvent('onload', callDispatchOnLoadEvent):elem.detachEvent('onload', callDispatchOnLoadEvent):(elem.onload = bits & 32768?callDispatchUnhandledEvent:null));
  chMask & 65536 && (elem.onerror = bits & 65536?callDispatchEvent:null);
  chMask & 131072 && (elem.onmousewheel = bits & 131072?callDispatchEvent:null);
  chMask & 262144 && (elem.oncontextmenu = bits & 262144?callDispatchEvent:null);
  chMask & 524288 && (elem.onpaste = bits & 524288?callDispatchEvent:null);
}

function previewEventImpl(){
  var isCancelled = false;
  for (var i_0 = 0; i_0 < $wnd.__gwt_globalEventArray.length; i_0++) {
    !$wnd.__gwt_globalEventArray[i_0]() && (isCancelled = true);
  }
  return !isCancelled;
}

defineSeed(222, 219, {});
_.disposeEventSystem = function disposeEventSystem(){
}
;
_.initEventSystem = function initEventSystem(){
  $wnd.__gwt_globalEventArray == null && ($wnd.__gwt_globalEventArray = new Array);
  $wnd.__gwt_globalEventArray[$wnd.__gwt_globalEventArray.length] = $entry(function(){
    return previewEvent($wnd.event);
  }
  );
  var dispatchEvent_0 = $entry(function(){
    var oldEventTarget = ($clinit_DOMImpl() , currentEventTarget);
    currentEventTarget = this;
    if ($wnd.event.returnValue == null) {
      $wnd.event.returnValue = true;
      if (!previewEventImpl()) {
        currentEventTarget = oldEventTarget;
        return;
      }
    }
    var getEventListener = getEventListener_0;
    var listener, curElem = this;
    while (curElem && !(listener = getEventListener(curElem))) {
      curElem = curElem.parentElement;
    }
    listener && dispatchEvent_4($wnd.event, curElem, listener);
    currentEventTarget = oldEventTarget;
  }
  );
  var dispatchDblClickEvent = $entry(function(){
    var newEvent = $doc.createEventObject();
    $wnd.event.returnValue == null && $wnd.event.srcElement.fireEvent && $wnd.event.srcElement.fireEvent('onclick', newEvent);
    if (this.__eventBits & 2) {
      dispatchEvent_0.call(this);
    }
     else if ($wnd.event.returnValue == null) {
      $wnd.event.returnValue = true;
      previewEventImpl();
    }
  }
  );
  var dispatchUnhandledEvent = $entry(function(){
    this.__gwtLastUnhandledEvent = $wnd.event.type;
    dispatchEvent_0.call(this);
  }
  );
  var moduleName = $moduleName.replace(/\./g, '_');
  $wnd['__gwt_dispatchEvent_' + moduleName] = dispatchEvent_0;
  callDispatchEvent = (new Function('w', 'return function() { w.__gwt_dispatchEvent_' + moduleName + '.call(this) }'))($wnd);
  $wnd['__gwt_dispatchDblClickEvent_' + moduleName] = dispatchDblClickEvent;
  callDispatchDblClickEvent = (new Function('w', 'return function() { w.__gwt_dispatchDblClickEvent_' + moduleName + '.call(this)}'))($wnd);
  $wnd['__gwt_dispatchUnhandledEvent_' + moduleName] = dispatchUnhandledEvent;
  callDispatchUnhandledEvent = (new Function('w', 'return function() { w.__gwt_dispatchUnhandledEvent_' + moduleName + '.call(this)}'))($wnd);
  callDispatchOnLoadEvent = (new Function('w', 'return function() { w.__gwt_dispatchUnhandledEvent_' + moduleName + '.call(w.event.srcElement)}'))($wnd);
  var bodyDispatcher = $entry(function(){
    dispatchEvent_0.call($doc.body);
  }
  );
  var bodyDblClickDispatcher = $entry(function(){
    dispatchDblClickEvent.call($doc.body);
  }
  );
  $doc.body.attachEvent('onclick', bodyDispatcher);
  $doc.body.attachEvent('onmousedown', bodyDispatcher);
  $doc.body.attachEvent('onmouseup', bodyDispatcher);
  $doc.body.attachEvent('onmousemove', bodyDispatcher);
  $doc.body.attachEvent('onmousewheel', bodyDispatcher);
  $doc.body.attachEvent('onkeydown', bodyDispatcher);
  $doc.body.attachEvent('onkeypress', bodyDispatcher);
  $doc.body.attachEvent('onkeyup', bodyDispatcher);
  $doc.body.attachEvent('onfocus', bodyDispatcher);
  $doc.body.attachEvent('onblur', bodyDispatcher);
  $doc.body.attachEvent('ondblclick', bodyDblClickDispatcher);
  $doc.body.attachEvent('oncontextmenu', bodyDispatcher);
}
;
_.releaseCapture_0 = function releaseCapture_0(elem){
  $maybeInitializeEventSystem(this);
  elem.releaseCapture();
}
;
_.setCapture_0 = function setCapture_0(elem){
  $maybeInitializeEventSystem(this);
  elem.setCapture();
}
;
_.sinkBitlessEvent = function sinkBitlessEvent_0(elem, eventTypeName){
}
;
_.sinkEvents = function sinkEvents_0(elem, bits){
  $maybeInitializeEventSystem(this);
  $sinkEventsImpl(elem, bits);
}
;
var callDispatchDblClickEvent, callDispatchEvent, callDispatchOnLoadEvent, callDispatchUnhandledEvent;
function DOMImplIE8_2(){
}

defineSeed(221, 222, {}, DOMImplIE8_2);
function $clinit_DOMImplStandard(){
  $clinit_DOMImplStandard = nullMethod;
  bitlessEventDispatchers = {_default_:dispatchEvent_6, dragenter:dispatchDragEvent, dragover:dispatchDragEvent};
  captureEventDispatchers = {click:dispatchCapturedMouseEvent, dblclick:dispatchCapturedMouseEvent, mousedown:dispatchCapturedMouseEvent, mouseup:dispatchCapturedMouseEvent, mousemove:dispatchCapturedMouseEvent, mouseover:dispatchCapturedMouseEvent, mouseout:dispatchCapturedMouseEvent, mousewheel:dispatchCapturedMouseEvent, keydown:dispatchCapturedEvent, keyup:dispatchCapturedEvent, keypress:dispatchCapturedEvent, touchstart:dispatchCapturedMouseEvent, touchend:dispatchCapturedMouseEvent, touchmove:dispatchCapturedMouseEvent, touchcancel:dispatchCapturedMouseEvent, gesturestart:dispatchCapturedMouseEvent, gestureend:dispatchCapturedMouseEvent, gesturechange:dispatchCapturedMouseEvent};
}

function $initEventSystem(){
  dispatchEvent_5 = $entry(dispatchEvent_6);
  dispatchUnhandledEvent_0 = $entry(dispatchUnhandledEvent_1);
  var foreach = foreach_0;
  var bitlessEvents = bitlessEventDispatchers;
  foreach(bitlessEvents, function(e, fn){
    bitlessEvents[e] = $entry(fn);
  }
  );
  var captureEvents_0 = captureEventDispatchers;
  foreach(captureEvents_0, function(e, fn){
    captureEvents_0[e] = $entry(fn);
  }
  );
  foreach(captureEvents_0, function(e, fn){
    $wnd.addEventListener(e, fn, true);
  }
  );
}

function $sinkBitlessEventImpl(elem, eventTypeName){
  var dispatchMap = bitlessEventDispatchers;
  var dispatcher = dispatchMap[eventTypeName] || dispatchMap['_default_'];
  elem.addEventListener(eventTypeName, dispatcher, false);
}

function $sinkEventsImpl_0(elem, bits){
  var chMask = (elem.__eventBits || 0) ^ bits;
  elem.__eventBits = bits;
  if (!chMask)
    return;
  chMask & 1 && (elem.onclick = bits & 1?dispatchEvent_5:null);
  chMask & 2 && (elem.ondblclick = bits & 2?dispatchEvent_5:null);
  chMask & 4 && (elem.onmousedown = bits & 4?dispatchEvent_5:null);
  chMask & 8 && (elem.onmouseup = bits & 8?dispatchEvent_5:null);
  chMask & 16 && (elem.onmouseover = bits & 16?dispatchEvent_5:null);
  chMask & 32 && (elem.onmouseout = bits & 32?dispatchEvent_5:null);
  chMask & 64 && (elem.onmousemove = bits & 64?dispatchEvent_5:null);
  chMask & 128 && (elem.onkeydown = bits & 128?dispatchEvent_5:null);
  chMask & 256 && (elem.onkeypress = bits & 256?dispatchEvent_5:null);
  chMask & 512 && (elem.onkeyup = bits & 512?dispatchEvent_5:null);
  chMask & 1024 && (elem.onchange = bits & 1024?dispatchEvent_5:null);
  chMask & 2048 && (elem.onfocus = bits & 2048?dispatchEvent_5:null);
  chMask & 4096 && (elem.onblur = bits & 4096?dispatchEvent_5:null);
  chMask & 8192 && (elem.onlosecapture = bits & 8192?dispatchEvent_5:null);
  chMask & 16384 && (elem.onscroll = bits & 16384?dispatchEvent_5:null);
  chMask & 32768 && (elem.onload = bits & 32768?dispatchUnhandledEvent_0:null);
  chMask & 65536 && (elem.onerror = bits & 65536?dispatchEvent_5:null);
  chMask & 131072 && (elem.onmousewheel = bits & 131072?dispatchEvent_5:null);
  chMask & 262144 && (elem.oncontextmenu = bits & 262144?dispatchEvent_5:null);
  chMask & 524288 && (elem.onpaste = bits & 524288?dispatchEvent_5:null);
  chMask & 1048576 && (elem.ontouchstart = bits & 1048576?dispatchEvent_5:null);
  chMask & 2097152 && (elem.ontouchmove = bits & 2097152?dispatchEvent_5:null);
  chMask & 4194304 && (elem.ontouchend = bits & 4194304?dispatchEvent_5:null);
  chMask & 8388608 && (elem.ontouchcancel = bits & 8388608?dispatchEvent_5:null);
  chMask & 16777216 && (elem.ongesturestart = bits & 16777216?dispatchEvent_5:null);
  chMask & 33554432 && (elem.ongesturechange = bits & 33554432?dispatchEvent_5:null);
  chMask & 67108864 && (elem.ongestureend = bits & 67108864?dispatchEvent_5:null);
}

function dispatchCapturedEvent(evt){
  previewEvent(evt);
}

function dispatchCapturedMouseEvent(evt){
  $clinit_DOMImplStandard();
  var cancelled;
  cancelled = !previewEvent(evt);
  if (cancelled || !captureElem) {
    return;
  }
  dispatchEvent_3(evt, captureElem) && ($clinit_DOMImpl() , impl_1).eventStopPropagation(evt);
}

function dispatchDragEvent(evt){
  ($clinit_DOMImpl() , impl_1).eventPreventDefault(evt);
  dispatchEvent_6(evt);
}

function dispatchEvent_6(evt){
  var element;
  element = getFirstAncestorWithListener(evt);
  if (!element) {
    return;
  }
  dispatchEvent_4(evt, element.nodeType != 1?null:element, getEventListener_0(element));
}

function dispatchUnhandledEvent_1(evt){
  var element;
  element = ($clinit_DOMImpl() , impl_1).eventGetCurrentTarget(evt);
  $setPropertyString(element, '__gwtLastUnhandledEvent', evt.type);
  dispatchEvent_6(evt);
}

function getFirstAncestorWithListener(evt){
  var curElem;
  curElem = ($clinit_DOMImpl() , impl_1).eventGetCurrentTarget(evt);
  while (!!curElem && !getEventListener_0(curElem)) {
    curElem = curElem.parentNode;
  }
  return curElem;
}

defineSeed(225, 219, {});
_.disposeEventSystem = function disposeEventSystem_0(){
  var foreach = foreach_0;
  foreach(captureEvents, function(e, fn){
    $wnd.removeEventListener(e, fn, true);
  }
  );
}
;
_.initEventSystem = function initEventSystem_0(){
  $initEventSystem();
}
;
_.releaseCapture_0 = function releaseCapture_1(elem){
  $maybeInitializeEventSystem(this);
  captureElem == elem && (captureElem = null);
}
;
_.setCapture_0 = function setCapture_1(elem){
  $maybeInitializeEventSystem(this);
  captureElem = elem;
}
;
_.sinkBitlessEvent = function sinkBitlessEvent_1(elem, eventTypeName){
  $maybeInitializeEventSystem(this);
  this.sinkBitlessEventImpl(elem, eventTypeName);
}
;
_.sinkBitlessEventImpl = function sinkBitlessEventImpl(elem, eventTypeName){
  $sinkBitlessEventImpl(elem, eventTypeName);
}
;
_.sinkEvents = function sinkEvents_1(elem, bits){
  $maybeInitializeEventSystem(this);
  $sinkEventsImpl_0(elem, bits);
}
;
var bitlessEventDispatchers, captureElem, captureEventDispatchers, dispatchEvent_5, dispatchUnhandledEvent_0;
defineSeed(224, 225, {});
function DOMImplIE9_2(){
  $clinit_DOMImplStandard();
}

defineSeed(223, 224, {}, DOMImplIE9_2);
_.sinkBitlessEventImpl = function sinkBitlessEventImpl_0(elem, eventTypeName){
  $sinkBitlessEventImpl(elem, eventTypeName);
  $equals('dragover', eventTypeName) && $sinkBitlessEventImpl(elem, 'dragenter');
}
;
function $clinit_DOMImplMozilla(){
  $clinit_DOMImplMozilla = nullMethod;
  $clinit_DOMImplStandard();
  captureEventDispatchers['DOMMouseScroll'] = dispatchCapturedMouseEvent;
}

function $initSyntheticMouseUpEvents(){
  $wnd.addEventListener('mouseout', $entry(function(evt){
    var cap = ($clinit_DOMImplStandard() , captureElem);
    if (cap && !evt.relatedTarget) {
      if ('html' == evt.target.tagName.toLowerCase()) {
        var muEvent = $doc.createEvent('MouseEvents');
        muEvent.initMouseEvent('mouseup', true, true, $wnd, 0, evt.screenX, evt.screenY, evt.clientX, evt.clientY, evt.ctrlKey, evt.altKey, evt.shiftKey, evt.metaKey, evt.button, null);
        cap.dispatchEvent(muEvent);
      }
    }
  }
  ), true);
}

function DOMImplMozilla_2(){
  $clinit_DOMImplMozilla();
}

defineSeed(226, 225, {}, DOMImplMozilla_2);
_.initEventSystem = function initEventSystem_1(){
  $initEventSystem();
  $initSyntheticMouseUpEvents();
}
;
_.sinkEvents = function sinkEvents_2(elem, bits){
  $maybeInitializeEventSystem(this);
  $sinkEventsImpl_0(elem, bits);
  bits & 131072 && elem.addEventListener('DOMMouseScroll', ($clinit_DOMImplStandard() , dispatchEvent_5), false);
}
;
function DOMImplWebkit_2(){
  $clinit_DOMImplStandard();
}

defineSeed(227, 224, {}, DOMImplWebkit_2);
function foreach_0(map_0, fn){
  for (var e in map_0) {
    map_0.hasOwnProperty(e) && fn(e, map_0[e]);
  }
}

function $addValueChangeHandler(this$static, handler){
  return $addHandler_0(this$static.handlers, (!TYPE_10 && (TYPE_10 = new GwtEvent$Type_0) , TYPE_10), handler);
}

function $decodeFragment(encodedFragment){
  return decodeURI(encodedFragment.replace('%23', '#'));
}

function HistoryImpl_0(){
  this.handlers = new HandlerManager_0(null);
}

function setToken(token){
  token_1 = token;
}

defineSeed(229, 1, makeCastMap([Q$HasHandlers]), HistoryImpl_0);
_.decodeFragment = function decodeFragment(encodedFragment){
  return $decodeFragment(encodedFragment);
}
;
_.fireEvent_0 = function fireEvent_1(event_0){
  $fireEvent_0(this.handlers, event_0);
}
;
_.init = function init_0(){
  var token_0 = '';
  var hash_0 = $wnd.location.hash;
  hash_0.length > 0 && (token_0 = this.decodeFragment(hash_0.substring(1)));
  setToken(token_0);
  var historyImpl = this;
  historyImpl.oldHandler = $wnd.onhashchange;
  $wnd.onhashchange = $entry(function(){
    var token = '', hash = $wnd.location.hash;
    hash.length > 0 && (token = historyImpl.decodeFragment(hash.substring(1)));
    historyImpl.newItemOnEvent(token);
    var oldHandler = historyImpl.oldHandler;
    oldHandler && oldHandler();
  }
  );
  return true;
}
;
_.newItemOnEvent = function newItemOnEvent(historyToken){
  historyToken = historyToken == null?'':historyToken;
  if (!$equals(historyToken, token_1 == null?'':token_1)) {
    token_1 = historyToken;
    fire_3(this);
  }
}
;
var token_1 = '';
function HistoryImplTimer_0(){
  HistoryImpl_0.call(this);
}

defineSeed(231, 229, makeCastMap([Q$HasHandlers]));
_.init = function init_1(){
  var token_0 = '';
  var hash_0 = $wnd.location.hash;
  hash_0.length > 0 && (token_0 = this.decodeFragment(hash_0.substring(1)));
  setToken(token_0);
  var historyImpl = this;
  var checkHistory = $entry(function(){
    var token = '', hash = $wnd.location.hash;
    hash.length > 0 && (token = historyImpl.decodeFragment(hash.substring(1)));
    historyImpl.newItemOnEvent(token);
  }
  );
  var checkHistoryCycle = function(){
    setTimeout_0(checkHistoryCycle, 250);
    checkHistory();
  }
  ;
  checkHistoryCycle();
  return true;
}
;
function HistoryImplMozilla_0(){
  HistoryImplTimer_0.call(this);
}

defineSeed(230, 231, makeCastMap([Q$HasHandlers]), HistoryImplMozilla_0);
_.decodeFragment = function decodeFragment_0(encodedFragment){
  if ($wnd.navigator.userAgent.indexOf('Trident') != -1) {
    return $decodeFragment(encodedFragment);
  }
  return encodedFragment;
}
;
function HistoryImplSafari_0(){
  HistoryImplTimer_0.call(this);
}

defineSeed(232, 231, makeCastMap([Q$HasHandlers]), HistoryImplSafari_0);
function WindowImpl_0(){
}

defineSeed(233, 1, {}, WindowImpl_0);
_.getQueryString = function getQueryString(){
  return $wnd.location.search;
}
;
_.initWindowCloseHandler = function initWindowCloseHandler(){
  var oldOnBeforeUnload = this.oldOnBeforeUnload = $wnd.onbeforeunload;
  var oldOnUnload = this.oldOnUnload = $wnd.onunload;
  $wnd.onbeforeunload = function(evt){
    var ret, oldRet;
    try {
      ret = $entry(onClosing)();
    }
     finally {
      oldRet = oldOnBeforeUnload && oldOnBeforeUnload(evt);
    }
    if (ret != null) {
      return ret;
    }
    if (oldRet != null) {
      return oldRet;
    }
  }
  ;
  $wnd.onunload = $entry(function(evt){
    try {
      $clinit_Window();
      closeHandlersInitialized && fire_1((!handlers_1 && (handlers_1 = new Window$WindowHandlers_0) , handlers_1));
    }
     finally {
      oldOnUnload && oldOnUnload(evt);
      $wnd.onresize = null;
      $wnd.onscroll = null;
      $wnd.onbeforeunload = null;
      $wnd.onunload = null;
    }
  }
  );
}
;
_.initWindowResizeHandler = function initWindowResizeHandler(){
  var oldOnResize = this.oldOnResize = $wnd.onresize;
  $wnd.onresize = $entry(function(evt){
    try {
      onResize_0();
    }
     finally {
      oldOnResize && oldOnResize(evt);
    }
  }
  );
}
;
function $initHandler(initFunc, cmd){
  var scriptElem;
  scriptElem = $createScriptElement($doc, initFunc);
  $appendChild($doc.body, scriptElem);
  cmd.execute_1();
  $removeChild($doc.body, scriptElem);
}

function WindowImplIE_0(){
}

defineSeed(234, 233, {}, WindowImplIE_0);
_.getQueryString = function getQueryString_0(){
  var href_0 = $wnd.location.href;
  var hashLoc = href_0.indexOf('#');
  hashLoc >= 0 && (href_0 = href_0.substring(0, hashLoc));
  var questionLoc = href_0.indexOf('?');
  return questionLoc > 0?href_0.substring(questionLoc):'';
}
;
_.initWindowCloseHandler = function initWindowCloseHandler_0(){
  $initHandler('function __gwt_initWindowCloseHandler(beforeunload, unload) {\n  var wnd = window\n  , oldOnBeforeUnload = wnd.onbeforeunload\n  , oldOnUnload = wnd.onunload;\n  \n  wnd.onbeforeunload = function(evt) {\n    var ret, oldRet;\n    try {\n      ret = beforeunload();\n    } finally {\n      oldRet = oldOnBeforeUnload && oldOnBeforeUnload(evt);\n    }\n    // Avoid returning null as IE6 will coerce it into a string.\n    // Ensure that "" gets returned properly.\n    if (ret != null) {\n      return ret;\n    }\n    if (oldRet != null) {\n      return oldRet;\n    }\n    // returns undefined.\n  };\n  \n  wnd.onunload = function(evt) {\n    try {\n      unload();\n    } finally {\n      oldOnUnload && oldOnUnload(evt);\n      wnd.onresize = null;\n      wnd.onscroll = null;\n      wnd.onbeforeunload = null;\n      wnd.onunload = null;\n    }\n  };\n  \n  // Remove the reference once we\'ve initialize the handler\n  wnd.__gwt_initWindowCloseHandler = undefined;\n}\n', new WindowImplIE$1_0);
}
;
_.initWindowResizeHandler = function initWindowResizeHandler_0(){
  $initHandler("function __gwt_initWindowResizeHandler(resize) {\n  var wnd = window, oldOnResize = wnd.onresize;\n  \n  wnd.onresize = function(evt) {\n    try {\n      resize();\n    } finally {\n      oldOnResize && oldOnResize(evt);\n    }\n  };\n  \n  // Remove the reference once we've initialize the handler\n  wnd.__gwt_initWindowResizeHandler = undefined;\n}\n", new WindowImplIE$2_0);
}
;
function WindowImplIE$1_0(){
}

defineSeed(235, 1, {}, WindowImplIE$1_0);
_.execute_1 = function execute_5(){
  $wnd.__gwt_initWindowCloseHandler($entry(onClosing), $entry(onClosed));
}
;
function WindowImplIE$2_0(){
}

defineSeed(236, 1, {}, WindowImplIE$2_0);
_.execute_1 = function execute_6(){
  $wnd.__gwt_initWindowResizeHandler($entry(onResize_0));
}
;
function WindowImplMozilla_0(){
}

defineSeed(237, 233, {}, WindowImplMozilla_0);
function $add_0(this$static, child, container){
  $removeFromParent(child);
  $add_4(this$static.children, child);
  $clinit_DOM();
  $appendChild(container, ($clinit_PotentialElement() , $resolve(child.element)));
  $setParent(child, this$static);
}

function $remove_0(this$static, w){
  var elem;
  if (w.parent_0 != this$static) {
    return false;
  }
  try {
    $setParent(w, null);
  }
   finally {
    elem = ($clinit_DOM() , w.element);
    $removeChild($getParentElement_0(($clinit_DOMImpl() , elem)), elem);
    $remove_3(this$static.children, w);
  }
  return true;
}

function ComplexPanel_0(){
  this.children = new WidgetCollection_0(this);
}

defineSeed(239, 180, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$HasWidgets, Q$IsWidget, Q$UIObject, Q$Widget]));
_.iterator = function iterator_2(){
  return new WidgetCollection$WidgetIterator_0(this.children);
}
;
_.remove_0 = function remove_2(w){
  return $remove_0(this, w);
}
;
function $add_1(this$static, w){
  $add_0(this$static, w, ($clinit_DOM() , this$static.element));
}

function $checkWidgetParent(this$static, w){
  if (w.parent_0 != this$static) {
    throw new IllegalArgumentException_0('Widget must be a child of this panel.');
  }
}

function $remove_1(this$static, w){
  var removed;
  removed = $remove_0(this$static, w);
  removed && changeToStaticPositioning(($clinit_DOM() , w.element));
  return removed;
}

function $setWidgetPosition(this$static, w, left, top_0){
  $checkWidgetParent(this$static, w);
  this$static.setWidgetPositionImpl(w, left, top_0);
}

function $setWidgetPositionImpl(w, left, top_0){
  var h_0;
  h_0 = ($clinit_DOM() , w.element);
  if (left == -1 && top_0 == -1) {
    changeToStaticPositioning(h_0);
  }
   else {
    $setPropertyImpl(h_0.style, 'position', 'absolute');
    $setPropertyImpl(h_0.style, 'left', left + 'px');
    $setPropertyImpl(h_0.style, 'top', top_0 + 'px');
  }
}

function changeToStaticPositioning(elem){
  $setPropertyImpl(elem.style, 'left', '');
  $setPropertyImpl(elem.style, 'top', '');
  $setPropertyImpl(elem.style, 'position', '');
}

defineSeed(238, 239, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$HasWidgets, Q$IsWidget, Q$UIObject, Q$Widget]));
_.remove_0 = function remove_3(w){
  return $remove_1(this, w);
}
;
_.setWidgetPositionImpl = function setWidgetPositionImpl(w, left, top_0){
  $setWidgetPositionImpl(w, left, top_0);
}
;
function $clinit_AttachDetachException(){
  $clinit_AttachDetachException = nullMethod;
  attachCommand = new AttachDetachException$1_0;
  detachCommand = new AttachDetachException$2_0;
}

function AttachDetachException_0(causes){
  UmbrellaException_2.call(this, causes);
}

function tryCommand(hasWidgets, c){
  $clinit_AttachDetachException();
  var caught, e, w, w$iterator;
  caught = null;
  for (w$iterator = hasWidgets.iterator(); w$iterator.hasNext();) {
    w = dynamicCast(w$iterator.next_0(), Q$Widget);
    try {
      c.execute_2(w);
    }
     catch ($e0) {
      $e0 = wrap($e0);
      if (instanceOf($e0, Q$Throwable)) {
        e = $e0;
        !caught && (caught = new HashSet_0);
        $add_6(caught, e);
      }
       else 
        throw unwrap($e0);
    }
  }
  if (caught) {
    throw new AttachDetachException_0(caught);
  }
}

defineSeed(240, 130, makeCastMap([Q$UmbrellaException, Q$Serializable, Q$Throwable]), AttachDetachException_0);
var attachCommand, detachCommand;
function AttachDetachException$1_0(){
}

defineSeed(241, 1, {}, AttachDetachException$1_0);
_.execute_2 = function execute_7(w){
  w.onAttach();
}
;
function AttachDetachException$2_0(){
}

defineSeed(242, 1, {}, AttachDetachException$2_0);
_.execute_2 = function execute_8(w){
  w.onDetach();
}
;
function $setText(this$static, text_0){
  $setInnerText(($clinit_DOM() , this$static.element), text_0);
}

function ButtonBase_0(elem){
  $setElement_0(this, ($clinit_DOM() , elem));
}

defineSeed(244, 17, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$IsWidget, Q$UIObject, Q$Widget]));
function Button_0(){
  $clinit_FocusWidget();
  ButtonBase_0.call(this, $createPushButtonElement($doc));
  $setClassName(($clinit_DOM() , this.element), 'gwt-Button');
  $setInnerHTML(this.element, 'Minimize');
}

defineSeed(243, 244, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$IsWidget, Q$UIObject, Q$Widget]), Button_0);
function $setCellHorizontalAlignment(td, align_0){
  $setPropertyString(($clinit_DOM() , td), 'align', align_0.textAlignString);
}

function $setCellVerticalAlignment(td, align_0){
  $setCellVerticalAlignment_0(($clinit_DOM() , td), align_0);
}

function $setCellVerticalAlignment_0(td, align_0){
  $setPropertyImpl(td.style, 'verticalAlign', align_0.verticalAlignString);
}

function CellPanel_0(){
  ComplexPanel_0.call(this);
  this.table = ($clinit_DOM() , $createTableElement($doc));
  this.body_0 = $createTBodyElement($doc);
  $appendChild(this.table, ($clinit_PotentialElement() , $resolve(this.body_0)));
  $setElement(this, this.table);
}

defineSeed(245, 239, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$HasWidgets, Q$IsWidget, Q$UIObject, Q$Widget]));
function $initWidget(this$static, widget){
  var elem;
  if (this$static.widget) {
    throw new IllegalStateException_1('Composite.initWidget() may only be called once.');
  }
  instanceOf(widget, Q$IsRenderable) && dynamicCast(widget, Q$IsRenderable);
  $removeFromParent(widget);
  elem = ($clinit_DOM() , widget.element);
  $setElement_0(this$static, elem);
  isPotential(elem) && $setResolver(($clinit_PotentialElement() , elem), this$static);
  this$static.widget = widget;
  $setParent(widget, this$static);
}

defineSeed(246, 18, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$IsRenderable, Q$IsWidget, Q$UIObject, Q$Widget]));
_.isAttached = function isAttached_0(){
  if (this.widget) {
    return this.widget.isAttached();
  }
  return false;
}
;
_.onAttach = function onAttach_2(){
  if (this.eventsToSink != -1) {
    $sinkEvents(this.widget, this.eventsToSink);
    this.eventsToSink = -1;
  }
  this.widget.onAttach();
  $clinit_DOM();
  setEventListener_0(this.element, this);
  fire_0(this, true);
}
;
_.onBrowserEvent = function onBrowserEvent_0(event_0){
  $onBrowserEvent(this, event_0);
  this.widget.onBrowserEvent(event_0);
}
;
_.onDetach = function onDetach_1(){
  try {
    fire_0(this, false);
  }
   finally {
    this.widget.onDetach();
  }
}
;
_.resolvePotentialElement = function resolvePotentialElement_0(){
  $setElement_0(this, ($clinit_DOM() , this.widget.resolvePotentialElement()));
  return this.element;
}
;
function $setTextOrHtml(this$static, content_0, isHtml){
  isHtml?$setInnerHTML(this$static.element, content_0):$setInnerText(this$static.element, content_0);
  if (this$static.textDir != this$static.initialElementDir) {
    this$static.textDir = this$static.initialElementDir;
    setDirectionOnElement(this$static.element, this$static.initialElementDir);
  }
}

function DirectionalTextHelper_0(element){
  this.element = element;
  this.initialElementDir = getDirectionOnElement(element);
  this.textDir = this.initialElementDir;
}

defineSeed(247, 1, {}, DirectionalTextHelper_0);
function $setAutoHorizontalAlignment(this$static, autoAlignment){
  this$static.autoHorizontalAlignment = autoAlignment;
  $updateHorizontalAlignment(this$static);
}

function $updateHorizontalAlignment(this$static){
  var align_0;
  !this$static.autoHorizontalAlignment?(align_0 = null):this$static.autoHorizontalAlignment?(align_0 = this$static.autoHorizontalAlignment):(align_0 = this$static.autoHorizontalAlignment == ($clinit_HasAutoHorizontalAlignment() , ALIGN_CONTENT_START)?startOf(this$static.directionalTextHelper.textDir):endOf(this$static.directionalTextHelper.textDir));
  if (align_0 != this$static.horzAlign) {
    this$static.horzAlign = align_0;
    ($clinit_DOM() , this$static.element).style['textAlign'] = !this$static.horzAlign?'':this$static.horzAlign.textAlignString;
  }
}

function LabelBase_0(element){
  $setElement_0(this, ($clinit_DOM() , element));
  this.directionalTextHelper = new DirectionalTextHelper_0(this.element);
}

defineSeed(250, 18, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$IsWidget, Q$UIObject, Q$Widget]));
function Label_0(element){
  LabelBase_0.call(this, element, $equalsIgnoreCase('span', ($clinit_DOMImpl() , impl_1).getTagName(element)));
}

function Label_1(text_0){
  LabelBase_0.call(this, $createDivElement($doc));
  $setClassName(($clinit_DOM() , this.element), 'gwt-Label');
  $setTextOrHtml(this.directionalTextHelper, text_0, false);
  $updateHorizontalAlignment(this);
}

defineSeed(249, 250, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$IsWidget, Q$UIObject, Q$Widget]), Label_1);
function HTML_0(html){
  Label_0.call(this, $createDivElement($doc));
  $setClassName(($clinit_DOM() , this.element), 'gwt-HTML');
  $setTextOrHtml(this.directionalTextHelper, html, true);
  $updateHorizontalAlignment(this);
}

defineSeed(248, 249, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$IsWidget, Q$UIObject, Q$Widget]), HTML_0);
function $clinit_HasAutoHorizontalAlignment(){
  $clinit_HasAutoHorizontalAlignment = nullMethod;
  ALIGN_CONTENT_START = new HasHorizontalAlignment$AutoHorizontalAlignmentConstant_0;
}

var ALIGN_CONTENT_START;
function $clinit_HasHorizontalAlignment(){
  $clinit_HasHorizontalAlignment = nullMethod;
  new HasHorizontalAlignment$HorizontalAlignmentConstant_0(($clinit_Style$TextAlign() , 'center'));
  new HasHorizontalAlignment$HorizontalAlignmentConstant_0('justify');
  ALIGN_LEFT = new HasHorizontalAlignment$HorizontalAlignmentConstant_0('left');
  ALIGN_RIGHT = new HasHorizontalAlignment$HorizontalAlignmentConstant_0('right');
  ALIGN_LOCALE_START = ALIGN_LEFT;
  ALIGN_LOCALE_END = ALIGN_RIGHT;
  ALIGN_DEFAULT = ALIGN_LOCALE_START;
}

var ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_LOCALE_END, ALIGN_LOCALE_START, ALIGN_RIGHT;
function HasHorizontalAlignment$AutoHorizontalAlignmentConstant_0(){
}

defineSeed(251, 1, {}, HasHorizontalAlignment$AutoHorizontalAlignmentConstant_0);
function HasHorizontalAlignment$HorizontalAlignmentConstant_0(textAlignString){
  this.textAlignString = textAlignString;
}

function endOf(direction){
  return direction == ($clinit_HasDirection$Direction() , LTR)?($clinit_HasHorizontalAlignment() , ALIGN_RIGHT):direction == RTL?($clinit_HasHorizontalAlignment() , ALIGN_LEFT):($clinit_HasHorizontalAlignment() , ALIGN_LOCALE_END);
}

function startOf(direction){
  return direction == ($clinit_HasDirection$Direction() , LTR)?($clinit_HasHorizontalAlignment() , ALIGN_LEFT):direction == RTL?($clinit_HasHorizontalAlignment() , ALIGN_RIGHT):($clinit_HasHorizontalAlignment() , ALIGN_LOCALE_START);
}

defineSeed(252, 251, {}, HasHorizontalAlignment$HorizontalAlignmentConstant_0);
function $clinit_HasVerticalAlignment(){
  $clinit_HasVerticalAlignment = nullMethod;
  ALIGN_BOTTOM = new HasVerticalAlignment$VerticalAlignmentConstant_0('bottom');
  new HasVerticalAlignment$VerticalAlignmentConstant_0('middle');
  ALIGN_TOP = new HasVerticalAlignment$VerticalAlignmentConstant_0('top');
}

var ALIGN_BOTTOM, ALIGN_TOP;
function HasVerticalAlignment$VerticalAlignmentConstant_0(verticalAlignString){
  this.verticalAlignString = verticalAlignString;
}

defineSeed(253, 1, {}, HasVerticalAlignment$VerticalAlignmentConstant_0);
function $add_2(this$static, w){
  var td, td_0;
  td = (td_0 = ($clinit_DOM() , $createTDElement($doc)) , $setCellHorizontalAlignment(td_0, this$static.horzAlign) , $setCellVerticalAlignment(td_0, this$static.vertAlign) , td_0);
  $appendChild(this$static.tableRow, ($clinit_PotentialElement() , $resolve(td)));
  $add_0(this$static, w, td);
}

function $setVerticalAlignment(this$static, align_0){
  this$static.vertAlign = align_0;
}

function HorizontalPanel_0(){
  CellPanel_0.call(this);
  this.horzAlign = ($clinit_HasHorizontalAlignment() , ALIGN_DEFAULT);
  this.vertAlign = ($clinit_HasVerticalAlignment() , ALIGN_TOP);
  this.tableRow = ($clinit_DOM() , $createTRElement($doc));
  $appendChild(this.body_0, ($clinit_PotentialElement() , $resolve(this.tableRow)));
  $setPropertyString(this.table, 'cellSpacing', '0');
  $setPropertyString(this.table, 'cellPadding', '0');
}

defineSeed(254, 245, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$HasWidgets, Q$IsWidget, Q$UIObject, Q$Widget]), HorizontalPanel_0);
_.remove_0 = function remove_4(w){
  var removed, td;
  td = ($clinit_DOM() , $clinit_DOM() , $getParentElement(w.element));
  removed = $remove_0(this, w);
  removed && $removeChild(this.tableRow, td);
  return removed;
}
;
function $onResize(){
  var height, style, width_0, winHeight, winWidth;
  style = null.nullMethod();
  winWidth = ($clinit_Window() , $getClientWidth($doc));
  winHeight = $getClientHeight($doc);
  $setPropertyImpl(style, 'display', ($clinit_Style$Display() , 'none'));
  style['width'] = 0 + ($clinit_Style$Unit() , 'px');
  style['height'] = '0px';
  width_0 = $getScrollWidth($doc);
  height = $getScrollHeight($doc);
  style['width'] = (width_0 > winWidth?width_0:winWidth) + 'px';
  style['height'] = (height > winHeight?height:winHeight) + 'px';
  $setPropertyImpl(style, 'display', 'block');
}

function PopupPanel$1_0(){
}

defineSeed(255, 1, makeCastMap([Q$ResizeHandler, Q$EventHandler]), PopupPanel$1_0);
_.onResize = function onResize_1(event_0){
  $onResize();
}
;
function PopupPanel$3_0(this$0){
  this.this$0 = this$0;
}

defineSeed(256, 1, makeCastMap([Q$EventHandler, Q$Event$NativePreviewHandler]), PopupPanel$3_0);
_.onPreviewNativeEvent = function onPreviewNativeEvent_0(event_0){
  $previewNativeEvent(this.this$0, event_0);
}
;
function PopupPanel$4_0(this$0){
  this.this$0 = this$0;
}

defineSeed(257, 1, makeCastMap([Q$ValueChangeHandler, Q$EventHandler]), PopupPanel$4_0);
function $maybeShowGlass(this$static){
  if (this$static.showing) {
    if (this$static.curPanel.isGlassEnabled) {
      $appendChild($doc.body, this$static.curPanel.glass);
      $clinit_PopupPanel();
      this$static.resizeRegistration = addResizeHandler(this$static.curPanel.glassResizer);
      $onResize();
      this$static.glassShowing = true;
    }
  }
   else if (this$static.glassShowing) {
    $removeChild($doc.body, this$static.curPanel.glass);
    $clinit_PopupPanel();
    $removeHandler(this$static.resizeRegistration.real);
    this$static.resizeRegistration = null;
    this$static.glassShowing = false;
  }
}

function $onComplete(this$static){
  if (!this$static.showing) {
    $maybeShowGlass(this$static);
    this$static.isUnloading || $remove_1(($clinit_RootPanel() , get_0(null)), this$static.curPanel);
    $clinit_PopupPanel();
    $getElement(this$static.curPanel);
  }
  ($clinit_PopupPanel() , impl_4).setClip($getElement(this$static.curPanel), 'rect(auto, auto, auto, auto)');
  $setPropertyImpl($getElement(this$static.curPanel).style, 'overflow', 'visible');
}

function $onInstantaneousRun(this$static){
  $maybeShowGlass(this$static);
  if (this$static.showing) {
    $setPropertyImpl($getElement(this$static.curPanel).style, 'position', 'absolute');
    this$static.curPanel.topPosition != -1 && $setPopupPosition(this$static.curPanel, this$static.curPanel.leftPosition, this$static.curPanel.topPosition);
    $add_1(($clinit_RootPanel() , get_0(null)), this$static.curPanel);
    $clinit_PopupPanel();
    $getElement(this$static.curPanel);
  }
   else {
    this$static.isUnloading || $remove_1(($clinit_RootPanel() , get_0(null)), this$static.curPanel);
    $clinit_PopupPanel();
    $getElement(this$static.curPanel);
  }
  $setPropertyImpl($getElement(this$static.curPanel).style, 'overflow', 'visible');
}

function $onUpdate(this$static, progress){
  var bottom, height, left, right, top_0, width_0;
  this$static.showing || (progress = 1 - progress);
  top_0 = 0;
  left = 0;
  right = 0;
  bottom = 0;
  height = round_int(progress * this$static.offsetHeight);
  width_0 = round_int(progress * this$static.offsetWidth_0);
  switch (0) {
    case 2:
    case 0:
      top_0 = ~~(this$static.offsetHeight - height) >> 1;
      left = ~~(this$static.offsetWidth_0 - width_0) >> 1;
      right = left + width_0;
      bottom = top_0 + height;
  }
  ($clinit_PopupPanel() , impl_4).setClip($getElement(this$static.curPanel), 'rect(' + top_0 + 'px, ' + right + 'px, ' + bottom + 'px, ' + left + 'px)');
}

function $setState(this$static, showing, isUnloading){
  this$static.isUnloading = isUnloading;
  $cancel(this$static);
  this$static.curPanel.showing = showing;
  $updateHandlers(this$static.curPanel);
  this$static.showing = showing;
  $onInstantaneousRun(this$static);
}

function PopupPanel$ResizeAnimation_0(panel){
  Animation_0.call(this, ($clinit_AnimationSchedulerImpl() , INSTANCE));
  this.curPanel = null;
  this.offsetWidth_0 = -1;
  this.curPanel = panel;
}

defineSeed(258, 3, {}, PopupPanel$ResizeAnimation_0);
_.glassShowing = false;
_.isUnloading = false;
_.offsetHeight = 0;
_.offsetWidth_0 = 0;
_.showing = false;
function $clinit_PotentialElement(){
  $clinit_PotentialElement = nullMethod;
  declareShim();
}

function $resolve(this$static){
  return this$static.__gwt_resolve?this$static.__gwt_resolve():this$static;
}

function $setResolver(this$static, resolver){
  this$static.__gwt_resolve = buildResolveCallback(resolver);
}

function buildResolveCallback(resolver){
  return function(){
    this.__gwt_resolve = cannotResolveTwice;
    return resolver.resolvePotentialElement();
  }
  ;
}

function cannotResolveTwice(){
  throw 'A PotentialElement cannot be resolved twice.';
}

function declareShim(){
  var shim = function(){
  }
  ;
  shim.prototype = {className:'', clientHeight:0, clientWidth:0, dir:'', getAttribute:function(name_0, value_0){
    return this[name_0];
  }
  , href:'', id:'', lang:'', nodeType:1, removeAttribute:function(name_0, value_0){
    this[name_0] = undefined;
  }
  , setAttribute:function(name_0, value_0){
    this[name_0] = value_0;
  }
  , src:'', style:{}, title:''};
  $wnd.GwtPotentialElementShim = shim;
}

function isPotential(o){
  $clinit_PotentialElement();
  try {
    return !!o && !!o.__gwt_resolve;
  }
   catch (e) {
    return false;
  }
}

function $clinit_RootPanel(){
  $clinit_RootPanel = nullMethod;
  maybeDetachCommand = new RootPanel$1_0;
  rootPanels = new HashMap_0;
  widgetsToDetach = new HashSet_0;
}

function RootPanel_0(elem){
  ComplexPanel_0.call(this);
  $setElement_0(this, ($clinit_DOM() , elem));
  $onAttach(this);
}

function detachNow(widget){
  $clinit_RootPanel();
  try {
    widget.onDetach();
  }
   finally {
    $remove_9(widgetsToDetach, widget);
  }
}

function detachWidgets(){
  $clinit_RootPanel();
  try {
    tryCommand(widgetsToDetach, maybeDetachCommand);
  }
   finally {
    $clearImpl(widgetsToDetach.map_0);
    $clearImpl(rootPanels);
  }
}

function get_0(id_0){
  $clinit_RootPanel();
  var elem, rp;
  rp = dynamicCast($get_1(rootPanels, id_0), Q$RootPanel);
  elem = null;
  if (id_0 != null) {
    if (!(elem = $getElementById($doc, id_0))) {
      return null;
    }
  }
  if (rp) {
    if (!elem || ($clinit_DOM() , rp.element) == elem) {
      return rp;
    }
  }
  rootPanels.size_0 == 0 && addCloseHandler(new RootPanel$3_0);
  !elem?(rp = new RootPanel$DefaultRootPanel_0):(rp = new RootPanel_0(elem));
  $put(rootPanels, id_0, rp);
  $add_6(widgetsToDetach, rp);
  return rp;
}

defineSeed(260, 238, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$HasWidgets, Q$IsWidget, Q$RootPanel, Q$UIObject, Q$Widget]), RootPanel_0);
var maybeDetachCommand, rootPanels, widgetsToDetach;
function RootPanel$1_0(){
}

defineSeed(261, 1, {}, RootPanel$1_0);
_.execute_2 = function execute_9(w){
  w.isAttached() && w.onDetach();
}
;
function RootPanel$3_0(){
}

defineSeed(262, 1, makeCastMap([Q$CloseHandler, Q$EventHandler]), RootPanel$3_0);
function RootPanel$DefaultRootPanel_0(){
  RootPanel_0.call(this, $doc.body);
}

defineSeed(263, 260, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$HasWidgets, Q$IsWidget, Q$RootPanel, Q$UIObject, Q$Widget]), RootPanel$DefaultRootPanel_0);
_.setWidgetPositionImpl = function setWidgetPositionImpl_0(w, left, top_0){
  left -= $getBodyOffsetLeft($doc);
  top_0 -= $getBodyOffsetTop($doc);
  $setWidgetPositionImpl(w, left, top_0);
}
;
function $getMaximumHorizontalScrollPosition_0(this$static, scrollable){
  return this$static.isRtl(scrollable)?0:($getSubPixelScrollWidth(scrollable) | 0) - (scrollable.clientWidth | 0);
}

function $getMinimumHorizontalScrollPosition_0(this$static, scrollable){
  return this$static.isRtl(scrollable)?(scrollable.clientWidth | 0) - ($getSubPixelScrollWidth(scrollable) | 0):0;
}

function ScrollImpl_0(){
}

defineSeed(264, 1, {}, ScrollImpl_0);
_.initialize = function initialize(scrollable, container){
}
;
_.isRtl = function isRtl(scrollable){
  var computedStyle = $doc.defaultView.getComputedStyle(scrollable, null);
  return computedStyle.getPropertyValue('direction') == 'rtl';
}
;
var impl_8;
function ScrollImpl$ScrollImplTrident_0(){
  initStaticHandlers();
}

function initStaticHandlers(){
  scrollHandler = function(){
    var scrollableElem = $wnd.event.srcElement;
    scrollableElem.__lastScrollTop = scrollableElem.scrollTop;
    scrollableElem.__lastScrollLeft = scrollableElem.scrollLeft;
  }
  ;
  resizeHandler = function(){
    var scrollableElem = $wnd.event.srcElement;
    scrollableElem.__isScrollContainer && (scrollableElem = scrollableElem.parentNode);
    setTimeout($entry(function(){
      if (scrollableElem.scrollTop != scrollableElem.__lastScrollTop || scrollableElem.scrollLeft != scrollableElem.__lastScrollLeft) {
        scrollableElem.__lastScrollTop = scrollableElem.scrollTop;
        scrollableElem.__lastScrollLeft = scrollableElem.scrollLeft;
        triggerScrollEvent(scrollableElem);
      }
    }
    ), 1);
  }
  ;
}

function triggerScrollEvent(elem){
  $dispatchEvent(elem, $createScrollEvent($doc));
}

defineSeed(265, 264, {}, ScrollImpl$ScrollImplTrident_0);
_.initialize = function initialize_0(scrollable, container){
  scrollable.__lastScrollTop = scrollable.__lastScrollLeft = 0;
  scrollable.attachEvent('onscroll', scrollHandler);
  scrollable.attachEvent('onresize', resizeHandler);
  container.attachEvent('onresize', resizeHandler);
  container.__isScrollContainer = true;
}
;
_.isRtl = function isRtl_0(scrollable){
  return scrollable.currentStyle.direction == 'rtl';
}
;
var resizeHandler, scrollHandler;
function $next(this$static){
  if (!this$static.hasElement || !this$static.this$0.widget) {
    throw new NoSuchElementException_0;
  }
  this$static.hasElement = false;
  return this$static.returned = this$static.this$0.widget;
}

function SimplePanel$1_0(this$0){
  this.this$0 = this$0;
  this.hasElement = !!this.this$0.widget;
}

defineSeed(266, 1, {}, SimplePanel$1_0);
_.hasNext = function hasNext(){
  return this.hasElement;
}
;
_.next_0 = function next_0(){
  return $next(this);
}
;
_.remove_1 = function remove_5(){
  !!this.returned && $remove(this.this$0, this.returned);
}
;
_.hasElement = false;
_.returned = null;
function $add_3(this$static, w){
  var td, tr, td_0;
  tr = ($clinit_DOM() , $createTRElement($doc));
  td = (td_0 = $createTDElement($doc) , $setCellHorizontalAlignment(td_0, this$static.horzAlign) , $setCellVerticalAlignment(td_0, this$static.vertAlign) , td_0);
  $appendChild(tr, ($clinit_PotentialElement() , $resolve(td)));
  $appendChild(this$static.body_0, $resolve(tr));
  $add_0(this$static, w, td);
}

function VerticalPanel_0(){
  CellPanel_0.call(this);
  this.horzAlign = ($clinit_HasHorizontalAlignment() , ALIGN_DEFAULT);
  this.vertAlign = ($clinit_HasVerticalAlignment() , ALIGN_TOP);
  $setPropertyString(($clinit_DOM() , this.table), 'cellSpacing', '0');
  $setPropertyString(this.table, 'cellPadding', '0');
}

defineSeed(267, 245, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$HasWidgets, Q$IsWidget, Q$UIObject, Q$Widget]), VerticalPanel_0);
_.remove_0 = function remove_6(w){
  var removed, td;
  td = ($clinit_DOM() , $clinit_DOM() , $getParentElement(w.element));
  removed = $remove_0(this, w);
  removed && $removeChild(this.body_0, $getParentElement_0(($clinit_DOMImpl() , td)));
  return removed;
}
;
function $add_4(this$static, w){
  $insert(this$static, w, this$static.size_0);
}

function $indexOf(this$static, w){
  var i_0;
  for (i_0 = 0; i_0 < this$static.size_0; ++i_0) {
    if (this$static.array[i_0] == w) {
      return i_0;
    }
  }
  return -1;
}

function $insert(this$static, w, beforeIndex){
  var i_0, i0, newArray;
  if (beforeIndex < 0 || beforeIndex > this$static.size_0) {
    throw new IndexOutOfBoundsException_0;
  }
  if (this$static.size_0 == this$static.array.length) {
    newArray = initDim(_3Lcom_google_gwt_user_client_ui_Widget_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Widget, this$static.array.length * 2, 0);
    for (i0 = 0; i0 < this$static.array.length; ++i0) {
      setCheck(newArray, i0, this$static.array[i0]);
    }
    this$static.array = newArray;
  }
  ++this$static.size_0;
  for (i_0 = this$static.size_0 - 1; i_0 > beforeIndex; --i_0) {
    setCheck(this$static.array, i_0, this$static.array[i_0 - 1]);
  }
  setCheck(this$static.array, beforeIndex, w);
}

function $remove_2(this$static, index_0){
  var i_0;
  if (index_0 < 0 || index_0 >= this$static.size_0) {
    throw new IndexOutOfBoundsException_0;
  }
  --this$static.size_0;
  for (i_0 = index_0; i_0 < this$static.size_0; ++i_0) {
    setCheck(this$static.array, i_0, this$static.array[i_0 + 1]);
  }
  setCheck(this$static.array, this$static.size_0, null);
}

function $remove_3(this$static, w){
  var index_0;
  index_0 = $indexOf(this$static, w);
  if (index_0 == -1) {
    throw new NoSuchElementException_0;
  }
  $remove_2(this$static, index_0);
}

function WidgetCollection_0(parent_0){
  this.parent_0 = parent_0;
  this.array = initDim(_3Lcom_google_gwt_user_client_ui_Widget_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Widget, 4, 0);
}

defineSeed(268, 1, {}, WidgetCollection_0);
_.iterator = function iterator_3(){
  return new WidgetCollection$WidgetIterator_0(this);
}
;
_.size_0 = 0;
function $next_0(this$static){
  if (this$static.index_0 >= this$static.this$0.size_0) {
    throw new NoSuchElementException_0;
  }
  this$static.currentWidget = this$static.this$0.array[this$static.index_0];
  ++this$static.index_0;
  return this$static.currentWidget;
}

function WidgetCollection$WidgetIterator_0(this$0){
  this.this$0 = this$0;
}

defineSeed(269, 1, {}, WidgetCollection$WidgetIterator_0);
_.hasNext = function hasNext_0(){
  return this.index_0 < this.this$0.size_0;
}
;
_.next_0 = function next_1(){
  return $next_0(this);
}
;
_.remove_1 = function remove_7(){
  if (!this.currentWidget) {
    throw new IllegalStateException_0;
  }
  this.this$0.parent_0.remove_0(this.currentWidget);
  --this.index_0;
  this.currentWidget = null;
}
;
_.index_0 = 0;
function $clinit_FocusImpl(){
  $clinit_FocusImpl = nullMethod;
  implPanel = com_google_gwt_user_client_ui_impl_FocusImpl();
  implWidget = instanceOf(implPanel, Q$FocusImplStandard)?new FocusImpl_0:implPanel;
}

function $getTabIndex(elem){
  return ($clinit_DOMImpl() , impl_1).getTabIndex(elem);
}

function FocusImpl_0(){
}

defineSeed(270, 1, {}, FocusImpl_0);
_.focus_0 = function focus_0(elem){
  elem.focus();
}
;
var implPanel, implWidget;
function FocusImplIE6_0(){
  $clinit_FocusImpl();
}

defineSeed(271, 270, {}, FocusImplIE6_0);
_.focus_0 = function focus_1(elem){
  try {
    elem.focus();
  }
   catch (e) {
    if (!elem || !elem.focus) {
      throw e;
    }
  }
}
;
function FocusImplStandard_0(){
  $clinit_FocusImpl();
}

defineSeed(273, 270, makeCastMap([Q$FocusImplStandard]), FocusImplStandard_0);
function FocusImplSafari_0(){
  $clinit_FocusImpl();
}

defineSeed(272, 273, makeCastMap([Q$FocusImplStandard]), FocusImplSafari_0);
_.focus_0 = function focus_2(elem){
  $wnd.setTimeout(function(){
    elem.focus();
  }
  , 0);
}
;
function PopupImpl_0(){
}

defineSeed(274, 1, {}, PopupImpl_0);
_.createElement_1 = function createElement_1(){
  return $createDivElement($doc);
}
;
_.getContainerElement_0 = function getContainerElement_2(popup){
  return popup;
}
;
_.getStyleElement = function getStyleElement(popup){
  return $getParentElement_0(($clinit_DOMImpl() , popup));
}
;
_.setClip = function setClip(popup, rect){
  $setPropertyImpl(popup.style, 'clip', rect);
}
;
function $clinit_PopupImplMozilla(){
  $clinit_PopupImplMozilla = nullMethod;
  isFF2Mac = isFF2Mac_0();
}

function PopupImplMozilla_0(){
  $clinit_PopupImplMozilla();
}

function isFF2Mac_0(){
  function makeVersion(result){
    return parseInt(result[1]) * 1000 + parseInt(result[2]);
  }

  var ua = navigator.userAgent;
  if (ua.indexOf('Macintosh') != -1) {
    var result_0 = /rv:([0-9]+)\.([0-9]+)/.exec(ua);
    if (result_0 && result_0.length == 3) {
      if (makeVersion(result_0) <= 1008) {
        return true;
      }
    }
  }
  return false;
}

defineSeed(275, 274, {}, PopupImplMozilla_0);
_.createElement_1 = function createElement_2(){
  var outerElem;
  outerElem = ($clinit_DOM() , $createDivElement($doc));
  if (isFF2Mac) {
    $setInnerHTML(outerElem, '<div><\/div>');
    $scheduleDeferred(($clinit_SchedulerImpl() , INSTANCE_0), new PopupImplMozilla$1_0(outerElem));
  }
  return outerElem;
}
;
_.getContainerElement_0 = function getContainerElement_3(outerElem){
  return isFF2Mac?$getFirstChildElement_0(($clinit_DOMImpl() , outerElem)):outerElem;
}
;
_.getStyleElement = function getStyleElement_0(outerElem){
  return isFF2Mac?outerElem:$getParentElement_0(($clinit_DOMImpl() , outerElem));
}
;
_.setClip = function setClip_0(popup, rect){
  $setPropertyImpl(popup.style, 'clip', rect);
  $setPropertyImpl(popup.style, 'display', ($clinit_Style$Display() , 'none'));
  $setPropertyImpl(popup.style, 'display', '');
}
;
var isFF2Mac = false;
function PopupImplMozilla$1_0(val$outerElem){
  this.val$outerElem = val$outerElem;
}

defineSeed(276, 1, {}, PopupImplMozilla$1_0);
_.execute_1 = function execute_10(){
  this.val$outerElem.style['overflow'] = ($clinit_Style$Overflow() , 'auto');
}
;
function UserAgentImplGecko1_8_0(){
}

defineSeed(278, 1, makeCastMap([Q$UserAgent]), UserAgentImplGecko1_8_0);
_.getCompileTimeValue = function getCompileTimeValue(){
  return 'gecko1_8';
}
;
_.getRuntimeValue = function getRuntimeValue(){
  var ua = navigator.userAgent.toLowerCase();
  var makeVersion = function(result){
    return parseInt(result[1]) * 1000 + parseInt(result[2]);
  }
  ;
  if (function(){
    return ua.indexOf('webkit') != -1;
  }
  ())
    return 'safari';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 10;
  }
  ())
    return 'ie10';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 9;
  }
  ())
    return 'ie9';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 8;
  }
  ())
    return 'ie8';
  if (function(){
    return ua.indexOf('gecko') != -1;
  }
  ())
    return 'gecko1_8';
  return 'unknown';
}
;
function UserAgentImplIe10_0(){
}

defineSeed(279, 1, makeCastMap([Q$UserAgent]), UserAgentImplIe10_0);
_.getCompileTimeValue = function getCompileTimeValue_0(){
  return 'ie10';
}
;
_.getRuntimeValue = function getRuntimeValue_0(){
  var ua = navigator.userAgent.toLowerCase();
  var makeVersion = function(result){
    return parseInt(result[1]) * 1000 + parseInt(result[2]);
  }
  ;
  if (function(){
    return ua.indexOf('webkit') != -1;
  }
  ())
    return 'safari';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 10;
  }
  ())
    return 'ie10';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 9;
  }
  ())
    return 'ie9';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 8;
  }
  ())
    return 'ie8';
  if (function(){
    return ua.indexOf('gecko') != -1;
  }
  ())
    return 'gecko1_8';
  return 'unknown';
}
;
function UserAgentImplIe8_0(){
}

defineSeed(280, 1, makeCastMap([Q$UserAgent]), UserAgentImplIe8_0);
_.getCompileTimeValue = function getCompileTimeValue_1(){
  return 'ie8';
}
;
_.getRuntimeValue = function getRuntimeValue_1(){
  var ua = navigator.userAgent.toLowerCase();
  var makeVersion = function(result){
    return parseInt(result[1]) * 1000 + parseInt(result[2]);
  }
  ;
  if (function(){
    return ua.indexOf('webkit') != -1;
  }
  ())
    return 'safari';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 10;
  }
  ())
    return 'ie10';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 9;
  }
  ())
    return 'ie9';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 8;
  }
  ())
    return 'ie8';
  if (function(){
    return ua.indexOf('gecko') != -1;
  }
  ())
    return 'gecko1_8';
  return 'unknown';
}
;
function UserAgentImplIe9_0(){
}

defineSeed(281, 1, makeCastMap([Q$UserAgent]), UserAgentImplIe9_0);
_.getCompileTimeValue = function getCompileTimeValue_2(){
  return 'ie9';
}
;
_.getRuntimeValue = function getRuntimeValue_2(){
  var ua = navigator.userAgent.toLowerCase();
  var makeVersion = function(result){
    return parseInt(result[1]) * 1000 + parseInt(result[2]);
  }
  ;
  if (function(){
    return ua.indexOf('webkit') != -1;
  }
  ())
    return 'safari';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 10;
  }
  ())
    return 'ie10';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 9;
  }
  ())
    return 'ie9';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 8;
  }
  ())
    return 'ie8';
  if (function(){
    return ua.indexOf('gecko') != -1;
  }
  ())
    return 'gecko1_8';
  return 'unknown';
}
;
function UserAgentImplSafari_0(){
}

defineSeed(282, 1, makeCastMap([Q$UserAgent]), UserAgentImplSafari_0);
_.getCompileTimeValue = function getCompileTimeValue_3(){
  return 'safari';
}
;
_.getRuntimeValue = function getRuntimeValue_3(){
  var ua = navigator.userAgent.toLowerCase();
  var makeVersion = function(result){
    return parseInt(result[1]) * 1000 + parseInt(result[2]);
  }
  ;
  if (function(){
    return ua.indexOf('webkit') != -1;
  }
  ())
    return 'safari';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 10;
  }
  ())
    return 'ie10';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 9;
  }
  ())
    return 'ie9';
  if (function(){
    return ua.indexOf('msie') != -1 && $doc.documentMode >= 8;
  }
  ())
    return 'ie8';
  if (function(){
    return ua.indexOf('gecko') != -1;
  }
  ())
    return 'gecko1_8';
  return 'unknown';
}
;
function $removeHandler(this$static){
  $doRemove(this$static.this$0, this$static.val$type, this$static.val$source, this$static.val$handler);
}

function SimpleEventBus$1_0(this$0, val$type, val$handler){
  this.this$0 = this$0;
  this.val$type = val$type;
  this.val$source = null;
  this.val$handler = val$handler;
}

defineSeed(283, 1, {}, SimpleEventBus$1_0);
function SimpleEventBus$2_0(this$0, val$type, val$handler){
  this.this$0 = this$0;
  this.val$type = val$type;
  this.val$source = null;
  this.val$handler = val$handler;
}

defineSeed(284, 1, makeCastMap([Q$SimpleEventBus$Command]), SimpleEventBus$2_0);
_.execute_1 = function execute_11(){
  $doAddNow(this.this$0, this.val$type, this.val$source, this.val$handler);
}
;
function SimpleEventBus$3_0(this$0, val$type, val$source, val$handler){
  this.this$0 = this$0;
  this.val$type = val$type;
  this.val$source = val$source;
  this.val$handler = val$handler;
}

defineSeed(285, 1, makeCastMap([Q$SimpleEventBus$Command]), SimpleEventBus$3_0);
_.execute_1 = function execute_12(){
  $doRemoveNow(this.this$0, this.val$type, this.val$source, this.val$handler);
}
;
function ArithmeticException_0(){
  RuntimeException_1.call(this, 'divide by zero');
}

defineSeed(286, 26, makeCastMap([Q$Serializable, Q$Throwable]), ArithmeticException_0);
function ArrayStoreException_0(){
  RuntimeException_0.call(this);
}

function ArrayStoreException_1(message){
  RuntimeException_1.call(this, message);
}

defineSeed(287, 26, makeCastMap([Q$Serializable, Q$Throwable]), ArrayStoreException_0, ArrayStoreException_1);
function $clinit_Boolean(){
  $clinit_Boolean = nullMethod;
  FALSE_0 = new Boolean_1(false);
  TRUE_0 = new Boolean_1(true);
}

function $compareTo_0(this$static, b){
  return compare(this$static.value_0, b.value_0);
}

function Boolean_1(value_0){
  this.value_0 = value_0;
}

function compare(x_0, y_0){
  return x_0 == y_0?0:x_0?1:-1;
}

defineSeed(288, 1, makeCastMap([Q$Serializable, Q$Boolean, Q$Comparable]), Boolean_1);
_.compareTo$ = function compareTo_0(b){
  return $compareTo_0(this, dynamicCast(b, Q$Boolean));
}
;
_.equals$ = function equals_7(o){
  return instanceOf(o, Q$Boolean) && dynamicCast(o, Q$Boolean).value_0 == this.value_0;
}
;
_.hashCode$ = function hashCode_9(){
  return this.value_0?1231:1237;
}
;
_.toString$ = function toString_18(){
  return this.value_0?'true':'false';
}
;
_.value_0 = false;
var FALSE_0, TRUE_0;
defineSeed(290, 1, makeCastMap([Q$Serializable, Q$Number]));
function $compareTo_1(this$static, b){
  return this$static.value_0 - b.value_0;
}

function Byte_0(value_0){
  this.value_0 = value_0;
}

function valueOf(b){
  var rebase, result;
  rebase = b + 128;
  result = ($clinit_Byte$BoxedValues() , boxedValues_0)[rebase];
  !result && (result = boxedValues_0[rebase] = new Byte_0(b));
  return result;
}

defineSeed(289, 290, makeCastMap([Q$Serializable, Q$Byte, Q$Comparable, Q$Number]), Byte_0);
_.compareTo$ = function compareTo_1(b){
  return $compareTo_1(this, dynamicCast(b, Q$Byte));
}
;
_.equals$ = function equals_8(o){
  return instanceOf(o, Q$Byte) && dynamicCast(o, Q$Byte).value_0 == this.value_0;
}
;
_.hashCode$ = function hashCode_10(){
  return this.value_0;
}
;
_.toString$ = function toString_19(){
  return '' + this.value_0;
}
;
_.value_0 = 0;
function $clinit_Byte$BoxedValues(){
  $clinit_Byte$BoxedValues = nullMethod;
  boxedValues_0 = initDim(_3Ljava_lang_Byte_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Byte, 256, 0);
}

var boxedValues_0;
function Class_0(){
}

function createForArray(packageName, className, seedId, componentType){
  var clazz;
  clazz = new Class_0;
  clazz.typeName = packageName + className;
  isInstantiable(seedId != 0?-seedId:0) && setClassLiteral(seedId != 0?-seedId:0, clazz);
  clazz.modifiers = 4;
  clazz.componentType = componentType;
  return clazz;
}

function createForClass(packageName, className, seedId){
  var clazz;
  clazz = new Class_0;
  clazz.typeName = packageName + className;
  isInstantiable(seedId) && setClassLiteral(seedId, clazz);
  return clazz;
}

function createForEnum(packageName, className, seedId, enumConstantsFunc){
  var clazz;
  clazz = new Class_0;
  clazz.typeName = packageName + className;
  isInstantiable(seedId) && setClassLiteral(seedId, clazz);
  clazz.modifiers = enumConstantsFunc?8:0;
  return clazz;
}

function createForInterface(packageName, className){
  var clazz;
  clazz = new Class_0;
  clazz.typeName = packageName + className;
  isInstantiable(0) && setClassLiteral(0, clazz);
  clazz.modifiers = 2;
  return clazz;
}

function createForPrimitive(className, seedId){
  var clazz;
  clazz = new Class_0;
  clazz.typeName = '' + className;
  isInstantiable(seedId) && setClassLiteral(seedId, clazz);
  clazz.modifiers = 1;
  return clazz;
}

function getSeedFunction(clazz){
  var func = seedTable[clazz.seedId];
  clazz = null;
  return func;
}

function isInstantiable(seedId){
  return typeof seedId == 'number' && seedId > 0;
}

function setClassLiteral(seedId, clazz){
  var proto;
  clazz.seedId = seedId;
  if (seedId == 2) {
    proto = String.prototype;
  }
   else {
    if (seedId > 0) {
      var seed = getSeedFunction(clazz);
      if (seed) {
        proto = seed.prototype;
      }
       else {
        seed = seedTable[seedId] = function(){
        }
        ;
        seed.___clazz$ = clazz;
        return;
      }
    }
     else {
      return;
    }
  }
  proto.___clazz$ = clazz;
}

defineSeed(292, 1, {}, Class_0);
_.toString$ = function toString_20(){
  return ((this.modifiers & 2) != 0?'interface ':(this.modifiers & 1) != 0?'':'class ') + this.typeName;
}
;
_.modifiers = 0;
_.seedId = 0;
function ClassCastException_0(){
  RuntimeException_0.call(this);
}

defineSeed(293, 26, makeCastMap([Q$Serializable, Q$Throwable]), ClassCastException_0);
function $clinit_Double(){
  $clinit_Double = nullMethod;
  powers = initValues(_3D_classLit, makeCastMap([Q$Serializable]), -1, [1.3407807929942597E154, 1.157920892373162E77, 3.4028236692093846E38, 1.8446744073709552E19, 4294967296, 65536, 256, 16, 4, 2]);
  invPowers = initValues(_3D_classLit, makeCastMap([Q$Serializable]), -1, [7.458340731200207E-155, 8.636168555094445E-78, 2.9387358770557188E-39, 5.421010862427522E-20, 2.3283064365386963E-10, 1.52587890625E-5, 0.00390625, 0.0625, 0.25, 0.5]);
}

function $compareTo_2(this$static, b){
  return compare_0(this$static.value_0, b.value_0);
}

function Double_0(value_0){
  $clinit_Double();
  this.value_0 = value_0;
}

function compare_0(x_0, y_0){
  if (x_0 < y_0) {
    return -1;
  }
  if (x_0 > y_0) {
    return 1;
  }
  if (x_0 == y_0) {
    return 0;
  }
  return isNaN_0(x_0)?isNaN_0(y_0)?0:1:-1;
}

function doubleToLongBits(value_0){
  $clinit_Double();
  var bit, exp_0, i_0, ihi, ilo, negative;
  if (isNaN_0(value_0)) {
    return P7ff8000000000000_longLit;
  }
  negative = false;
  if (value_0 == 0) {
    return 1 / value_0 == -Infinity?N8000000000000000_longLit:P0_longLit;
  }
  if (value_0 < 0) {
    negative = true;
    value_0 = -value_0;
  }
  if (!isFinite(value_0) && !isNaN(value_0)) {
    return negative?N10000000000000_longLit:P7ff0000000000000_longLit;
  }
  exp_0 = 0;
  if (value_0 < 1) {
    bit = 512;
    for (i_0 = 0; i_0 < 10; ++i_0 , bit >>= 1) {
      if (value_0 < invPowers[i_0] && exp_0 - bit >= -1023) {
        value_0 *= powers[i_0];
        exp_0 -= bit;
      }
    }
    if (value_0 < 1 && exp_0 - 1 >= -1023) {
      value_0 *= 2;
      --exp_0;
    }
  }
   else if (value_0 >= 2) {
    bit = 512;
    for (i_0 = 0; i_0 < 10; ++i_0 , bit >>= 1) {
      if (value_0 >= powers[i_0]) {
        value_0 *= invPowers[i_0];
        exp_0 += bit;
      }
    }
  }
  exp_0 > -1023?(value_0 -= 1):(value_0 *= 0.5);
  ihi = fromDouble(value_0 * 1048576);
  value_0 -= toDouble(ihi) * 9.5367431640625E-7;
  ilo = fromDouble(value_0 * 4503599627370496);
  ihi = or(ihi, fromInt(exp_0 + 1023 << 20));
  negative && (ihi = or(ihi, P80000000_longLit));
  return or(shl(ihi, 32), ilo);
}

function isNaN_0(x_0){
  $clinit_Double();
  return isNaN(x_0);
}

defineSeed(294, 290, makeCastMap([Q$Serializable, Q$Comparable, Q$Double, Q$Number]), Double_0);
_.compareTo$ = function compareTo_2(b){
  return $compareTo_2(this, dynamicCast(b, Q$Double));
}
;
_.equals$ = function equals_9(o){
  return instanceOf(o, Q$Double) && dynamicCast(o, Q$Double).value_0 == this.value_0;
}
;
_.hashCode$ = function hashCode_11(){
  return round_int(this.value_0);
}
;
_.toString$ = function toString_21(){
  return '' + this.value_0;
}
;
_.value_0 = 0;
var invPowers, powers;
function IllegalArgumentException_0(message){
  RuntimeException_1.call(this, message);
}

defineSeed(295, 26, makeCastMap([Q$Serializable, Q$Throwable]), IllegalArgumentException_0);
function IllegalStateException_0(){
  RuntimeException_0.call(this);
}

function IllegalStateException_1(s){
  RuntimeException_1.call(this, s);
}

defineSeed(296, 26, makeCastMap([Q$Serializable, Q$Throwable]), IllegalStateException_0, IllegalStateException_1);
function IndexOutOfBoundsException_0(){
  RuntimeException_0.call(this);
}

function IndexOutOfBoundsException_1(message){
  RuntimeException_1.call(this, message);
}

defineSeed(297, 26, makeCastMap([Q$Serializable, Q$Throwable]), IndexOutOfBoundsException_0, IndexOutOfBoundsException_1);
function $compareTo_3(this$static, b){
  return compare_1(this$static.value_0, b.value_0);
}

function Integer_0(value_0){
  this.value_0 = value_0;
}

function compare_1(x_0, y_0){
  return x_0 < y_0?-1:x_0 > y_0?1:0;
}

function numberOfLeadingZeros_0(i_0){
  var m_0, n, y_0;
  if (i_0 < 0) {
    return 0;
  }
   else if (i_0 == 0) {
    return 32;
  }
   else {
    y_0 = -(~~i_0 >> 16);
    m_0 = ~~y_0 >> 16 & 16;
    n = 16 - m_0;
    i_0 = ~~i_0 >> m_0;
    y_0 = i_0 - 256;
    m_0 = ~~y_0 >> 16 & 8;
    n += m_0;
    i_0 <<= m_0;
    y_0 = i_0 - 4096;
    m_0 = ~~y_0 >> 16 & 4;
    n += m_0;
    i_0 <<= m_0;
    y_0 = i_0 - 16384;
    m_0 = ~~y_0 >> 16 & 2;
    n += m_0;
    i_0 <<= m_0;
    y_0 = ~~i_0 >> 14;
    m_0 = y_0 & ~(~~y_0 >> 1);
    return n + 2 - m_0;
  }
}

function numberOfTrailingZeros(i_0){
  var r, rtn;
  if (i_0 == 0) {
    return 32;
  }
   else {
    rtn = 0;
    for (r = 1; (r & i_0) == 0; r <<= 1) {
      ++rtn;
    }
    return rtn;
  }
}

function toPowerOfTwoString(value_0){
  var buf, digits, pos;
  buf = initDim(_3C_classLit, makeCastMap([Q$Serializable]), -1, 8, 1);
  digits = ($clinit_Number$__Digits() , digits_0);
  pos = 7;
  if (value_0 >= 0) {
    while (value_0 > 15) {
      buf[pos--] = digits[value_0 & 15];
      value_0 >>= 4;
    }
  }
   else {
    while (pos > 0) {
      buf[pos--] = digits[value_0 & 15];
      value_0 >>= 4;
    }
  }
  buf[pos] = digits[value_0 & 15];
  return __valueOf(buf, pos, 8);
}

function valueOf_0(i_0){
  var rebase, result;
  if (i_0 > -129 && i_0 < 128) {
    rebase = i_0 + 128;
    result = ($clinit_Integer$BoxedValues() , boxedValues_1)[rebase];
    !result && (result = boxedValues_1[rebase] = new Integer_0(i_0));
    return result;
  }
  return new Integer_0(i_0);
}

defineSeed(298, 290, makeCastMap([Q$Serializable, Q$Comparable, Q$Integer, Q$Number]), Integer_0);
_.compareTo$ = function compareTo_3(b){
  return $compareTo_3(this, dynamicCast(b, Q$Integer));
}
;
_.equals$ = function equals_10(o){
  return instanceOf(o, Q$Integer) && dynamicCast(o, Q$Integer).value_0 == this.value_0;
}
;
_.hashCode$ = function hashCode_12(){
  return this.value_0;
}
;
_.toString$ = function toString_22(){
  return '' + this.value_0;
}
;
_.value_0 = 0;
function $clinit_Integer$BoxedValues(){
  $clinit_Integer$BoxedValues = nullMethod;
  boxedValues_1 = initDim(_3Ljava_lang_Integer_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Integer, 256, 0);
}

var boxedValues_1;
function $compareTo_4(this$static, b){
  return compare_2(this$static.value_0, b.value_0);
}

function Long_0(value_0){
  this.value_0 = value_0;
}

function compare_2(x_0, y_0){
  return lt(x_0, y_0)?-1:gt(x_0, y_0)?1:0;
}

function signum(i_0){
  return eq(i_0, P0_longLit)?0:lt(i_0, P0_longLit)?-1:1;
}

function valueOf_1(i_0){
  var rebase, result;
  if (gt(i_0, N81_longLit) && lt(i_0, P80_longLit)) {
    rebase = toInt(i_0) + 128;
    result = ($clinit_Long$BoxedValues() , boxedValues_2)[rebase];
    !result && (result = boxedValues_2[rebase] = new Long_0(i_0));
    return result;
  }
  return new Long_0(i_0);
}

defineSeed(300, 290, makeCastMap([Q$Serializable, Q$Comparable, Q$Long, Q$Number]), Long_0);
_.compareTo$ = function compareTo_4(b){
  return $compareTo_4(this, dynamicCast(b, Q$Long));
}
;
_.equals$ = function equals_11(o){
  return instanceOf(o, Q$Long) && eq(dynamicCast(o, Q$Long).value_0, this.value_0);
}
;
_.hashCode$ = function hashCode_13(){
  return toInt(this.value_0);
}
;
_.toString$ = function toString_23(){
  return '' + toString_16(this.value_0);
}
;
_.value_0 = P0_longLit;
function $clinit_Long$BoxedValues(){
  $clinit_Long$BoxedValues = nullMethod;
  boxedValues_2 = initDim(_3Ljava_lang_Long_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Long, 256, 0);
}

var boxedValues_2;
function abs_0(x_0){
  return x_0 <= 0?0 - x_0:x_0;
}

function acos_0(x_0){
  return Math.acos(x_0);
}

function asin_0(x_0){
  return Math.asin(x_0);
}

function atan2_0(y_0, x_0){
  return Math.atan2(y_0, x_0);
}

function ceil_0(x_0){
  return Math.ceil(x_0);
}

function cos_0(x_0){
  return Math.cos(x_0);
}

function log10(x_0){
  return Math.log(x_0) * Math.LOG10E;
}

function max_1(x_0, y_0){
  return x_0 > y_0?x_0:y_0;
}

function pow_0(x_0, exp_0){
  return Math.pow(x_0, exp_0);
}

function round_0(x_0){
  return Math.round(x_0);
}

function sin_0(x_0){
  return Math.sin(x_0);
}

function sqrt_0(x_0){
  return Math.sqrt(x_0);
}

function NullPointerException_0(){
  RuntimeException_0.call(this);
}

function NullPointerException_1(message){
  RuntimeException_1.call(this, message);
}

defineSeed(303, 26, makeCastMap([Q$Serializable, Q$Throwable]), NullPointerException_0, NullPointerException_1);
function $clinit_Number$__Digits(){
  $clinit_Number$__Digits = nullMethod;
  digits_0 = initValues(_3C_classLit, makeCastMap([Q$Serializable]), -1, [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]);
}

var digits_0;
function StackTraceElement_0(methodName, fileName, lineNumber){
  this.className_0 = 'Unknown';
  this.methodName = methodName;
  this.fileName = fileName;
  this.lineNumber = lineNumber;
}

defineSeed(305, 1, makeCastMap([Q$Serializable, Q$StackTraceElement]), StackTraceElement_0);
_.toString$ = function toString_24(){
  return this.className_0 + '.' + this.methodName + '(' + (this.fileName != null?this.fileName:'Unknown Source') + (this.lineNumber >= 0?':' + this.lineNumber:'') + ')';
}
;
_.lineNumber = 0;
function $charAt(this$static, index_0){
  return this$static.charCodeAt(index_0);
}

function $equals(this$static, other){
  if (!instanceOf(other, Q$String)) {
    return false;
  }
  return String(this$static) == other;
}

function $equalsIgnoreCase(this$static, other){
  if (other == null)
    return false;
  return this$static == other || this$static.toLowerCase() == other.toLowerCase();
}

function $indexOf_0(this$static, str){
  return this$static.indexOf(str);
}

function $lastIndexOf(this$static, str){
  return this$static.lastIndexOf(str);
}

function $lastIndexOf_0(this$static, str, start_0){
  return this$static.lastIndexOf(str, start_0);
}

function $replace(this$static, from, to){
  var regex, replacement;
  regex = $replaceAll(from, '([/\\\\\\.\\*\\+\\?\\|\\(\\)\\[\\]\\{\\}$^])', '\\\\$1');
  replacement = $replaceAll($replaceAll(to, '\\\\', '\\\\\\\\'), '\\$', '\\\\$');
  return $replaceAll(this$static, regex, replacement);
}

function $replaceAll(this$static, regex, replace){
  replace = __translateReplaceString(replace);
  return this$static.replace(RegExp(regex, 'g'), replace);
}

function $split(this$static, regex, maxMatch){
  var compiled = new RegExp(regex, 'g');
  var out = [];
  var count = 0;
  var trail = this$static;
  var lastTrail = null;
  while (true) {
    var matchObj = compiled.exec(trail);
    if (matchObj == null || trail == '' || count == maxMatch - 1 && maxMatch > 0) {
      out[count] = trail;
      break;
    }
     else {
      out[count] = trail.substring(0, matchObj.index);
      trail = trail.substring(matchObj.index + matchObj[0].length, trail.length);
      compiled.lastIndex = 0;
      if (lastTrail == trail) {
        out[count] = trail.substring(0, 1);
        trail = trail.substring(1);
      }
      lastTrail = trail;
      count++;
    }
  }
  if (maxMatch == 0 && this$static.length > 0) {
    var lastNonEmpty = out.length;
    while (lastNonEmpty > 0 && out[lastNonEmpty - 1] == '') {
      --lastNonEmpty;
    }
    lastNonEmpty < out.length && out.splice(lastNonEmpty, out.length - lastNonEmpty);
  }
  var jr = __createArray(out.length);
  for (var i_0 = 0; i_0 < out.length; ++i_0) {
    jr[i_0] = out[i_0];
  }
  return jr;
}

function $substring(this$static, beginIndex){
  return this$static.substr(beginIndex, this$static.length - beginIndex);
}

function $substring_0(this$static, beginIndex, endIndex){
  return this$static.substr(beginIndex, endIndex - beginIndex);
}

function $trim(this$static){
  if (this$static.length == 0 || this$static[0] > ' ' && this$static[this$static.length - 1] > ' ') {
    return this$static;
  }
  var r1 = this$static.replace(/^(\s*)/, '');
  var r2 = r1.replace(/\s*$/, '');
  return r2;
}

function __createArray(numElements){
  return initDim(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$String, numElements, 0);
}

function __translateReplaceString(replaceStr){
  var pos;
  pos = 0;
  while (0 <= (pos = replaceStr.indexOf('\\', pos))) {
    replaceStr.charCodeAt(pos + 1) == 36?(replaceStr = $substring_0(replaceStr, 0, pos) + '$' + $substring(replaceStr, ++pos)):(replaceStr = $substring_0(replaceStr, 0, pos) + $substring(replaceStr, ++pos));
  }
  return replaceStr;
}

function __valueOf(x_0, start_0, end){
  x_0 = x_0.slice(start_0, end);
  return String.fromCharCode.apply(null, x_0);
}

function compareTo_6(thisStr, otherStr){
  thisStr = String(thisStr);
  if (thisStr == otherStr) {
    return 0;
  }
  return thisStr < otherStr?-1:1;
}

function fromCharCode(ch_0){
  return String.fromCharCode(ch_0);
}

function fromCodePoint(codePoint){
  var hiSurrogate, loSurrogate;
  if (codePoint >= 65536) {
    hiSurrogate = 55296 + (~~(codePoint - 65536) >> 10 & 1023) & 65535;
    loSurrogate = 56320 + (codePoint - 65536 & 1023) & 65535;
    return fromCharCode(hiSurrogate) + fromCharCode(loSurrogate);
  }
   else {
    return String.fromCharCode(codePoint & 65535);
  }
}

_ = String.prototype;
_.castableTypeMap$ = makeCastMap([Q$String, Q$Serializable, Q$CharSequence, Q$Comparable]);
_.compareTo$ = function compareTo_5(other){
  return compareTo_6(this, dynamicCast(other, Q$String));
}
;
_.equals$ = function equals_12(other){
  return $equals(this, other);
}
;
_.hashCode$ = function hashCode_14(){
  return getHashCode_0(this);
}
;
_.toString$ = _.toString;
function $clinit_String$HashCache(){
  $clinit_String$HashCache = nullMethod;
  back_0 = {};
  front = {};
}

function compute(str){
  var hashCode, i_0, n, nBatch;
  hashCode = 0;
  n = str.length;
  nBatch = n - 4;
  i_0 = 0;
  while (i_0 < nBatch) {
    hashCode = str.charCodeAt(i_0 + 3) + 31 * (str.charCodeAt(i_0 + 2) + 31 * (str.charCodeAt(i_0 + 1) + 31 * (str.charCodeAt(i_0) + 31 * hashCode))) | 0;
    i_0 += 4;
  }
  while (i_0 < n) {
    hashCode = hashCode * 31 + $charAt(str, i_0++);
  }
  return hashCode | 0;
}

function getHashCode_0(str){
  $clinit_String$HashCache();
  var key = ':' + str;
  var result = front[key];
  if (result != null) {
    return result;
  }
  result = back_0[key];
  result == null && (result = compute(str));
  increment();
  return front[key] = result;
}

function increment(){
  if (count_0 == 256) {
    back_0 = front;
    front = {};
    count_0 = 0;
  }
  ++count_0;
}

var back_0, count_0 = 0, front;
function $append_1(this$static, x_0){
  $append(this$static.impl, x_0);
  return this$static;
}

function $append_2(this$static, x_0){
  $append_0(this$static.impl, x_0);
  return this$static;
}

function StringBuffer_0(){
  this.impl = new StringBufferImplAppend_0;
}

defineSeed(307, 1, makeCastMap([Q$CharSequence]), StringBuffer_0);
_.toString$ = function toString_25(){
  return this.impl.string;
}
;
function $$init(this$static){
  this$static.impl = new StringBufferImplAppend_0;
}

function $append_3(this$static, x_0){
  $append_0(this$static.impl, x_0);
  return this$static;
}

function StringBuilder_0(){
  $$init(this);
}

function StringBuilder_1(s){
  $$init(this);
  $append_0(this.impl, s);
}

defineSeed(308, 1, makeCastMap([Q$CharSequence]), StringBuilder_0, StringBuilder_1);
_.toString$ = function toString_26(){
  return this.impl.string;
}
;
function arraycopy(src_0, srcOfs, dest, destOfs, len){
  var destArray, destComp, destEnd, destType, destlen, srcArray, srcComp, srcType, srclen;
  if (src_0 == null || dest == null) {
    throw new NullPointerException_0;
  }
  srcType = getClass__devirtual$(src_0);
  destType = getClass__devirtual$(dest);
  if ((srcType.modifiers & 4) == 0 || (destType.modifiers & 4) == 0) {
    throw new ArrayStoreException_1('Must be array types');
  }
  srcComp = srcType.componentType;
  destComp = destType.componentType;
  if (!((srcComp.modifiers & 1) != 0?srcComp == destComp:(destComp.modifiers & 1) == 0)) {
    throw new ArrayStoreException_1('Array types must match');
  }
  srclen = src_0.length;
  destlen = dest.length;
  if (srcOfs < 0 || destOfs < 0 || len < 0 || srcOfs + len > srclen || destOfs + len > destlen) {
    throw new IndexOutOfBoundsException_0;
  }
  if (((srcComp.modifiers & 1) == 0 || (srcComp.modifiers & 4) != 0) && srcType != destType) {
    srcArray = dynamicCast(src_0, Q$Object_$1);
    destArray = dynamicCast(dest, Q$Object_$1);
    if (maskUndefined(src_0) === maskUndefined(dest) && srcOfs < destOfs) {
      srcOfs += len;
      for (destEnd = destOfs + len; destEnd-- > destOfs;) {
        setCheck(destArray, destEnd, srcArray[--srcOfs]);
      }
    }
     else {
      for (destEnd = destOfs + len; destOfs < destEnd;) {
        setCheck(destArray, destOfs++, srcArray[srcOfs++]);
      }
    }
  }
   else {
    Array.prototype.splice.apply(dest, [destOfs, len].concat(src_0.slice(srcOfs, srcOfs + len)));
  }
}

function currentTimeMillis0(){
  return (new Date).getTime();
}

function UnsupportedOperationException_0(){
  RuntimeException_0.call(this);
}

function UnsupportedOperationException_1(message){
  RuntimeException_1.call(this, message);
}

defineSeed(310, 26, makeCastMap([Q$Serializable, Q$Throwable]), UnsupportedOperationException_0, UnsupportedOperationException_1);
function $implFindEntry(this$static, key, remove){
  var entry, iter, k;
  for (iter = new AbstractHashMap$EntrySetIterator_0((new AbstractHashMap$EntrySet_0(this$static)).this$0); $hasNext(iter.iter);) {
    entry = iter.last = dynamicCast($next_2(iter.iter), Q$Map$Entry);
    k = entry.getKey();
    if (key == null?k == null:equals__devirtual$(key, k)) {
      if (remove) {
        entry = new MapEntryImpl_0(entry.getKey(), entry.getValue());
        $remove_5(iter);
      }
      return entry;
    }
  }
  return null;
}

function $keySet(this$static){
  var entrySet;
  entrySet = new AbstractHashMap$EntrySet_0(this$static);
  return new AbstractMap$1_0(this$static, entrySet);
}

function $values(this$static){
  var entrySet;
  entrySet = new AbstractHashMap$EntrySet_0(this$static);
  return new AbstractMap$2_0(this$static, entrySet);
}

defineSeed(312, 1, makeCastMap([Q$Map]));
_.equals$ = function equals_13(obj){
  var entry, entry$iterator, otherKey, otherMap, otherValue;
  if (obj === this) {
    return true;
  }
  if (!instanceOf(obj, Q$Map)) {
    return false;
  }
  otherMap = dynamicCast(obj, Q$Map);
  if (this.size_0 != otherMap.size_1()) {
    return false;
  }
  for (entry$iterator = otherMap.entrySet_0().iterator(); entry$iterator.hasNext();) {
    entry = dynamicCast(entry$iterator.next_0(), Q$Map$Entry);
    otherKey = entry.getKey();
    otherValue = entry.getValue();
    if (!(otherKey == null?this.nullSlotLive:instanceOf(otherKey, Q$String)?$hasStringValue(this, dynamicCast(otherKey, Q$String)):$hasHashValue(this, otherKey, ~~hashCode__devirtual$(otherKey)))) {
      return false;
    }
    if (!equalsWithNullCheck(otherValue, otherKey == null?this.nullSlot:instanceOf(otherKey, Q$String)?$getStringValue(this, dynamicCast(otherKey, Q$String)):$getHashValue(this, otherKey, ~~hashCode__devirtual$(otherKey)))) {
      return false;
    }
  }
  return true;
}
;
_.get_0 = function get_1(key){
  var entry;
  entry = $implFindEntry(this, key, false);
  return !entry?null:entry.getValue();
}
;
_.hashCode$ = function hashCode_15(){
  var entry, entry$iterator, hashCode;
  hashCode = 0;
  for (entry$iterator = new AbstractHashMap$EntrySetIterator_0((new AbstractHashMap$EntrySet_0(this)).this$0); $hasNext(entry$iterator.iter);) {
    entry = entry$iterator.last = dynamicCast($next_2(entry$iterator.iter), Q$Map$Entry);
    hashCode += entry.hashCode$();
    hashCode = ~~hashCode;
  }
  return hashCode;
}
;
_.isEmpty = function isEmpty_0(){
  return this.size_0 == 0;
}
;
_.put = function put(key, value_0){
  throw new UnsupportedOperationException_1('Put not supported on this map');
}
;
_.remove_2 = function remove_8(key){
  var entry;
  entry = $implFindEntry(this, key, true);
  return !entry?null:entry.getValue();
}
;
_.size_1 = function size_2(){
  return (new AbstractHashMap$EntrySet_0(this)).this$0.size_0;
}
;
_.toString$ = function toString_27(){
  var comma, entry, iter, s;
  s = '{';
  comma = false;
  for (iter = new AbstractHashMap$EntrySetIterator_0((new AbstractHashMap$EntrySet_0(this)).this$0); $hasNext(iter.iter);) {
    entry = iter.last = dynamicCast($next_2(iter.iter), Q$Map$Entry);
    comma?(s += ', '):(comma = true);
    s += '' + entry.getKey();
    s += '=';
    s += '' + entry.getValue();
  }
  return s + '}';
}
;
function $addAllHashEntries(this$static, dest){
  var hashCodeMap = this$static.hashCodeMap;
  for (var hashCode in hashCodeMap) {
    var hashCodeInt = parseInt(hashCode, 10);
    if (hashCode == hashCodeInt) {
      var array = hashCodeMap[hashCodeInt];
      for (var i_0 = 0, c = array.length; i_0 < c; ++i_0) {
        dest.add_0(array[i_0]);
      }
    }
  }
}

function $addAllStringEntries(this$static, dest){
  var stringMap = this$static.stringMap;
  for (var key in stringMap) {
    if (key.charCodeAt(0) == 58) {
      var entry = new AbstractHashMap$MapEntryString_0(this$static, key.substring(1));
      dest.add_0(entry);
    }
  }
}

function $clearImpl(this$static){
  this$static.hashCodeMap = [];
  this$static.stringMap = {};
  this$static.nullSlotLive = false;
  this$static.nullSlot = null;
  this$static.size_0 = 0;
}

function $containsHashValue(this$static, value_0){
  var hashCodeMap = this$static.hashCodeMap;
  for (var hashCode in hashCodeMap) {
    var hashCodeInt = parseInt(hashCode, 10);
    if (hashCode == hashCodeInt) {
      var array = hashCodeMap[hashCodeInt];
      for (var i_0 = 0, c = array.length; i_0 < c; ++i_0) {
        var entry = array[i_0];
        var entryValue = entry.getValue();
        if (this$static.equalsBridge(value_0, entryValue)) {
          return true;
        }
      }
    }
  }
  return false;
}

function $containsKey_0(this$static, key){
  return key == null?this$static.nullSlotLive:instanceOf(key, Q$String)?$hasStringValue(this$static, dynamicCast(key, Q$String)):$hasHashValue(this$static, key, ~~hashCode__devirtual$(key));
}

function $containsStringValue(this$static, value_0){
  var stringMap = this$static.stringMap;
  for (var key in stringMap) {
    if (key.charCodeAt(0) == 58) {
      var entryValue = stringMap[key];
      if (this$static.equalsBridge(value_0, entryValue)) {
        return true;
      }
    }
  }
  return false;
}

function $containsValue(this$static, value_0){
  if (this$static.nullSlotLive && $equals_0(this$static.nullSlot, value_0)) {
    return true;
  }
   else if ($containsStringValue(this$static, value_0)) {
    return true;
  }
   else if ($containsHashValue(this$static, value_0)) {
    return true;
  }
  return false;
}

function $get_1(this$static, key){
  return key == null?this$static.nullSlot:instanceOf(key, Q$String)?$getStringValue(this$static, dynamicCast(key, Q$String)):$getHashValue(this$static, key, ~~hashCode__devirtual$(key));
}

function $getHashValue(this$static, key, hashCode){
  var array = this$static.hashCodeMap[hashCode];
  if (array) {
    for (var i_0 = 0, c = array.length; i_0 < c; ++i_0) {
      var entry = array[i_0];
      var entryKey = entry.getKey();
      if (this$static.equalsBridge(key, entryKey)) {
        return entry.getValue();
      }
    }
  }
  return null;
}

function $getStringValue(this$static, key){
  return this$static.stringMap[':' + key];
}

function $hasHashValue(this$static, key, hashCode){
  var array = this$static.hashCodeMap[hashCode];
  if (array) {
    for (var i_0 = 0, c = array.length; i_0 < c; ++i_0) {
      var entry = array[i_0];
      var entryKey = entry.getKey();
      if (this$static.equalsBridge(key, entryKey)) {
        return true;
      }
    }
  }
  return false;
}

function $hasStringValue(this$static, key){
  return ':' + key in this$static.stringMap;
}

function $put(this$static, key, value_0){
  return key == null?$putNullSlot(this$static, value_0):instanceOf(key, Q$String)?$putStringValue(this$static, dynamicCast(key, Q$String), value_0):$putHashValue(this$static, key, value_0, ~~hashCode__devirtual$(key));
}

function $putHashValue(this$static, key, value_0, hashCode){
  var array = this$static.hashCodeMap[hashCode];
  if (array) {
    for (var i_0 = 0, c = array.length; i_0 < c; ++i_0) {
      var entry = array[i_0];
      var entryKey = entry.getKey();
      if (this$static.equalsBridge(key, entryKey)) {
        var previous = entry.getValue();
        entry.setValue(value_0);
        return previous;
      }
    }
  }
   else {
    array = this$static.hashCodeMap[hashCode] = [];
  }
  var entry = new MapEntryImpl_0(key, value_0);
  array.push(entry);
  ++this$static.size_0;
  return null;
}

function $putNullSlot(this$static, value_0){
  var result;
  result = this$static.nullSlot;
  this$static.nullSlot = value_0;
  if (!this$static.nullSlotLive) {
    this$static.nullSlotLive = true;
    ++this$static.size_0;
  }
  return result;
}

function $putStringValue(this$static, key, value_0){
  var result, stringMap = this$static.stringMap;
  key = ':' + key;
  key in stringMap?(result = stringMap[key]):++this$static.size_0;
  stringMap[key] = value_0;
  return result;
}

function $remove_4(this$static, key){
  return key == null?$removeNullSlot(this$static):instanceOf(key, Q$String)?$removeStringValue(this$static, dynamicCast(key, Q$String)):$removeHashValue(this$static, key, ~~hashCode__devirtual$(key));
}

function $removeHashValue(this$static, key, hashCode){
  var array = this$static.hashCodeMap[hashCode];
  if (array) {
    for (var i_0 = 0, c = array.length; i_0 < c; ++i_0) {
      var entry = array[i_0];
      var entryKey = entry.getKey();
      if (this$static.equalsBridge(key, entryKey)) {
        array.length == 1?delete this$static.hashCodeMap[hashCode]:array.splice(i_0, 1);
        --this$static.size_0;
        return entry.getValue();
      }
    }
  }
  return null;
}

function $removeNullSlot(this$static){
  var result;
  result = this$static.nullSlot;
  this$static.nullSlot = null;
  if (this$static.nullSlotLive) {
    this$static.nullSlotLive = false;
    --this$static.size_0;
  }
  return result;
}

function $removeStringValue(this$static, key){
  var result, stringMap = this$static.stringMap;
  key = ':' + key;
  if (key in stringMap) {
    result = stringMap[key];
    --this$static.size_0;
    delete stringMap[key];
  }
  return result;
}

defineSeed(311, 312, makeCastMap([Q$Map]));
_.entrySet_0 = function entrySet_0(){
  return new AbstractHashMap$EntrySet_0(this);
}
;
_.equalsBridge = function equalsBridge(value1, value2){
  return maskUndefined(value1) === maskUndefined(value2) || value1 != null && equals__devirtual$(value1, value2);
}
;
_.get_0 = function get_2(key){
  return $get_1(this, key);
}
;
_.put = function put_0(key, value_0){
  return $put(this, key, value_0);
}
;
_.remove_2 = function remove_9(key){
  return $remove_4(this, key);
}
;
_.size_1 = function size_3(){
  return this.size_0;
}
;
_.nullSlotLive = false;
_.size_0 = 0;
function $contains(this$static, o){
  var entry, key, value_0;
  if (instanceOf(o, Q$Map$Entry)) {
    entry = dynamicCast(o, Q$Map$Entry);
    key = entry.getKey();
    if ($containsKey_0(this$static.this$0, key)) {
      value_0 = $get_1(this$static.this$0, key);
      return $equals_0(entry.getValue(), value_0);
    }
  }
  return false;
}

function AbstractHashMap$EntrySet_0(this$0){
  this.this$0 = this$0;
}

defineSeed(313, 144, makeCastMap([Q$Set]), AbstractHashMap$EntrySet_0);
_.contains_0 = function contains_1(o){
  return $contains(this, o);
}
;
_.iterator = function iterator_4(){
  return new AbstractHashMap$EntrySetIterator_0(this.this$0);
}
;
_.remove = function remove_10(entry){
  var key;
  if ($contains(this, entry)) {
    key = dynamicCast(entry, Q$Map$Entry).getKey();
    $remove_4(this.this$0, key);
    return true;
  }
  return false;
}
;
_.size_1 = function size_4(){
  return this.this$0.size_0;
}
;
function $next_1(this$static){
  return this$static.last = dynamicCast($next_2(this$static.iter), Q$Map$Entry);
}

function $remove_5(this$static){
  if (!this$static.last) {
    throw new IllegalStateException_1('Must call next() before remove().');
  }
   else {
    $remove_6(this$static.iter);
    $remove_4(this$static.this$0, this$static.last.getKey());
    this$static.last = null;
  }
}

function AbstractHashMap$EntrySetIterator_0(this$0){
  var list;
  this.this$0 = this$0;
  list = new ArrayList_0;
  this$0.nullSlotLive && $add_5(list, new AbstractHashMap$MapEntryNull_0(this$0));
  $addAllStringEntries(this$0, list);
  $addAllHashEntries(this$0, list);
  this.iter = new AbstractList$IteratorImpl_0(list);
}

defineSeed(314, 1, {}, AbstractHashMap$EntrySetIterator_0);
_.hasNext = function hasNext_1(){
  return $hasNext(this.iter);
}
;
_.next_0 = function next_2(){
  return $next_1(this);
}
;
_.remove_1 = function remove_11(){
  $remove_5(this);
}
;
_.last = null;
defineSeed(316, 1, makeCastMap([Q$Map$Entry]));
_.equals$ = function equals_14(other){
  var entry;
  if (instanceOf(other, Q$Map$Entry)) {
    entry = dynamicCast(other, Q$Map$Entry);
    if (equalsWithNullCheck(this.getKey(), entry.getKey()) && equalsWithNullCheck(this.getValue(), entry.getValue())) {
      return true;
    }
  }
  return false;
}
;
_.hashCode$ = function hashCode_16(){
  var keyHash, valueHash;
  keyHash = 0;
  valueHash = 0;
  this.getKey() != null && (keyHash = hashCode__devirtual$(this.getKey()));
  this.getValue() != null && (valueHash = hashCode__devirtual$(this.getValue()));
  return keyHash ^ valueHash;
}
;
_.toString$ = function toString_28(){
  return this.getKey() + '=' + this.getValue();
}
;
function AbstractHashMap$MapEntryNull_0(this$0){
  this.this$0 = this$0;
}

defineSeed(315, 316, makeCastMap([Q$Map$Entry]), AbstractHashMap$MapEntryNull_0);
_.getKey = function getKey(){
  return null;
}
;
_.getValue = function getValue(){
  return this.this$0.nullSlot;
}
;
_.setValue = function setValue(object){
  return $putNullSlot(this.this$0, object);
}
;
function AbstractHashMap$MapEntryString_0(this$0, key){
  this.this$0 = this$0;
  this.key = key;
}

defineSeed(317, 316, makeCastMap([Q$Map$Entry]), AbstractHashMap$MapEntryString_0);
_.getKey = function getKey_0(){
  return this.key;
}
;
_.getValue = function getValue_0(){
  return $getStringValue(this.this$0, this.key);
}
;
_.setValue = function setValue_0(object){
  return $putStringValue(this.this$0, this.key, object);
}
;
function $indexOf_1(this$static, toFind){
  var i_0, n;
  for (i_0 = 0 , n = this$static.array.length; i_0 < n; ++i_0) {
    if (toFind == null?(checkIndex(i_0, this$static.array.length) , this$static.array[i_0]) == null:equals__devirtual$(toFind, (checkIndex(i_0, this$static.array.length) , this$static.array[i_0]))) {
      return i_0;
    }
  }
  return -1;
}

function checkIndex(index_0, size_0){
  (index_0 < 0 || index_0 >= size_0) && indexOutOfBounds(index_0, size_0);
}

function indexOutOfBounds(index_0, size_0){
  throw new IndexOutOfBoundsException_1('Index: ' + index_0 + ', Size: ' + size_0);
}

defineSeed(318, 145, makeCastMap([Q$List]));
_.add_1 = function add_2(index_0, element){
  throw new UnsupportedOperationException_1('Add not supported on this list');
}
;
_.add_0 = function add_3(obj){
  this.add_1(this.size_1(), obj);
  return true;
}
;
_.equals$ = function equals_15(o){
  var elem, elemOther, iter, iterOther, other;
  if (o === this) {
    return true;
  }
  if (!instanceOf(o, Q$List)) {
    return false;
  }
  other = dynamicCast(o, Q$List);
  if (this.size_1() != other.size_1()) {
    return false;
  }
  iter = this.iterator();
  iterOther = other.iterator();
  while (iter.hasNext()) {
    elem = iter.next_0();
    elemOther = iterOther.next_0();
    if (!(elem == null?elemOther == null:equals__devirtual$(elem, elemOther))) {
      return false;
    }
  }
  return true;
}
;
_.hashCode$ = function hashCode_17(){
  var iter, k, obj;
  k = 1;
  iter = this.iterator();
  while (iter.hasNext()) {
    obj = iter.next_0();
    k = 31 * k + (obj == null?0:hashCode__devirtual$(obj));
    k = ~~k;
  }
  return k;
}
;
_.iterator = function iterator_5(){
  return new AbstractList$IteratorImpl_0(this);
}
;
_.listIterator = function listIterator(){
  return this.listIterator_0(0);
}
;
_.listIterator_0 = function listIterator_0(from){
  return new AbstractList$ListIteratorImpl_0(this, from);
}
;
_.remove_3 = function remove_12(index_0){
  throw new UnsupportedOperationException_1('Remove not supported on this list');
}
;
function $hasNext(this$static){
  return this$static.i < this$static.this$0_0.size_1();
}

function $next_2(this$static){
  if (this$static.i >= this$static.this$0_0.size_1()) {
    throw new NoSuchElementException_0;
  }
  return this$static.this$0_0.get_1(this$static.last = this$static.i++);
}

function $remove_6(this$static){
  if (this$static.last < 0) {
    throw new IllegalStateException_0;
  }
  this$static.this$0_0.remove_3(this$static.last);
  this$static.i = this$static.last;
  this$static.last = -1;
}

function AbstractList$IteratorImpl_0(this$0){
  this.this$0_0 = this$0;
}

defineSeed(319, 1, {}, AbstractList$IteratorImpl_0);
_.hasNext = function hasNext_2(){
  return $hasNext(this);
}
;
_.next_0 = function next_3(){
  return $next_2(this);
}
;
_.remove_1 = function remove_13(){
  $remove_6(this);
}
;
_.i = 0;
_.last = -1;
function AbstractList$ListIteratorImpl_0(this$0, start_0){
  var size_0;
  this.this$0 = this$0;
  AbstractList$IteratorImpl_0.call(this, this$0);
  size_0 = this$0.size_1();
  (start_0 < 0 || start_0 > size_0) && indexOutOfBounds(start_0, size_0);
  this.i = start_0;
}

defineSeed(320, 319, {}, AbstractList$ListIteratorImpl_0);
_.hasPrevious = function hasPrevious(){
  return this.i > 0;
}
;
_.previous = function previous_0(){
  if (this.i <= 0) {
    throw new NoSuchElementException_0;
  }
  return this.this$0.get_1(this.last = --this.i);
}
;
function $iterator(this$static){
  var outerIter;
  outerIter = new AbstractHashMap$EntrySetIterator_0(this$static.val$entrySet.this$0);
  return new AbstractMap$1$1_0(outerIter);
}

function AbstractMap$1_0(this$0, val$entrySet){
  this.this$0 = this$0;
  this.val$entrySet = val$entrySet;
}

defineSeed(321, 144, makeCastMap([Q$Set]), AbstractMap$1_0);
_.contains_0 = function contains_2(key){
  return $containsKey_0(this.this$0, key);
}
;
_.iterator = function iterator_6(){
  return $iterator(this);
}
;
_.size_1 = function size_5(){
  return this.val$entrySet.this$0.size_0;
}
;
function AbstractMap$1$1_0(val$outerIter){
  this.val$outerIter = val$outerIter;
}

defineSeed(322, 1, {}, AbstractMap$1$1_0);
_.hasNext = function hasNext_3(){
  return $hasNext(this.val$outerIter.iter);
}
;
_.next_0 = function next_4(){
  var entry;
  entry = $next_1(this.val$outerIter);
  return entry.getKey();
}
;
_.remove_1 = function remove_14(){
  $remove_5(this.val$outerIter);
}
;
function $iterator_0(this$static){
  var outerIter;
  outerIter = new AbstractHashMap$EntrySetIterator_0(this$static.val$entrySet.this$0);
  return new AbstractMap$2$1_0(outerIter);
}

function AbstractMap$2_0(this$0, val$entrySet){
  this.this$0 = this$0;
  this.val$entrySet = val$entrySet;
}

defineSeed(323, 145, {}, AbstractMap$2_0);
_.contains_0 = function contains_3(value_0){
  return $containsValue(this.this$0, value_0);
}
;
_.iterator = function iterator_7(){
  return $iterator_0(this);
}
;
_.size_1 = function size_6(){
  return this.val$entrySet.this$0.size_0;
}
;
function $next_3(this$static){
  var value_0;
  value_0 = $next_1(this$static.val$outerIter).getValue();
  return value_0;
}

function AbstractMap$2$1_0(val$outerIter){
  this.val$outerIter = val$outerIter;
}

defineSeed(324, 1, {}, AbstractMap$2$1_0);
_.hasNext = function hasNext_4(){
  return $hasNext(this.val$outerIter.iter);
}
;
_.next_0 = function next_5(){
  return $next_3(this);
}
;
_.remove_1 = function remove_15(){
  $remove_5(this.val$outerIter);
}
;
defineSeed(325, 318, makeCastMap([Q$List]));
_.add_1 = function add_4(index_0, element){
  var iter;
  iter = $listIterator(this, index_0);
  $addBefore(iter.this$0, element, iter.currentNode);
  ++iter.currentIndex;
  iter.lastNode = null;
}
;
_.get_1 = function get_3(index_0){
  var iter;
  iter = $listIterator(this, index_0);
  try {
    return $next_4(iter);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, Q$NoSuchElementException)) {
      throw new IndexOutOfBoundsException_1("Can't get element " + index_0);
    }
     else 
      throw unwrap($e0);
  }
}
;
_.iterator = function iterator_8(){
  return $listIterator(this, 0);
}
;
_.remove_3 = function remove_16(index_0){
  var iter, old;
  iter = $listIterator(this, index_0);
  try {
    old = $next_4(iter);
  }
   catch ($e0) {
    $e0 = wrap($e0);
    if (instanceOf($e0, Q$NoSuchElementException)) {
      throw new IndexOutOfBoundsException_1("Can't remove element " + index_0);
    }
     else 
      throw unwrap($e0);
  }
  $remove_10(iter);
  return old;
}
;
function $$init_0(this$static){
  this$static.array = initDim(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, 0, 0);
}

function $add_5(this$static, o){
  setCheck(this$static.array, this$static.size_0++, o);
  return true;
}

function $addAll(this$static, c){
  var cArray, len;
  cArray = cloneSubrange(c.array, 0, c.size_0);
  len = cArray.length;
  if (len == 0) {
    return false;
  }
  spliceArray(this$static.array, this$static.size_0, 0, cArray);
  this$static.size_0 += len;
  return true;
}

function $clear(this$static){
  this$static.array = initDim(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, 0, 0);
  this$static.size_0 = 0;
}

function $get_2(this$static, index_0){
  checkIndex(index_0, this$static.size_0);
  return this$static.array[index_0];
}

function $indexOf_2(this$static, o, index_0){
  for (; index_0 < this$static.size_0; ++index_0) {
    if (equalsWithNullCheck(o, this$static.array[index_0])) {
      return index_0;
    }
  }
  return -1;
}

function $remove_7(this$static, index_0){
  var previous;
  previous = (checkIndex(index_0, this$static.size_0) , this$static.array[index_0]);
  splice_0(this$static.array, index_0, 1);
  --this$static.size_0;
  return previous;
}

function $remove_8(this$static, o){
  var i_0;
  i_0 = $indexOf_2(this$static, o, 0);
  if (i_0 == -1) {
    return false;
  }
  $remove_7(this$static, i_0);
  return true;
}

function $set(this$static, index_0, o){
  var previous;
  previous = (checkIndex(index_0, this$static.size_0) , this$static.array[index_0]);
  setCheck(this$static.array, index_0, o);
  return previous;
}

function $toArray(this$static, out){
  var i_0;
  out.length < this$static.size_0 && (out = createFrom(out, this$static.size_0));
  for (i_0 = 0; i_0 < this$static.size_0; ++i_0) {
    setCheck(out, i_0, this$static.array[i_0]);
  }
  out.length > this$static.size_0 && setCheck(out, this$static.size_0, null);
  return out;
}

function $trimToSize(this$static){
  setCapacity(this$static.array, this$static.size_0);
}

function ArrayList_0(){
  $$init_0(this);
}

function ArrayList_1(initialCapacity){
  $$init_0(this);
  setCapacity(this.array, initialCapacity);
}

function ArrayList_2(c){
  $$init_0(this);
  spliceArray(this.array, 0, 0, c.toArray());
  this.size_0 = this.array.length;
}

function setCapacity(array, newSize){
  array.length = newSize;
}

function splice_0(array, index_0, deleteCount){
  array.splice(index_0, deleteCount);
}

function splice_1(array, index_0, deleteCount, value_0){
  array.splice(index_0, deleteCount, value_0);
}

function spliceArray(array, index_0, deleteCount, values){
  Array.prototype.splice.apply(array, [index_0, deleteCount].concat(values));
}

defineSeed(326, 318, makeCastMap([Q$Serializable, Q$List, Q$RandomAccess]), ArrayList_0, ArrayList_1, ArrayList_2);
_.add_1 = function add_5(index_0, o){
  (index_0 < 0 || index_0 > this.size_0) && indexOutOfBounds(index_0, this.size_0);
  splice_1(this.array, index_0, 0, o);
  ++this.size_0;
}
;
_.add_0 = function add_6(o){
  return $add_5(this, o);
}
;
_.contains_0 = function contains_4(o){
  return $indexOf_2(this, o, 0) != -1;
}
;
_.get_1 = function get_4(index_0){
  return $get_2(this, index_0);
}
;
_.isEmpty = function isEmpty_1(){
  return this.size_0 == 0;
}
;
_.remove_3 = function remove_17(index_0){
  return $remove_7(this, index_0);
}
;
_.remove = function remove_18(o){
  return $remove_8(this, o);
}
;
_.size_1 = function size_7(){
  return this.size_0;
}
;
_.toArray = function toArray_1(){
  return cloneSubrange(this.array, 0, this.size_0);
}
;
_.toArray_0 = function toArray_2(out){
  return $toArray(this, out);
}
;
_.size_0 = 0;
function insertionSort(array, low, high, comp){
  var i_0, j, t;
  for (i_0 = low + 1; i_0 < high; ++i_0) {
    for (j = i_0; j > low && comp.compare(array[j - 1], array[j]) > 0; --j) {
      t = array[j];
      setCheck(array, j, array[j - 1]);
      setCheck(array, j - 1, t);
    }
  }
}

function merge(src_0, srcLow, srcMid, srcHigh, dest, destLow, destHigh, comp){
  var topIdx;
  topIdx = srcMid;
  while (destLow < destHigh) {
    topIdx >= srcHigh || srcLow < srcMid && comp.compare(src_0[srcLow], src_0[topIdx]) <= 0?setCheck(dest, destLow++, src_0[srcLow++]):setCheck(dest, destLow++, src_0[topIdx++]);
  }
}

function mergeSort(x_0, fromIndex, toIndex, comp){
  var temp;
  temp = cloneSubrange(x_0, fromIndex, toIndex);
  mergeSort_0(temp, x_0, fromIndex, toIndex, -fromIndex, comp);
}

function mergeSort_0(temp, array, low, high, ofs, comp){
  var length_0, tempHigh, tempLow, tempMid;
  length_0 = high - low;
  if (length_0 < 7) {
    insertionSort(array, low, high, comp);
    return;
  }
  tempLow = low + ofs;
  tempHigh = high + ofs;
  tempMid = tempLow + (~~(tempHigh - tempLow) >> 1);
  mergeSort_0(array, temp, tempLow, tempMid, -ofs, comp);
  mergeSort_0(array, temp, tempMid, tempHigh, -ofs, comp);
  if (comp.compare(temp[tempMid - 1], temp[tempMid]) <= 0) {
    while (low < high) {
      setCheck(array, low++, temp[tempLow++]);
    }
    return;
  }
  merge(temp, tempLow, tempMid, tempHigh, array, low, high, comp);
}

function Arrays$ArrayList_0(array){
  this.array = array;
}

defineSeed(328, 318, makeCastMap([Q$Serializable, Q$List, Q$RandomAccess]), Arrays$ArrayList_0);
_.contains_0 = function contains_5(o){
  return $indexOf_1(this, o) != -1;
}
;
_.get_1 = function get_5(index_0){
  return checkIndex(index_0, this.array.length) , this.array[index_0];
}
;
_.size_1 = function size_8(){
  return this.array.length;
}
;
_.toArray = function toArray_3(){
  return clone(this.array);
}
;
_.toArray_0 = function toArray_4(out){
  var i_0, size_0;
  size_0 = this.array.length;
  out.length < size_0 && (out = createFrom(out, size_0));
  for (i_0 = 0; i_0 < size_0; ++i_0) {
    setCheck(out, i_0, this.array[i_0]);
  }
  out.length > size_0 && setCheck(out, size_0, null);
  return out;
}
;
function $clinit_Collections(){
  $clinit_Collections = nullMethod;
  EMPTY_LIST = new Collections$EmptyList_0;
}

function replaceContents(target, x_0){
  var i_0, size_0;
  size_0 = target.size_0;
  for (i_0 = 0; i_0 < size_0; i_0++) {
    $set(target, i_0, x_0[i_0]);
  }
}

function sort_0(target, c){
  $clinit_Collections();
  var x_0;
  x_0 = cloneSubrange(target.array, 0, target.size_0);
  mergeSort(x_0, 0, x_0.length, c?c:($clinit_Comparators() , $clinit_Comparators() , NATURAL));
  replaceContents(target, x_0);
}

function unmodifiableList(list){
  $clinit_Collections();
  return instanceOf(list, Q$RandomAccess)?new Collections$UnmodifiableRandomAccessList_0(list):new Collections$UnmodifiableList_0(list);
}

var EMPTY_LIST;
function Collections$EmptyList_0(){
}

defineSeed(330, 318, makeCastMap([Q$Serializable, Q$List, Q$RandomAccess]), Collections$EmptyList_0);
_.contains_0 = function contains_6(object){
  return false;
}
;
_.get_1 = function get_6(location_0){
  throw new IndexOutOfBoundsException_0;
}
;
_.size_1 = function size_9(){
  return 0;
}
;
function Collections$UnmodifiableCollection_0(coll){
  this.coll = coll;
}

defineSeed(331, 1, {});
_.add_0 = function add_7(o){
  throw new UnsupportedOperationException_0;
}
;
_.iterator = function iterator_9(){
  return new Collections$UnmodifiableCollectionIterator_0(this.coll.iterator());
}
;
_.remove = function remove_19(o){
  throw new UnsupportedOperationException_0;
}
;
_.size_1 = function size_10(){
  return this.coll.size_1();
}
;
_.toString$ = function toString_29(){
  return this.coll.toString$();
}
;
function Collections$UnmodifiableCollectionIterator_0(it){
  this.it = it;
}

defineSeed(332, 1, {}, Collections$UnmodifiableCollectionIterator_0);
_.hasNext = function hasNext_5(){
  return this.it.hasNext();
}
;
_.next_0 = function next_6(){
  return this.it.next_0();
}
;
_.remove_1 = function remove_20(){
  throw new UnsupportedOperationException_0;
}
;
function Collections$UnmodifiableList_0(list){
  Collections$UnmodifiableCollection_0.call(this, list);
  this.list = list;
}

defineSeed(333, 331, makeCastMap([Q$List]), Collections$UnmodifiableList_0);
_.equals$ = function equals_16(o){
  return this.list.equals$(o);
}
;
_.get_1 = function get_7(index_0){
  return this.list.get_1(index_0);
}
;
_.hashCode$ = function hashCode_18(){
  return this.list.hashCode$();
}
;
_.isEmpty = function isEmpty_2(){
  return this.list.isEmpty();
}
;
_.listIterator = function listIterator_1(){
  return new Collections$UnmodifiableListIterator_0(this.list.listIterator_0(0));
}
;
_.listIterator_0 = function listIterator_2(from){
  return new Collections$UnmodifiableListIterator_0(this.list.listIterator_0(from));
}
;
function Collections$UnmodifiableListIterator_0(lit){
  Collections$UnmodifiableCollectionIterator_0.call(this, lit);
  this.lit = lit;
}

defineSeed(334, 332, {}, Collections$UnmodifiableListIterator_0);
_.hasPrevious = function hasPrevious_0(){
  return this.lit.hasPrevious();
}
;
_.previous = function previous_1(){
  return this.lit.previous();
}
;
function Collections$UnmodifiableMap_0(map_0){
  this.map_0 = map_0;
}

defineSeed(335, 1, makeCastMap([Q$Map]), Collections$UnmodifiableMap_0);
_.entrySet_0 = function entrySet_1(){
  !this.entrySet && (this.entrySet = new Collections$UnmodifiableMap$UnmodifiableEntrySet_0(this.map_0.entrySet_0()));
  return this.entrySet;
}
;
_.equals$ = function equals_17(o){
  return this.map_0.equals$(o);
}
;
_.get_0 = function get_8(key){
  return this.map_0.get_0(key);
}
;
_.hashCode$ = function hashCode_19(){
  return this.map_0.hashCode$();
}
;
_.isEmpty = function isEmpty_3(){
  return this.map_0.isEmpty();
}
;
_.put = function put_1(key, value_0){
  throw new UnsupportedOperationException_0;
}
;
_.remove_2 = function remove_21(key){
  throw new UnsupportedOperationException_0;
}
;
_.size_1 = function size_11(){
  return this.map_0.size_1();
}
;
_.toString$ = function toString_30(){
  return this.map_0.toString$();
}
;
defineSeed(337, 331, makeCastMap([Q$Set]));
_.equals$ = function equals_18(o){
  return this.coll.equals$(o);
}
;
_.hashCode$ = function hashCode_20(){
  return this.coll.hashCode$();
}
;
function Collections$UnmodifiableMap$UnmodifiableEntrySet_0(s){
  Collections$UnmodifiableCollection_0.call(this, s);
}

defineSeed(336, 337, makeCastMap([Q$Set]), Collections$UnmodifiableMap$UnmodifiableEntrySet_0);
_.iterator = function iterator_10(){
  var it;
  it = this.coll.iterator();
  return new Collections$UnmodifiableMap$UnmodifiableEntrySet$1_0(it);
}
;
function Collections$UnmodifiableMap$UnmodifiableEntrySet$1_0(val$it){
  this.val$it = val$it;
}

defineSeed(338, 1, {}, Collections$UnmodifiableMap$UnmodifiableEntrySet$1_0);
_.hasNext = function hasNext_6(){
  return this.val$it.hasNext();
}
;
_.next_0 = function next_7(){
  return new Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry_0(dynamicCast(this.val$it.next_0(), Q$Map$Entry));
}
;
_.remove_1 = function remove_22(){
  throw new UnsupportedOperationException_0;
}
;
function Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry_0(entry){
  this.entry = entry;
}

defineSeed(339, 1, makeCastMap([Q$Map$Entry]), Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry_0);
_.equals$ = function equals_19(o){
  return this.entry.equals$(o);
}
;
_.getKey = function getKey_1(){
  return this.entry.getKey();
}
;
_.getValue = function getValue_1(){
  return this.entry.getValue();
}
;
_.hashCode$ = function hashCode_21(){
  return this.entry.hashCode$();
}
;
_.setValue = function setValue_1(value_0){
  throw new UnsupportedOperationException_0;
}
;
_.toString$ = function toString_31(){
  return this.entry.toString$();
}
;
function Collections$UnmodifiableRandomAccessList_0(list){
  Collections$UnmodifiableList_0.call(this, list);
}

defineSeed(340, 333, makeCastMap([Q$List, Q$RandomAccess]), Collections$UnmodifiableRandomAccessList_0);
function $clinit_Comparators(){
  $clinit_Comparators = nullMethod;
  NATURAL = new Comparators$1_0;
}

var NATURAL;
function Comparators$1_0(){
}

defineSeed(342, 1, {}, Comparators$1_0);
_.compare = function compare_3(o1, o2){
  return dynamicCast(o1, Q$Comparable).compareTo$(o2);
}
;
function $compareTo_5(this$static, other){
  return signum(sub_0(fromDouble(this$static.jsdate.getTime()), fromDouble(other.jsdate.getTime())));
}

function $toString_1(this$static){
  var hourOffset, minuteOffset, offset;
  offset = -this$static.jsdate.getTimezoneOffset();
  hourOffset = (offset >= 0?'+':'') + ~~(offset / 60);
  minuteOffset = (offset < 0?-offset:offset) % 60 < 10?'0' + (offset < 0?-offset:offset) % 60:'' + (offset < 0?-offset:offset) % 60;
  return ($clinit_Date$StringData() , DAYS)[this$static.jsdate.getDay()] + ' ' + MONTHS[this$static.jsdate.getMonth()] + ' ' + padTwo(this$static.jsdate.getDate()) + ' ' + padTwo(this$static.jsdate.getHours()) + ':' + padTwo(this$static.jsdate.getMinutes()) + ':' + padTwo(this$static.jsdate.getSeconds()) + ' GMT' + hourOffset + minuteOffset + ' ' + this$static.jsdate.getFullYear();
}

function Date_1(){
  this.jsdate = new Date;
}

function Date_2(date){
  this.jsdate = create(toDouble(date));
}

function padTwo(number){
  return number < 10?'0' + number:'' + number;
}

defineSeed(343, 1, makeCastMap([Q$Serializable, Q$Comparable, Q$Date]), Date_1, Date_2);
_.compareTo$ = function compareTo_7(other){
  return $compareTo_5(this, dynamicCast(other, Q$Date));
}
;
_.equals$ = function equals_20(obj){
  return instanceOf(obj, Q$Date) && eq(fromDouble(this.jsdate.getTime()), fromDouble(dynamicCast(obj, Q$Date).jsdate.getTime()));
}
;
_.hashCode$ = function hashCode_22(){
  var time;
  time = fromDouble(this.jsdate.getTime());
  return toInt(xor(time, shru(time, 32)));
}
;
_.toString$ = function toString_32(){
  return $toString_1(this);
}
;
function $clinit_Date$StringData(){
  $clinit_Date$StringData = nullMethod;
  DAYS = initValues(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$String, ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']);
  MONTHS = initValues(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$String, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);
}

var DAYS, MONTHS;
function $equals_0(value1, value2){
  return maskUndefined(value1) === maskUndefined(value2) || value1 != null && equals__devirtual$(value1, value2);
}

function HashMap_0(){
  $clearImpl(this);
}

defineSeed(345, 311, makeCastMap([Q$Serializable, Q$Map]), HashMap_0);
function $add_6(this$static, o){
  var old;
  old = $put(this$static.map_0, o, this$static);
  return old == null;
}

function $contains_0(this$static, o){
  return $containsKey_0(this$static.map_0, o);
}

function $remove_9(this$static, o){
  return $remove_4(this$static.map_0, o) != null;
}

function HashSet_0(){
  this.map_0 = new HashMap_0;
}

defineSeed(346, 144, makeCastMap([Q$Serializable, Q$Set]), HashSet_0);
_.add_0 = function add_8(o){
  return $add_6(this, o);
}
;
_.contains_0 = function contains_7(o){
  return $contains_0(this, o);
}
;
_.isEmpty = function isEmpty_4(){
  return this.map_0.size_0 == 0;
}
;
_.iterator = function iterator_11(){
  return $iterator($keySet(this.map_0));
}
;
_.remove = function remove_23(o){
  return $remove_9(this, o);
}
;
_.size_1 = function size_12(){
  return this.map_0.size_0;
}
;
_.toString$ = function toString_33(){
  return $toString_0($keySet(this.map_0));
}
;
function $addBefore(this$static, o, target){
  new LinkedList$Node_1(o, target);
  ++this$static.size_0;
}

function $addFirst(this$static, o){
  new LinkedList$Node_1(o, this$static.header.next);
  ++this$static.size_0;
}

function $addLast(this$static, o){
  new LinkedList$Node_1(o, this$static.header);
  ++this$static.size_0;
}

function $getFirst(this$static){
  $throwEmptyException(this$static);
  return this$static.header.next.value_0;
}

function $getLast(this$static){
  $throwEmptyException(this$static);
  return this$static.header.prev.value_0;
}

function $listIterator(this$static, index_0){
  var i_0, node;
  (index_0 < 0 || index_0 > this$static.size_0) && indexOutOfBounds(index_0, this$static.size_0);
  if (index_0 >= ~~this$static.size_0 >> 1) {
    node = this$static.header;
    for (i_0 = this$static.size_0; i_0 > index_0; --i_0) {
      node = node.prev;
    }
  }
   else {
    node = this$static.header.next;
    for (i_0 = 0; i_0 < index_0; ++i_0) {
      node = node.next;
    }
  }
  return new LinkedList$ListIteratorImpl_0(this$static, index_0, node);
}

function $removeFirst(this$static){
  var node;
  $throwEmptyException(this$static);
  --this$static.size_0;
  node = this$static.header.next;
  $remove_11(node);
  return node.value_0;
}

function $removeLast(this$static){
  var node;
  $throwEmptyException(this$static);
  --this$static.size_0;
  node = this$static.header.prev;
  $remove_11(node);
  return node.value_0;
}

function $throwEmptyException(this$static){
  if (this$static.size_0 == 0) {
    throw new NoSuchElementException_0;
  }
}

function LinkedList_0(){
  this.header = new LinkedList$Node_0;
  this.size_0 = 0;
}

defineSeed(347, 325, makeCastMap([Q$Serializable, Q$List]), LinkedList_0);
_.add_0 = function add_9(o){
  new LinkedList$Node_1(o, this.header);
  ++this.size_0;
  return true;
}
;
_.listIterator_0 = function listIterator_3(index_0){
  return $listIterator(this, index_0);
}
;
_.size_1 = function size_13(){
  return this.size_0;
}
;
_.size_0 = 0;
function $next_4(this$static){
  if (this$static.currentNode == this$static.this$0.header) {
    throw new NoSuchElementException_0;
  }
  this$static.lastNode = this$static.currentNode;
  this$static.currentNode = this$static.currentNode.next;
  ++this$static.currentIndex;
  return this$static.lastNode.value_0;
}

function $remove_10(this$static){
  $verifyCurrentElement(this$static);
  this$static.currentNode == this$static.lastNode?(this$static.currentNode = this$static.lastNode.next):--this$static.currentIndex;
  $remove_11(this$static.lastNode);
  this$static.lastNode = null;
  --this$static.this$0.size_0;
}

function $verifyCurrentElement(this$static){
  if (!this$static.lastNode) {
    throw new IllegalStateException_0;
  }
}

function LinkedList$ListIteratorImpl_0(this$0, index_0, startNode){
  this.this$0 = this$0;
  this.currentNode = startNode;
  this.currentIndex = index_0;
}

defineSeed(348, 1, {}, LinkedList$ListIteratorImpl_0);
_.hasNext = function hasNext_7(){
  return this.currentNode != this.this$0.header;
}
;
_.hasPrevious = function hasPrevious_1(){
  return this.currentNode.prev != this.this$0.header;
}
;
_.next_0 = function next_8(){
  return $next_4(this);
}
;
_.previous = function previous_2(){
  if (this.currentNode.prev == this.this$0.header) {
    throw new NoSuchElementException_0;
  }
  this.lastNode = this.currentNode = this.currentNode.prev;
  --this.currentIndex;
  return this.lastNode.value_0;
}
;
_.remove_1 = function remove_24(){
  $remove_10(this);
}
;
_.currentIndex = 0;
_.lastNode = null;
function $remove_11(this$static){
  this$static.next.prev = this$static.prev;
  this$static.prev.next = this$static.next;
  this$static.next = this$static.prev = this$static;
}

function LinkedList$Node_0(){
  this.next = this.prev = this;
}

function LinkedList$Node_1(value_0, nextNode){
  this.value_0 = value_0;
  this.next = nextNode;
  this.prev = nextNode.prev;
  nextNode.prev.next = this;
  nextNode.prev = this;
}

defineSeed(349, 1, {}, LinkedList$Node_0, LinkedList$Node_1);
function MapEntryImpl_0(key, value_0){
  this.key = key;
  this.value_0 = value_0;
}

defineSeed(350, 316, makeCastMap([Q$Map$Entry]), MapEntryImpl_0);
_.getKey = function getKey_2(){
  return this.key;
}
;
_.getValue = function getValue_2(){
  return this.value_0;
}
;
_.setValue = function setValue_2(value_0){
  var old;
  old = this.value_0;
  this.value_0 = value_0;
  return old;
}
;
function NoSuchElementException_0(){
  RuntimeException_0.call(this);
}

defineSeed(351, 26, makeCastMap([Q$Serializable, Q$Throwable, Q$NoSuchElementException]), NoSuchElementException_0);
function $clinit_Random(){
  $clinit_Random = nullMethod;
  var i_0, i0, twoToTheXMinus24Tmp, twoToTheXMinus48Tmp;
  twoToTheXMinus24 = initDim(_3D_classLit, makeCastMap([Q$Serializable]), -1, 25, 1);
  twoToTheXMinus48 = initDim(_3D_classLit, makeCastMap([Q$Serializable]), -1, 33, 1);
  twoToTheXMinus48Tmp = 1.52587890625E-5;
  for (i0 = 32; i0 >= 0; i0--) {
    twoToTheXMinus48[i0] = twoToTheXMinus48Tmp;
    twoToTheXMinus48Tmp *= 0.5;
  }
  twoToTheXMinus24Tmp = 1;
  for (i_0 = 24; i_0 >= 0; i_0--) {
    twoToTheXMinus24[i_0] = twoToTheXMinus24Tmp;
    twoToTheXMinus24Tmp *= 0.5;
  }
}

function Random_0(){
  $clinit_Random();
  var hi, seed;
  seed = uniqueSeed++ + (new Date).getTime();
  hi = round_int(Math.floor(seed * 5.9604644775390625E-8)) & 16777215;
  round_int(seed - hi * 16777216);
}

defineSeed(352, 1, {}, Random_0);
var twoToTheXMinus24, twoToTheXMinus48, uniqueSeed = 0;
function equalsWithNullCheck(a, b){
  return maskUndefined(a) === maskUndefined(b) || a != null && equals__devirtual$(a, b);
}

function $clinit_Level(){
  $clinit_Level = nullMethod;
  ALL = new Level$LevelAll_0;
  CONFIG = new Level$LevelConfig_0;
  FINE = new Level$LevelFine_0;
  FINER = new Level$LevelFiner_0;
  FINEST = new Level$LevelFinest_0;
  INFO = new Level$LevelInfo_0;
  OFF = new Level$LevelOff_0;
  SEVERE = new Level$LevelSevere_0;
  WARNING = new Level$LevelWarning_0;
}

defineSeed(354, 1, makeCastMap([Q$Serializable]));
_.getName = function getName(){
  return 'DUMMY';
}
;
_.intValue_0 = function intValue_0(){
  return -1;
}
;
_.toString$ = function toString_34(){
  return this.getName();
}
;
var ALL, CONFIG, FINE, FINER, FINEST, INFO, OFF, SEVERE, WARNING;
function Level$LevelAll_0(){
}

defineSeed(355, 354, makeCastMap([Q$Serializable]), Level$LevelAll_0);
_.getName = function getName_0(){
  return 'ALL';
}
;
_.intValue_0 = function intValue_1(){
  return -2147483648;
}
;
function Level$LevelConfig_0(){
}

defineSeed(356, 354, makeCastMap([Q$Serializable]), Level$LevelConfig_0);
_.getName = function getName_1(){
  return 'CONFIG';
}
;
_.intValue_0 = function intValue_2(){
  return 700;
}
;
function Level$LevelFine_0(){
}

defineSeed(357, 354, makeCastMap([Q$Serializable]), Level$LevelFine_0);
_.getName = function getName_2(){
  return 'FINE';
}
;
_.intValue_0 = function intValue_3(){
  return 500;
}
;
function Level$LevelFiner_0(){
}

defineSeed(358, 354, makeCastMap([Q$Serializable]), Level$LevelFiner_0);
_.getName = function getName_3(){
  return 'FINER';
}
;
_.intValue_0 = function intValue_4(){
  return 400;
}
;
function Level$LevelFinest_0(){
}

defineSeed(359, 354, makeCastMap([Q$Serializable]), Level$LevelFinest_0);
_.getName = function getName_4(){
  return 'FINEST';
}
;
_.intValue_0 = function intValue_5(){
  return 300;
}
;
function Level$LevelInfo_0(){
}

defineSeed(360, 354, makeCastMap([Q$Serializable]), Level$LevelInfo_0);
_.getName = function getName_5(){
  return 'INFO';
}
;
_.intValue_0 = function intValue_6(){
  return 800;
}
;
function Level$LevelOff_0(){
}

defineSeed(361, 354, makeCastMap([Q$Serializable]), Level$LevelOff_0);
_.getName = function getName_6(){
  return 'OFF';
}
;
_.intValue_0 = function intValue_7(){
  return 2147483647;
}
;
function Level$LevelSevere_0(){
}

defineSeed(362, 354, makeCastMap([Q$Serializable]), Level$LevelSevere_0);
_.getName = function getName_7(){
  return 'SEVERE';
}
;
_.intValue_0 = function intValue_8(){
  return 1000;
}
;
function Level$LevelWarning_0(){
}

defineSeed(363, 354, makeCastMap([Q$Serializable]), Level$LevelWarning_0);
_.getName = function getName_8(){
  return 'WARNING';
}
;
_.intValue_0 = function intValue_9(){
  return 900;
}
;
function $addLogger(this$static, logger){
  if ($getLogger(this$static, logger.impl.name_0)) {
    return false;
  }
  $addLoggerWithoutDuplicationChecking(this$static, logger);
  return true;
}

function $addLoggerWithoutDuplicationChecking(this$static, logger){
  var name_0, parent_0, parentName;
  name_0 = logger.impl.name_0;
  parentName = $substring_0(name_0, 0, max_1(0, $lastIndexOf(name_0, fromCodePoint(46))));
  parent_0 = $getOrAddLogger(this$static, parentName);
  $put(this$static.loggerList, logger.impl.name_0, logger);
  $setParent_0(logger.impl, parent_0);
}

function $getLogger(this$static, name_0){
  return dynamicCast($get_1(this$static.loggerList, name_0), Q$Logger);
}

function $getOrAddLogger(this$static, name_0){
  var logger, newLogger;
  logger = dynamicCast($get_1(this$static.loggerList, name_0), Q$Logger);
  if (!logger) {
    newLogger = new Logger_0(name_0);
    $addLoggerWithoutDuplicationChecking(this$static, newLogger);
    return newLogger;
  }
  return logger;
}

function LogManager_0(){
  this.loggerList = new HashMap_0;
  this.rootLogger = new LogManager$RootLogger_0;
  $put(this.loggerList, '', this.rootLogger);
}

defineSeed(364, 1, {}, LogManager_0);
var singleton_0;
function LogManager$RootLogger_0(){
  $clinit_Logger();
  Logger_0.call(this, '');
  $setLevel_1(this, ($clinit_Level() , ALL));
}

defineSeed(365, 192, makeCastMap([Q$Logger]), LogManager$RootLogger_0);
function $setLoggerName(this$static, newName){
  this$static.loggerName = newName;
}

function LogRecord_0(level, msg){
  this.level = level;
  this.msg = msg;
  this.millis = fromDouble((new Date_1).jsdate.getTime());
}

defineSeed(366, 1, makeCastMap([Q$Serializable]), LogRecord_0);
_.loggerName = '';
_.millis = P0_longLit;
_.thrown = null;
function addSectorMesh(renderer, sector, planet){
  var delta, delta0, fbb, i_0, i0, i1, latRads, lonRads;
  fbb = new FloatBufferBuilderFromGeodetic_2(planet, ($clinit_Vector3D() , zero));
  $add_14(fbb, sector._upper);
  if (sector._upper._latitude._degrees != 90) {
    delta = (sector._upper._longitude._radians - sector._lower._longitude._radians) / 100;
    lonRads = sector._upper._longitude._radians;
    for (i0 = 0; i0 < 100; i0++) {
      lonRads -= delta;
      $add_13(fbb, sector._upper._latitude, fromRadians_0(sector._upper._latitude._radians, lonRads)._longitude, 5);
    }
  }
   else 
    $add_13(fbb, sector._upper._latitude, sector._lower._longitude, 5);
  delta0 = (sector._upper._latitude._radians - sector._lower._latitude._radians) / 100;
  latRads = sector._upper._latitude._radians;
  for (i_0 = 0; i_0 < 100; i_0++) {
    latRads -= delta0;
    $add_13(fbb, fromRadians_0(latRads, sector._lower._longitude._radians)._latitude, sector._lower._longitude, 5);
  }
  if (sector._lower._latitude._degrees != -90) {
    delta0 = (sector._upper._longitude._radians - sector._lower._longitude._radians) / 100;
    lonRads = sector._lower._longitude._radians;
    for (i0 = 0; i0 < 100; i0++) {
      lonRads += delta0;
      $add_13(fbb, sector._lower._latitude, fromRadians_0(sector._lower._latitude._radians, lonRads)._longitude, 5);
    }
  }
   else 
    $add_13(fbb, sector._lower._latitude, sector._upper._longitude, 5);
  delta0 = (sector._upper._latitude._radians - sector._lower._latitude._radians) / 100;
  latRads = sector._lower._latitude._radians;
  for (i1 = 0; i1 < 100; i1++) {
    latRads += delta0;
    $add_13(fbb, fromRadians_0(latRads, sector._upper._longitude._radians)._latitude, sector._upper._longitude, 5);
  }
  $addMesh_0(renderer, new DirectMesh_1(_lineStrip, new Vector3D_0(fbb._cx, fbb._cy, fbb._cz), new FloatBuffer_WebGL_2(fbb._values._array, fbb._values._size), 6, 1, new Color_0(1, 1, 0, 1), null, false));
}

function clearGlobe(){
  if (_widget) {
    $cancelCameraAnimation(_widget._g3mWidget);
    $unsinkEvents(_widget, 16121982);
    clearInterval($wnd.g3mWidgetResizeChecker);
  }
  _widget = null;
}

function goTo(lat, lon, hgt){
  !!_widget && $setCameraPosition_0(_widget, new Geodetic3D_0(new Angle_0(lat, lat / 180 * 3.141592653589793), new Angle_0(lon, lon / 180 * 3.141592653589793), hgt));
}

function jsCalls(){
  $wnd.G3M = {};
  $wnd.G3M.loadGlobe = loadGlobe;
  $wnd.G3M.clearGlobe = clearGlobe;
  $wnd.G3M.setPitch = setPitch;
  $wnd.G3M.setHeading = setHeading;
  $wnd.G3M.goTo = goTo;
  $wnd.G3M.getLatitude = $entry(function(){
    return $getGeodeticPosition(_widget._g3mWidget._nextCamera)._latitude._degrees;
  }
  );
  $wnd.G3M.getLongitude = $entry(function(){
    return $getGeodeticPosition(_widget._g3mWidget._nextCamera)._longitude._degrees;
  }
  );
  $wnd.G3M.getHeight = $entry(function(){
    return $getGeodeticPosition(_widget._g3mWidget._nextCamera)._height;
  }
  );
  $wnd.G3M.getHeading = $entry(function(){
    return $getHeadingPitchRoll(_widget._g3mWidget._nextCamera)._pitch._degrees;
  }
  );
  $wnd.G3M.getPitch = $entry(function(){
    return $getHeadingPitchRoll(_widget._g3mWidget._nextCamera)._pitch._degrees;
  }
  );
}

function loadGlobe(layer, wireframe, vertEx){
  var _meshRenderer, builder, g3mWidgetHolder, layerSector, layerServer, ls, planet;
  builder = new G3MBuilder_WebGL_0;
  ls = new LayerSet_0;
  $addLayer(ls, new BingMapsLayer_0(new TimeInterval_0(P9a7ec800_longLit)));
  _meshRenderer = new MeshRenderer_0;
  $addRenderer(builder, _meshRenderer);
  planet = new SphericalPlanet_0(new Sphere_1(($clinit_Vector3D() , zero), 6378137));
  $setPlanet(builder, planet);
  $setLayerSet((!builder._planetRendererBuilder && (builder._planetRendererBuilder = new PlanetRendererBuilder_0) , builder._planetRendererBuilder), ls);
  (!builder._planetRendererBuilder && (builder._planetRendererBuilder = new PlanetRendererBuilder_0) , builder._planetRendererBuilder)._incrementalTileQuality = true;
  $setRenderDebug((!builder._planetRendererBuilder && (builder._planetRendererBuilder = new PlanetRendererBuilder_0) , builder._planetRendererBuilder), wireframe);
  layerSector = ($clinit_Sector() , $clinit_Sector() , FULL_SPHERE);
  switch (layer) {
    case 0:
      layerServer = 'http://193.145.147.50:8080/DemoElevs/elevs/fix-16/';
      break;
    case 1:
      layerServer = 'http://193.145.147.50:8080/DemoElevs/elevs/var-16/';
      break;
    case 2:
      layerServer = 'http://193.145.147.50:8080/DemoElevs/elevs/fix-euro-16/';
      layerSector = fromDegrees_2(34, -10, 70, 52);
      break;
    case 3:
      layerServer = 'http://www.elnublo.net/temporal/var-euro-16/';
      layerSector = fromDegrees_2(34, -10, 70, 52);
      break;
    default:layerServer = '';
  }
  $setElevationDataProvider((!builder._planetRendererBuilder && (builder._planetRendererBuilder = new PlanetRendererBuilder_0) , builder._planetRendererBuilder), new PyramidElevationDataProvider_0(layerServer, layerSector));
  $setVerticalExaggeration((!builder._planetRendererBuilder && (builder._planetRendererBuilder = new PlanetRendererBuilder_0) , builder._planetRendererBuilder), vertEx);
  if (wireframe) {
    addSectorMesh(_meshRenderer, fromDegrees_2(50, -180, 90, -90), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(50, -90, 90, 0), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(50, 0, 90, 90), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(50, 90, 90, 180), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(0, -180, 50, -90), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(0, -90, 50, 0), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(0, 0, 50, 90), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(0, 90, 50, 180), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(-50, -180, 0, -90), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(-50, -90, 0, 0), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(-50, 0, 0, 90), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(-50, 90, 0, 180), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(-90, -180, -50, -90), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(-90, -90, -50, 0), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(-90, 0, -50, 90), planet);
    addSectorMesh(_meshRenderer, fromDegrees_2(-90, 90, -50, 180), planet);
  }
  _widget = $createWidget(builder);
  g3mWidgetHolder = get_0('g3mWidgetHolder');
  $add_1(g3mWidgetHolder, _widget);
}

function setHeading(heading){
  !!_widget && $setCameraHeading_0(_widget, new Angle_0(heading, heading / 180 * 3.141592653589793));
}

function setPitch(pitch){
  !!_widget && $setCameraPitch_0(_widget, new Angle_0(pitch, pitch / 180 * 3.141592653589793));
}

var _widget;
function $render(this$static, rc, parentGLState){
  this$static._enable && this$static.rawRender(rc, parentGLState);
}

function Mesh_0(){
  this._enable = true;
}

defineSeed(369, 1, makeCastMap([Q$Mesh]));
_.dispose = function dispose_0(){
}
;
_._enable = false;
function $computeBoundingVolume(this$static){
  var i_0, i3, maxX, maxY, maxZ, minX, minY, minZ, vertexCount, x_0, y_0, z_0;
  vertexCount = ~~(this$static._vertices._buffer.length / 3);
  if (vertexCount == 0) {
    return null;
  }
  minX = 1000000000000;
  minY = 1000000000000;
  minZ = 1000000000000;
  maxX = -1000000000000;
  maxY = -1000000000000;
  maxZ = -1000000000000;
  for (i_0 = 0; i_0 < vertexCount; i_0++) {
    i3 = i_0 * 3;
    x_0 = $get_8(this$static._vertices, i3) + this$static._center._x;
    y_0 = $get_8(this$static._vertices, i3 + 1) + this$static._center._y;
    z_0 = $get_8(this$static._vertices, i3 + 2) + this$static._center._z;
    x_0 < minX && (minX = x_0);
    x_0 > maxX && (maxX = x_0);
    y_0 < minY && (minY = y_0);
    y_0 > maxY && (maxY = y_0);
    z_0 < minZ && (minZ = z_0);
    z_0 > maxZ && (maxZ = z_0);
  }
  return new Box_0(new Vector3D_0(minX, minY, minZ), new Vector3D_0(maxX, maxY, maxZ));
}

function $dispose(this$static){
  this$static._ownsVertices && !!this$static._vertices && $dispose_19(this$static._vertices);
  !!this$static._translationMatrix && $dispose_12(this$static._translationMatrix);
  $_release(this$static._glState);
}

function $getBoundingVolume(this$static){
  !this$static._extent && (this$static._extent = $computeBoundingVolume(this$static));
  return this$static._extent;
}

defineSeed(368, 369, makeCastMap([Q$Mesh]));
_.dispose = function dispose_1(){
  $dispose(this);
}
;
_.getBoundingVolume = function getBoundingVolume(){
  return $getBoundingVolume(this);
}
;
_.rawRender = function rawRender(rc, parentGLState){
  var gl;
  $setParent_1(this._glState, parentGLState);
  gl = rc._gl;
  $drawElements(gl, this._primitive, this._indices, this._glState, rc._gpuProgramManager);
}
;
_._lineWidth = 0;
_._ownsVertices = false;
_._pointSize = 0;
_._polygonOffsetFactor = 0;
_._polygonOffsetFill = false;
_._polygonOffsetUnits = 0;
_._primitive = 0;
defineSeed(370, 1, {});
function $computeBoundingVolume_0(this$static){
  var i_0, i3, maxX, maxY, maxZ, minX, minY, minZ, vertexCount, x_0, y_0, z_0;
  vertexCount = ~~(this$static._vertices._buffer.length / 3);
  if (vertexCount == 0) {
    return null;
  }
  minX = 1000000000000;
  minY = 1000000000000;
  minZ = 1000000000000;
  maxX = -1000000000000;
  maxY = -1000000000000;
  maxZ = -1000000000000;
  for (i_0 = 0; i_0 < vertexCount; i_0++) {
    i3 = i_0 * 3;
    x_0 = $get_8(this$static._vertices, i3) + this$static._center._x;
    y_0 = $get_8(this$static._vertices, i3 + 1) + this$static._center._y;
    z_0 = $get_8(this$static._vertices, i3 + 2) + this$static._center._z;
    x_0 < minX && (minX = x_0);
    x_0 > maxX && (maxX = x_0);
    y_0 < minY && (minY = y_0);
    y_0 > maxY && (maxY = y_0);
    z_0 < minZ && (minZ = z_0);
    z_0 > maxZ && (maxZ = z_0);
  }
  return new Box_0(new Vector3D_0(minX, minY, minZ), new Vector3D_0(maxX, maxY, maxZ));
}

function $createGLState(this$static){
  $addGLFeature(this$static._glState, new GeometryGLFeature_0(this$static._vertices, this$static._depthTest, this$static._polygonOffsetFill, this$static._polygonOffsetFactor, this$static._polygonOffsetUnits, this$static._lineWidth, this$static._pointSize), false);
  !!this$static._normals && $addGLFeature(this$static._glState, new VertexNormalGLFeature_0(this$static._normals), false);
  !!this$static._translationMatrix && $addGLFeature(this$static._glState, new ModelTransformGLFeature_0($asMatrix44D(this$static._translationMatrix)), false);
  if (!!this$static._flatColor && !this$static._colors) {
    $addGLFeature(this$static._glState, new FlatColorGLFeature_0(this$static._flatColor, this$static._flatColor._alpha < 1, _srcAlpha, _oneMinusSrcAlpha), false);
    return;
  }
  !!this$static._colors && $addGLFeature(this$static._glState, new ColorGLFeature_0(this$static._colors, _srcAlpha, _oneMinusSrcAlpha), false);
}

function $dispose_0(this$static){
  if (this$static._owner) {
    !!this$static._vertices && $dispose_19(this$static._vertices);
    !!this$static._colors && $dispose_19(this$static._colors);
    !!this$static._normals && $dispose_19(this$static._normals);
  }
  !!this$static._translationMatrix && $dispose_12(this$static._translationMatrix);
  $_release(this$static._glState);
}

function $getBoundingVolume_0(this$static){
  !this$static._boundingVolume && (this$static._boundingVolume = $computeBoundingVolume_0(this$static));
  return this$static._boundingVolume;
}

function AbstractMesh_0(primitive, center, vertices, lineWidth, pointSize, flatColor, colors, depthTest, normals, polygonOffsetFill, polygonOffsetFactor, polygonOffsetUnits){
  Mesh_0.call(this);
  this._primitive = primitive;
  this._owner = true;
  this._vertices = vertices;
  this._flatColor = flatColor;
  this._colors = colors;
  this._boundingVolume = null;
  this._center = new Vector3D_1(center);
  this._translationMatrix = center._x != center._x || center._y != center._y || center._z != center._z || center._x == 0 && center._y == 0 && center._z == 0?null:new MutableMatrix44D_2(new MutableMatrix44D_1(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, center._x, center._y, center._z, 1));
  this._lineWidth = lineWidth;
  this._pointSize = pointSize;
  this._depthTest = depthTest;
  this._glState = new GLState_0;
  this._normals = normals;
  this._polygonOffsetFactor = polygonOffsetFactor;
  this._polygonOffsetUnits = polygonOffsetUnits;
  this._polygonOffsetFill = polygonOffsetFill;
  $createGLState(this);
}

defineSeed(371, 369, makeCastMap([Q$Mesh]));
_.dispose = function dispose_2(){
  $dispose_0(this);
}
;
_.getBoundingVolume = function getBoundingVolume_0(){
  return $getBoundingVolume_0(this);
}
;
_.rawRender = function rawRender_0(rc, parentGLState){
  $setParent_1(this._glState, parentGLState);
  this.rawRender_0(rc);
}
;
_._depthTest = false;
_._lineWidth = 0;
_._owner = false;
_._pointSize = 0;
_._polygonOffsetFactor = 0;
_._polygonOffsetFill = false;
_._polygonOffsetUnits = 0;
_._primitive = 0;
function $add_7(this$static, a){
  var r;
  r = this$static._radians + a._radians;
  return new Angle_0(r * 57.29577951308232, r);
}

function $description(this$static){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  $addDouble(isb, this$static._degrees);
  isb._string += 'd';
  s = isb._string;
  return s;
}

function $div(this$static, k){
  var r;
  r = this$static._radians / k;
  return new Angle_0(r * 57.29577951308232, r);
}

function $div_0(this$static, k){
  return this$static._radians / k._radians;
}

function $equals_1(this$static, obj){
  var other;
  if (this$static === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (Lorg_glob3_mobile_generated_Angle_2_classLit != getClass__devirtual$(obj)) {
    return false;
  }
  other = dynamicCast(obj, Q$Angle);
  if (neq(doubleToLongBits(this$static._radians), doubleToLongBits(other._radians))) {
    return false;
  }
  return true;
}

function $greaterThan(this$static, a){
  return this$static._radians > a._radians;
}

function $hashCode(this$static){
  var result, temp;
  temp = doubleToLongBits(this$static._radians);
  result = 31 + toInt(xor(temp, shru(temp, 32)));
  return result;
}

function $isBetween(this$static, min_0, max_0){
  return this$static._radians >= min_0._radians && this$static._radians <= max_0._radians;
}

function $isEquals(this$static, that){
  return $isEquals_2(this$static._degrees, that._degrees) || $isEquals_2(this$static._radians, that._radians);
}

function $lowerThan(this$static, a){
  return this$static._radians < a._radians;
}

function $sub(this$static, a){
  var r;
  r = this$static._radians - a._radians;
  return new Angle_0(r * 57.29577951308232, r);
}

function $times(this$static, k){
  var r;
  r = k * this$static._radians;
  return new Angle_0(r * 57.29577951308232, r);
}

function Angle_0(degrees, radians){
  this._degrees = degrees;
  this._radians = radians;
}

function Angle_1(angle){
  this._degrees = angle._degrees;
  this._radians = angle._radians;
}

function fromDegrees(degrees){
  return new Angle_0(degrees, degrees / 180 * 3.141592653589793);
}

function fromRadians(radians){
  return new Angle_0(radians * 57.29577951308232, radians);
}

function linearInterpolation(from, to, alpha_0){
  return fromRadians((1 - alpha_0) * from._radians + alpha_0 * to._radians);
}

function max_2(a1, a2){
  return a1._degrees > a2._degrees?a1:a2;
}

function midAngle(angle1, angle2){
  return fromRadians((angle1._radians + angle2._radians) / 2);
}

function min_1(a1, a2){
  return a1._degrees < a2._degrees?a1:a2;
}

defineSeed(372, 1, makeCastMap([Q$Angle]), Angle_0, Angle_1);
_.equals$ = function equals_21(obj){
  return $equals_1(this, obj);
}
;
_.hashCode$ = function hashCode_23(){
  return $hashCode(this);
}
;
_.toString$ = function toString_35(){
  return $description(this);
}
;
_._degrees = 0;
_._radians = 0;
function parse_1(buffer){
  var bufferSize, iterator, key, result, type_0, value_0;
  iterator = new ByteBufferIterator_0(buffer);
  bufferSize = $nextInt32(iterator);
  buffer._buffer.length != bufferSize && $logError(_instance_3, 'Invalid bufferSize, expected %d but got %d', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(bufferSize), valueOf_0(buffer._buffer.length)]));
  result = new JSONObject_2;
  while ($hasNext_0(iterator)) {
    type_0 = $nextUInt8(iterator);
    if (type_0 == 0) {
      break;
    }
    key = $nextZeroTerminatedString(iterator);
    value_0 = parseValue(type_0, iterator, false);
    !!value_0 && $put(result._entries, key, value_0);
  }
  return result;
}

function parseArray(iterator, nullAsObject){
  var result, type_0, value_0;
  $nextInt32(iterator);
  result = new JSONArray_2;
  while ($hasNext_0(iterator)) {
    type_0 = $nextUInt8(iterator);
    if (type_0 == 0) {
      break;
    }
    $nextZeroTerminatedString(iterator);
    value_0 = parseValue(type_0, iterator, nullAsObject);
    !!value_0 && $add_5(result._entries, value_0);
  }
  return result;
}

function parseBool(iterator){
  var b;
  b = $nextUInt8(iterator);
  if (b == 1) {
    return new JSONBoolean_2(true);
  }
  return new JSONBoolean_2(false);
}

function parseCustomizedArray(iterator, nullAsObject){
  var result, type_0, value_0;
  $nextInt32(iterator);
  result = new JSONArray_2;
  while ($hasNext_0(iterator)) {
    type_0 = $nextUInt8(iterator);
    if (type_0 == 0) {
      break;
    }
    value_0 = parseValue(type_0, iterator, nullAsObject);
    !!value_0 && $add_5(result._entries, value_0);
  }
  return result;
}

function parseDouble(iterator){
  var doubleValue, floatValue, l_0, byteArray, uint8Array, doubleView;
  doubleValue = (l_0 = $nextInt64(iterator) , byteArray = initDim(_3I_classLit, makeCastMap([Q$Serializable]), -1, 8, 1) , byteArray[0] = toInt(and(l_0, Pff_longLit)) , byteArray[1] = toInt(and(shr(l_0, 8), Pff_longLit)) , byteArray[2] = toInt(and(shr(l_0, 16), Pff_longLit)) , byteArray[3] = toInt(and(shr(l_0, 24), Pff_longLit)) , byteArray[4] = toInt(and(shr(l_0, 32), Pff_longLit)) , byteArray[5] = toInt(and(shr(l_0, 40), Pff_longLit)) , byteArray[6] = toInt(and(shr(l_0, 48), Pff_longLit)) , byteArray[7] = toInt(and(shr(l_0, 56), Pff_longLit)) , uint8Array = new Uint8Array(byteArray) , doubleView = new Float64Array(uint8Array.buffer) , doubleView[0]);
  floatValue = doubleValue;
  if (doubleValue == floatValue) {
    return new JSONFloat_0(floatValue);
  }
  return new JSONDouble_0(doubleValue);
}

function parseObject(iterator, nullAsObject){
  var key, result, type_0, value_0;
  $nextInt32(iterator);
  result = new JSONObject_2;
  while ($hasNext_0(iterator)) {
    type_0 = $nextUInt8(iterator);
    if (type_0 == 0) {
      break;
    }
    key = $nextZeroTerminatedString(iterator);
    value_0 = parseValue(type_0, iterator, nullAsObject);
    !!value_0 && $put(result._entries, key, value_0);
  }
  return result;
}

function parseString(iterator){
  var str, stringSize;
  stringSize = $nextInt32(iterator);
  str = $nextZeroTerminatedString(iterator);
  if (stringSize - 1 == str.length) {
    return new JSONString_2(str);
  }
  $logError(_instance_3, 'Invalid stringSize, expected %d but got %d', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(stringSize), valueOf_0(str.length)]));
  return null;
}

function parseValue(type_0, iterator, nullAsObject){
  switch (type_0) {
    case 2:
      return parseString(iterator);
    case 4:
      return parseArray(iterator, nullAsObject);
    case 1:
      return parseDouble(iterator);
    case 16:
      return new JSONInteger_0($nextInt32(iterator));
    case 18:
      return new JSONLong_0($nextInt64(iterator));
    case 8:
      return parseBool(iterator);
    case 3:
      return parseObject(iterator, nullAsObject);
    case 68:
      return parseCustomizedArray(iterator, nullAsObject);
    case 10:
      return nullAsObject?new JSONNull_2:null;
    default:{
        $logError(_instance_3, 'Unknown type %d', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf(type_0)]));
        return null;
      }

  }
}

function $add_8(this$static, ps){
  $add_5(this$static._sources, ps);
}

function $get_3(this$static, name_0){
  var i_0, size_0;
  size_0 = this$static._sources.size_0;
  for (i_0 = 0; i_0 < size_0; i_0++) {
    if (compareTo_6(dynamicCast($get_2(this$static._sources, i_0), Q$GPUProgramSources)._name, name_0) == 0) {
      return dynamicCast($get_2(this$static._sources, i_0), Q$GPUProgramSources);
    }
  }
  return null;
}

function GPUProgramFactory_0(){
  this._sources = new ArrayList_0;
}

defineSeed(375, 1, {}, GPUProgramFactory_0);
function BasicShadersGL2_0(){
  var sourcesBillboard, sourcesBillboard_TransformedTexCoor, sourcesColorMesh, sourcesDefault, sourcesFlatColor2DMesh, sourcesFlatColorMesh, sourcesFlatColorMesh_DirectionLight, sourcesFullTransformedTexCoorMultiTexturedMesh, sourcesFullTransformedTexCoorTexturedMesh, sourcesMultiTexturedMesh, sourcesNoColorMesh, sourcesShader, sourcesTextured2DMesh, sourcesTexturedMesh, sourcesTexturedMesh_DirectionLight, sourcesTransformedTexCoorMultiTexturedMesh, sourcesTransformedTexCoorTexturedMesh, sourcesTransformedTexCoorTexturedMesh_DirectionLight;
  GPUProgramFactory_0.call(this);
  sourcesBillboard = new GPUProgramSources_0('Billboard', 'attribute vec2 aTextureCoord;\nuniform mat4 uModelview;\nuniform vec4 uBillboardPosition;\nuniform vec2 uBillboardAnchor; //Anchor in UV (texture-like) coordinates\nuniform vec2 uTextureExtent;\nuniform vec2 uViewPortExtent;\nvarying vec2 TextureCoordOut;\nvoid main() {\ngl_Position = uModelview * uBillboardPosition;\nfloat fx = 2.0 * uTextureExtent.x / uViewPortExtent.x * gl_Position.w;\nfloat fy = 2.0 * uTextureExtent.y / uViewPortExtent.y * gl_Position.w;\ngl_Position.x += ((aTextureCoord.x - 0.5) - (uBillboardAnchor.x - 0.5)) * fx;\ngl_Position.y -= ((aTextureCoord.y - 0.5) - (uBillboardAnchor.y - 0.5)) * fy;\nTextureCoordOut = aTextureCoord;\n}\n', 'varying mediump vec2 TextureCoordOut;\nuniform sampler2D Sampler;\nvoid main() {\ngl_FragColor = texture2D(Sampler, TextureCoordOut);\n}\n');
  $add_5(this._sources, sourcesBillboard);
  sourcesBillboard_TransformedTexCoor = new GPUProgramSources_0('Billboard_TransformedTexCoor', 'attribute vec2 aTextureCoord;\nuniform mat4 uModelview;\nuniform vec4 uBillboardPosition;\nuniform vec2 uBillboardAnchor; //Anchor in UV (texture-like) coordinates\nuniform vec2 uTextureExtent;\nuniform vec2 uViewPortExtent;\nuniform mediump vec2 uTranslationTexCoord;\nuniform mediump vec2 uScaleTexCoord;\nvarying vec2 TextureCoordOut;\nvoid main() {\ngl_Position = uModelview * uBillboardPosition;\nfloat fx = 2.0 * uTextureExtent.x / uViewPortExtent.x * gl_Position.w;\nfloat fy = 2.0 * uTextureExtent.y / uViewPortExtent.y * gl_Position.w;\ngl_Position.x += ((aTextureCoord.x - 0.5) - (uBillboardAnchor.x - 0.5)) * fx;\ngl_Position.y -= ((aTextureCoord.y - 0.5) - (uBillboardAnchor.y - 0.5)) * fy;\nTextureCoordOut = (aTextureCoord * uScaleTexCoord) + uTranslationTexCoord;\n}\n', 'varying mediump vec2 TextureCoordOut;\nuniform sampler2D Sampler;\nvoid main() {\ngl_FragColor = texture2D(Sampler, TextureCoordOut);\n}\n');
  $add_5(this._sources, sourcesBillboard_TransformedTexCoor);
  sourcesColorMesh = new GPUProgramSources_0('ColorMesh', 'attribute vec4 aPosition;\nattribute vec4 aColor;\nuniform mat4 uModelview;\nuniform float uPointSize;\nvarying vec4 VertexColor;\nvoid main() {\ngl_Position = uModelview * aPosition;\nVertexColor = aColor;\ngl_PointSize = uPointSize;\n}\n', 'varying mediump vec4 VertexColor;\nvoid main() {\ngl_FragColor = VertexColor;\n}\n');
  $add_5(this._sources, sourcesColorMesh);
  sourcesDefault = new GPUProgramSources_0('Default', 'attribute vec4 aPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aColor;\nuniform mediump vec2 uTranslationTexCoord;\nuniform mediump vec2 uScaleTexCoord;\nuniform mat4 uModelview;\nuniform float uPointSize;\nvarying vec4 VertexColor;\nvarying vec2 TextureCoordOut;\nvoid main() {\ngl_Position = uModelview * aPosition;\nTextureCoordOut = (aTextureCoord * uScaleTexCoord) + uTranslationTexCoord;\nVertexColor = aColor;\ngl_PointSize = uPointSize;\n}\n', 'varying mediump vec2 TextureCoordOut;\nvarying mediump vec4 VertexColor;\nuniform sampler2D Sampler;\nuniform bool EnableTexture;\nuniform lowp vec4 uFlatColor;\nuniform bool EnableColorPerVertex;\nuniform bool EnableFlatColor;\nuniform mediump float FlatColorIntensity;\nuniform mediump float ColorPerVertexIntensity;\nvoid main() {\nif (EnableTexture) {\ngl_FragColor = texture2D(Sampler, TextureCoordOut);\nif (EnableFlatColor || EnableColorPerVertex) {\nlowp vec4 color;\nif (EnableFlatColor) {\ncolor = uFlatColor;\nif (EnableColorPerVertex) {\ncolor = color * VertexColor;\n}\n}\nelse {\ncolor = VertexColor;\n}\nlowp float intensity = (FlatColorIntensity + ColorPerVertexIntensity) / 2.0;\ngl_FragColor = mix(gl_FragColor,\nVertexColor,\nintensity);\n}\n}\nelse {\nif (EnableColorPerVertex) {\ngl_FragColor = VertexColor;\nif (EnableFlatColor) {\ngl_FragColor = gl_FragColor * uFlatColor;\n}\n}\nelse {\ngl_FragColor = uFlatColor;\n}\n}\n}\n');
  $add_5(this._sources, sourcesDefault);
  sourcesFlatColor2DMesh = new GPUProgramSources_0('FlatColor2DMesh', 'attribute vec2 aPosition2D;\nuniform float uPointSize;\nuniform vec2 uTranslation2D;\nuniform vec2 uViewPortExtent;\nvoid main() {\nvec2 pixel = aPosition2D;\npixel.x -= uViewPortExtent.x / 2.0;\npixel.y += uViewPortExtent.y / 2.0;\ngl_Position = vec4((pixel.x + uTranslation2D.x) / (uViewPortExtent.x / 2.0),\n(pixel.y - uTranslation2D.y) / (uViewPortExtent.y / 2.0),\n0, 1);\ngl_PointSize = uPointSize;\n}\n', 'uniform lowp vec4 uFlatColor;\nvoid main() {\ngl_FragColor = uFlatColor;\n}\n');
  $add_5(this._sources, sourcesFlatColor2DMesh);
  sourcesFlatColorMesh = new GPUProgramSources_0('FlatColorMesh', 'attribute vec4 aPosition;\nuniform mat4 uModelview;\nuniform float uPointSize;\nvoid main() {\ngl_Position = uModelview * aPosition;\ngl_PointSize = uPointSize;\n}\n', 'uniform lowp vec4 uFlatColor;\nvoid main() {\ngl_FragColor = uFlatColor;\n}\n');
  $add_5(this._sources, sourcesFlatColorMesh);
  sourcesFlatColorMesh_DirectionLight = new GPUProgramSources_0('FlatColorMesh_DirectionLight', 'attribute vec4 aPosition;\nattribute vec3 aNormal;\nuniform mat4 uModelview;\nuniform mat4 uModel;\nuniform float uPointSize;\nuniform vec3 uAmbientLightColor;\nuniform vec3 uDiffuseLightColor;\nuniform vec3 uDiffuseLightDirection; //We must normalize\nvarying vec3 lightColor;\nvoid main() {\nvec3 normalInModel = normalize( vec3(uModel * vec4(aNormal, 0.0) ));\nvec3 lightDirNormalized = normalize( uDiffuseLightDirection );\nfloat diffuseLightIntensity = max(dot(normalInModel, lightDirNormalized), 0.0);\ngl_Position = uModelview * aPosition;\ngl_PointSize = uPointSize;\nlightColor = uAmbientLightColor + uDiffuseLightColor * diffuseLightIntensity;\nlightColor.x = min(lightColor.x, 1.0);\nlightColor.y = min(lightColor.y, 1.0);\nlightColor.z = min(lightColor.z, 1.0);\n}\n', 'precision highp float;\nuniform lowp vec4 uFlatColor;\nvarying vec3 lightColor;\nvoid main() {\ngl_FragColor.r = uFlatColor.r * lightColor.r;\ngl_FragColor.g = uFlatColor.g * lightColor.r;\ngl_FragColor.b = uFlatColor.b * lightColor.r;\ngl_FragColor.a = uFlatColor.a;\n}\n');
  $add_5(this._sources, sourcesFlatColorMesh_DirectionLight);
  sourcesFullTransformedTexCoorMultiTexturedMesh = new GPUProgramSources_0('FullTransformedTexCoorMultiTexturedMesh', 'attribute vec4 aPosition;\nattribute vec2 aTextureCoord;\nattribute vec2 aTextureCoord2;\nuniform mat4 uModelview;\nuniform float uPointSize;\nvarying vec2 TextureCoordOut;\nvarying vec2 TextureCoordOut2;\nuniform mediump vec2 uTranslationTexCoord;\nuniform mediump vec2 uScaleTexCoord;\nuniform float uRotationAngleTexCoord;\nuniform vec2 uRotationCenterTexCoord;\nvoid main() {\ngl_Position = uModelview * aPosition;\nfloat s = sin( uRotationAngleTexCoord );\nfloat c = cos( uRotationAngleTexCoord );\nTextureCoordOut = (aTextureCoord * uScaleTexCoord) + uTranslationTexCoord;\nTextureCoordOut = TextureCoordOut - uRotationCenterTexCoord;\nTextureCoordOut = vec2((TextureCoordOut.x * c) + (TextureCoordOut.y * s),\n(-TextureCoordOut.x * s) + (TextureCoordOut.y * c));\nTextureCoordOut += uRotationCenterTexCoord;\nTextureCoordOut2 = aTextureCoord2;\ngl_PointSize = uPointSize;\n}\n', 'varying mediump vec2 TextureCoordOut;\nvarying mediump vec2 TextureCoordOut2;\nuniform sampler2D Sampler;\nuniform sampler2D Sampler2;\nvoid main() {\nmediump vec4 tex1 = texture2D(Sampler, TextureCoordOut);\nmediump vec4 tex2 = texture2D(Sampler2, TextureCoordOut2);\ngl_FragColor = tex1 * tex2;\n}\n');
  $add_5(this._sources, sourcesFullTransformedTexCoorMultiTexturedMesh);
  sourcesFullTransformedTexCoorTexturedMesh = new GPUProgramSources_0('FullTransformedTexCoorTexturedMesh', 'attribute vec4 aPosition;\nattribute vec2 aTextureCoord;\nuniform mediump vec2 uTranslationTexCoord;\nuniform mediump vec2 uScaleTexCoord;\nuniform mat4 uModelview;\nuniform float uPointSize;\nuniform float uRotationAngleTexCoord;\nuniform vec2 uRotationCenterTexCoord;\nvarying vec4 VertexColor;\nvarying vec2 TextureCoordOut;\nvoid main() {\ngl_Position = uModelview * aPosition;\nfloat s = sin( uRotationAngleTexCoord );\nfloat c = cos( uRotationAngleTexCoord );\nTextureCoordOut = (aTextureCoord * uScaleTexCoord) + uTranslationTexCoord;\nTextureCoordOut = TextureCoordOut - uRotationCenterTexCoord;\nTextureCoordOut = vec2((TextureCoordOut.x * c) + (TextureCoordOut.y * s),\n(-TextureCoordOut.x * s) + (TextureCoordOut.y * c));\nTextureCoordOut += uRotationCenterTexCoord;\ngl_PointSize = uPointSize;\n}\n', 'varying mediump vec2 TextureCoordOut;\nvarying mediump vec4 VertexColor;\nuniform sampler2D Sampler;\nvoid main() {\ngl_FragColor = texture2D(Sampler, TextureCoordOut);\n}\n');
  $add_5(this._sources, sourcesFullTransformedTexCoorTexturedMesh);
  sourcesMultiTexturedMesh = new GPUProgramSources_0('MultiTexturedMesh', 'attribute vec4 aPosition;\nattribute vec2 aTextureCoord;\nattribute vec2 aTextureCoord2;\nuniform mat4 uModelview;\nuniform float uPointSize;\nvarying vec2 TextureCoordOut;\nvarying vec2 TextureCoordOut2;\nvoid main() {\ngl_Position = uModelview * aPosition;\nTextureCoordOut = aTextureCoord;\nTextureCoordOut2 = aTextureCoord2;\ngl_PointSize = uPointSize;\n}\n', 'varying mediump vec2 TextureCoordOut;\nvarying mediump vec2 TextureCoordOut2;\nuniform sampler2D Sampler;\nuniform sampler2D Sampler2;\nvoid main() {\nmediump vec4 tex1 = texture2D(Sampler, TextureCoordOut);\nmediump vec4 tex2 = texture2D(Sampler2, TextureCoordOut2);\ngl_FragColor = tex1 * tex2;\n}\n');
  $add_5(this._sources, sourcesMultiTexturedMesh);
  sourcesNoColorMesh = new GPUProgramSources_0('NoColorMesh', 'attribute vec4 aPosition;\nuniform mat4 uModelview;\nuniform float uPointSize;\nvoid main() {\ngl_Position = uModelview * aPosition;\ngl_PointSize = uPointSize;\n}\n', 'void main() {\ngl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); //RED\n}\n');
  $add_5(this._sources, sourcesNoColorMesh);
  sourcesShader = new GPUProgramSources_0('Shader', 'attribute vec4 Position;\nattribute vec2 TextureCoord;\nattribute vec4 Color;\nuniform mediump vec2 TranslationTexCoord;\nuniform mediump vec2 ScaleTexCoord;\nuniform mat4 Projection;\nuniform mat4 Modelview;\nuniform bool BillBoard;\nuniform vec2 TextureExtent;\nuniform vec2 ViewPortExtent;\nuniform float PointSize;\nvarying vec4 VertexColor;\nvarying vec2 TextureCoordOut;\nvoid main() {\ngl_Position = Projection * Modelview * Position;\nif (BillBoard) {\ngl_Position.x += ((TextureCoord.x - 0.5) * 2.0 * TextureExtent.x / ViewPortExtent.x) * gl_Position.w;\ngl_Position.y -= ((TextureCoord.y - 0.5) * 2.0 * TextureExtent.y / ViewPortExtent.y) * gl_Position.w;\n}\nTextureCoordOut = (TextureCoord * ScaleTexCoord) + TranslationTexCoord;\nVertexColor = Color;\ngl_PointSize = PointSize;\n}\n', 'varying mediump vec2 TextureCoordOut;\nvarying mediump vec4 VertexColor;\nuniform sampler2D Sampler;\nuniform bool EnableTexture;\nuniform lowp vec4 FlatColor;\nuniform bool EnableColorPerVertex;\nuniform bool EnableFlatColor;\nuniform mediump float FlatColorIntensity;\nuniform mediump float ColorPerVertexIntensity;\nvoid main() {\nif (EnableTexture) {\ngl_FragColor = texture2D(Sampler, TextureCoordOut);\nif (EnableFlatColor || EnableColorPerVertex) {\nlowp vec4 color;\nif (EnableFlatColor) {\ncolor = FlatColor;\nif (EnableColorPerVertex) {\ncolor = color * VertexColor;\n}\n}\nelse {\ncolor = VertexColor;\n}\nlowp float intensity = (FlatColorIntensity + ColorPerVertexIntensity) / 2.0;\ngl_FragColor = mix(gl_FragColor,\nVertexColor,\nintensity);\n}\n}\nelse {\nif (EnableColorPerVertex) {\ngl_FragColor = VertexColor;\nif (EnableFlatColor) {\ngl_FragColor = gl_FragColor * FlatColor;\n}\n}\nelse {\ngl_FragColor = FlatColor;\n}\n}\n}\n');
  $add_5(this._sources, sourcesShader);
  sourcesTextured2DMesh = new GPUProgramSources_0('Textured2DMesh', 'attribute vec2 aPosition2D;\nattribute vec2 aTextureCoord;\nuniform float uPointSize;\nvarying vec2 TextureCoordOut;\nuniform vec2 uTranslation2D;\nuniform vec2 uViewPortExtent;\nvoid main() {\nvec2 pixel = aPosition2D;\npixel.x -= uViewPortExtent.x / 2.0;\npixel.y += uViewPortExtent.y / 2.0;\ngl_Position = vec4((pixel.x + uTranslation2D.x) / (uViewPortExtent.x / 2.0),\n(pixel.y - uTranslation2D.y) / (uViewPortExtent.y / 2.0),\n0, 1);\nTextureCoordOut = aTextureCoord;\ngl_PointSize = uPointSize;\n}\n', 'varying mediump vec2 TextureCoordOut;\nuniform sampler2D Sampler;\nvoid main() {\ngl_FragColor = texture2D(Sampler, TextureCoordOut);\n}\n');
  $add_5(this._sources, sourcesTextured2DMesh);
  sourcesTexturedMesh = new GPUProgramSources_0('TexturedMesh', 'attribute vec4 aPosition;\nattribute vec2 aTextureCoord;\nuniform mat4 uModelview;\nuniform float uPointSize;\nvarying vec2 TextureCoordOut;\nvoid main() {\ngl_Position = uModelview * aPosition;\nTextureCoordOut = aTextureCoord;\ngl_PointSize = uPointSize;\n}\n', 'varying mediump vec2 TextureCoordOut;\nuniform sampler2D Sampler;\nvoid main() {\ngl_FragColor = texture2D(Sampler, TextureCoordOut);\n}\n');
  $add_5(this._sources, sourcesTexturedMesh);
  sourcesTexturedMesh_DirectionLight = new GPUProgramSources_0('TexturedMesh_DirectionLight', 'attribute vec4 aPosition;\nattribute vec2 aTextureCoord;\nattribute vec3 aNormal;\nuniform mat4 uModelview;\nuniform mat4 uModel;\nuniform float uPointSize;\nvarying vec2 TextureCoordOut;\nuniform vec3 uDiffuseLightDirection; //MUST BE NORMALIZED IN SHADER\nvarying float diffuseLightIntensity;\nuniform vec3 uAmbientLightColor;\nuniform vec3 uDiffuseLightColor;\nvarying vec3 lightColor;\nvoid main() {\nvec3 normalInModel = normalize( vec3(uModel * vec4(aNormal, 0.0) ));\nvec3 lightDirNormalized = normalize( uDiffuseLightDirection );\nfloat diffuseLightIntensity = max(dot(normalInModel, lightDirNormalized), 0.0);\ngl_Position = uModelview * aPosition;\nTextureCoordOut = aTextureCoord;\ngl_PointSize = uPointSize;\nlightColor = uAmbientLightColor + uDiffuseLightColor * diffuseLightIntensity;\nlightColor.x = min(lightColor.x, 1.0);\nlightColor.y = min(lightColor.y, 1.0);\nlightColor.z = min(lightColor.z, 1.0);\n}\n', 'precision highp float;\nvarying mediump vec2 TextureCoordOut;\nuniform sampler2D Sampler;\nvarying vec3 lightColor;\nvoid main() {\nvec4 texColor = texture2D(Sampler, TextureCoordOut);\ngl_FragColor.r = texColor.r * lightColor.r;\ngl_FragColor.g = texColor.g * lightColor.r;\ngl_FragColor.b = texColor.b * lightColor.r;\ngl_FragColor.a = texColor.a;\n}\n');
  $add_5(this._sources, sourcesTexturedMesh_DirectionLight);
  sourcesTransformedTexCoorMultiTexturedMesh = new GPUProgramSources_0('TransformedTexCoorMultiTexturedMesh', 'attribute vec4 aPosition;\nattribute vec2 aTextureCoord;\nattribute vec2 aTextureCoord2;\nuniform mat4 uModelview;\nuniform float uPointSize;\nvarying vec2 TextureCoordOut;\nvarying vec2 TextureCoordOut2;\nuniform mediump vec2 uTranslationTexCoord;\nuniform mediump vec2 uScaleTexCoord;\nvoid main() {\ngl_Position = uModelview * aPosition;\nTextureCoordOut = (aTextureCoord * uScaleTexCoord) + uTranslationTexCoord;\nTextureCoordOut2 = aTextureCoord2;\ngl_PointSize = uPointSize;\n}\n', 'varying mediump vec2 TextureCoordOut;\nvarying mediump vec2 TextureCoordOut2;\nuniform sampler2D Sampler;\nuniform sampler2D Sampler2;\nvoid main() {\nmediump vec4 tex1 = texture2D(Sampler, TextureCoordOut);\nmediump vec4 tex2 = texture2D(Sampler2, TextureCoordOut2);\ngl_FragColor = tex1 * tex2;\n}\n');
  $add_5(this._sources, sourcesTransformedTexCoorMultiTexturedMesh);
  sourcesTransformedTexCoorTexturedMesh = new GPUProgramSources_0('TransformedTexCoorTexturedMesh', 'attribute vec4 aPosition;\nattribute vec2 aTextureCoord;\nuniform mediump vec2 uTranslationTexCoord;\nuniform mediump vec2 uScaleTexCoord;\nuniform mat4 uModelview;\nuniform float uPointSize;\nvarying vec4 VertexColor;\nvarying vec2 TextureCoordOut;\nvoid main() {\ngl_Position = uModelview * aPosition;\nTextureCoordOut = (aTextureCoord * uScaleTexCoord) + uTranslationTexCoord;\ngl_PointSize = uPointSize;\n}\n', 'varying mediump vec2 TextureCoordOut;\nvarying mediump vec4 VertexColor;\nuniform sampler2D Sampler;\nvoid main() {\ngl_FragColor = texture2D(Sampler, TextureCoordOut);\n}\n');
  $add_5(this._sources, sourcesTransformedTexCoorTexturedMesh);
  sourcesTransformedTexCoorTexturedMesh_DirectionLight = new GPUProgramSources_0('TransformedTexCoorTexturedMesh_DirectionLight', 'attribute vec4 aPosition;\nattribute vec2 aTextureCoord;\nattribute vec3 aNormal;\nuniform mat4 uModelview;\nuniform mat4 uModel;\nuniform float uPointSize;\nvarying vec2 TextureCoordOut;\nuniform mediump vec2 uTranslationTexCoord;\nuniform mediump vec2 uScaleTexCoord;\nuniform vec3 uDiffuseLightDirection; //MUST BE NORMALIZED\nvarying float diffuseLightIntensity;\nuniform vec3 uAmbientLightColor;\nuniform vec3 uDiffuseLightColor;\nvarying vec3 lightColor;\nvoid main() {\nvec3 normalInModel = normalize( vec3(uModel * vec4(aNormal, 0.0) ));\nvec3 lightDirNormalized = normalize( uDiffuseLightDirection );\nfloat diffuseLightIntensity = max(dot(normalInModel, lightDirNormalized), 0.0);\ngl_Position = uModelview * aPosition;\nTextureCoordOut = (aTextureCoord * uScaleTexCoord) + uTranslationTexCoord;\ngl_PointSize = uPointSize;\nlightColor = uAmbientLightColor + uDiffuseLightColor * diffuseLightIntensity;\nlightColor.x = min(lightColor.x, 1.0);\nlightColor.y = min(lightColor.y, 1.0);\nlightColor.z = min(lightColor.z, 1.0);\n}\n', 'precision highp float;\nvarying mediump vec2 TextureCoordOut;\nuniform sampler2D Sampler;\nvarying vec3 lightColor;\nvoid main() {\nvec4 texColor = texture2D(Sampler, TextureCoordOut);\ngl_FragColor.r = texColor.r * lightColor.r;\ngl_FragColor.g = texColor.g * lightColor.r;\ngl_FragColor.b = texColor.b * lightColor.r;\ngl_FragColor.a = texColor.a;\n}\n');
  $add_5(this._sources, sourcesTransformedTexCoorTexturedMesh_DirectionLight);
}

defineSeed(374, 375, {}, BasicShadersGL2_0);
defineSeed(377, 1, {});
_.toString$ = function toString_36(){
  return 'BilinearInterpolator';
}
;
function BilinearInterpolator_0(){
}

defineSeed(376, 377, {}, BilinearInterpolator_0);
_.toString$ = function toString_37(){
  return 'BilinearInterpolator';
}
;
function $addInfo(this$static, info){
  $add_5(this$static._layerInfo, info);
}

function $isAvailable(this$static){
  if (!this$static._enable) {
    return false;
  }
  return true;
}

function $notifyChanges(this$static){
  if (this$static._layerSet) {
    $layersChanged(this$static._layerSet);
    $changedInfo(this$static._layerSet);
  }
}

function $onLayerTouchEventListener(this$static){
  var i_0, listenersSize;
  listenersSize = this$static._listeners.size_0;
  for (i_0 = 0; i_0 < listenersSize; i_0++) {
    throwClassCastExceptionUnlessNull($get_2(this$static._listeners, i_0));
  }
  return false;
}

defineSeed(380, 1, makeCastMap([Q$Layer]));
_.initialize_0 = function initialize_1(context){
}
;
_.toString$ = function toString_38(){
  return this.description_0();
}
;
_._enable = false;
_._transparency = 0;
function $getParentTileOfSuitableLevel(this$static, tile){
  var maxLevel, result;
  maxLevel = this$static._parameters._maxLevel;
  result = tile;
  while (!!result && result._level > maxLevel) {
    result = result._parent;
  }
  return result;
}

function $requestImage(this$static, tile, downloader, tileDownloadPriority, logDownloadActivity, listener){
  var suitableTile, url_0;
  suitableTile = $getParentTileOfSuitableLevel(this$static, tile);
  url_0 = this$static.createURL(suitableTile);
  logDownloadActivity && $logInfo(_instance_3, 'Downloading %s', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [url_0._path]));
  return $requestImage_0(downloader, url_0, tileDownloadPriority, listener);
}

function $setParameters(this$static, parameters){
  if (this$static._parameters != parameters) {
    this$static._parameters = null;
    this$static._parameters = parameters;
    $notifyChanges(this$static);
  }
}

function RasterLayer_0(parameters, layerInfo){
  this._listeners = new ArrayList_0;
  this._errors = new ArrayList_0;
  this._transparency = 1;
  this._layerInfo = layerInfo;
  this._layerSet = null;
  this._enable = true;
  this._parameters = parameters;
  this._tileImageProvider = null;
}

defineSeed(379, 380, makeCastMap([Q$Layer]));
_.createTileImageProvider = function createTileImageProvider(rc, layerTilesRenderParameters){
  !this._tileImageProvider && (this._tileImageProvider = new RasterLayerTileImageProvider_0(this, rc._downloader));
  ++this._tileImageProvider._referenceCounter;
  return this._tileImageProvider;
}
;
_.getLayerTilesRenderParametersVector = function getLayerTilesRenderParametersVector(){
  var parametersVector;
  parametersVector = new ArrayList_0;
  !!this._parameters && $add_5(parametersVector, this._parameters);
  return parametersVector;
}
;
_.selectLayerTilesRenderParameters = function selectLayerTilesRenderParameters(index_0){
  throw new RuntimeException_1('Logic error');
}
;
function $onDowloadMetadata(this$static, buffer){
  var i_0, imageHeight, imageUrl, imageUrlSubdomain, imageUrlSubdomains, imageUrlSubdomainsJS, imageWidth, jsonBaseObject, jsonObject, meanfulResource, parser, resource, resourceSets, resources, zoomMax, zoomMin, jsString, object;
  parser = _instance_2;
  jsonBaseObject = $parse($getAsString_0(buffer));
  if (!jsonBaseObject) {
    $add_5(this$static._metadataErrors, "BingMapsLayer: Can't parse json metadata.");
    $logError(_instance_3, "BingMapsLayer: Can't parse json metadata.", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  jsonObject = jsonBaseObject.asObject();
  if (!jsonObject) {
    $add_5(this$static._metadataErrors, 'BingMapsLayer: Error while parsing json metadata, root object is not an json-object.');
    $logError(_instance_3, 'BingMapsLayer: Error while parsing json metadata, root object is not an json-object.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    !!jsonBaseObject && jsonBaseObject.dispose();
    return;
  }
  $getAsString(jsonObject, 'brandLogoUri');
  $getAsString(jsonObject, 'copyright');
  resourceSets = $getAsArray(jsonObject, 'resourceSets');
  if (!resourceSets) {
    $add_5(this$static._metadataErrors, 'BingMapsLayer: Error while parsing json metadata, resourceSets field not found.');
    $logError(_instance_3, 'BingMapsLayer: Error while parsing json metadata, resourceSets field not found.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    !!jsonBaseObject && jsonBaseObject.dispose();
    return;
  }
  if (resourceSets._entries.size_0 != 1) {
    $add_5(this$static._metadataErrors, 'BingMapsLayer: Error while parsing json metadata, resourceSets has more elements than the current implementation can handle.');
    $logError(_instance_3, 'BingMapsLayer: Error while parsing json metadata, resourceSets has %d elements (the current implementation can only handle 1 element).', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(resourceSets._entries.size_0)]));
    !!jsonBaseObject && jsonBaseObject.dispose();
    return;
  }
  resource = $getAsObject(resourceSets, 0);
  if (!resource) {
    $add_5(this$static._metadataErrors, "BingMapsLayer: Error while parsing json metadata, can't find resource jsonobject.");
    $logError(_instance_3, "BingMapsLayer: Error while parsing json metadata, can't find resource jsonobject.", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    !!jsonBaseObject && jsonBaseObject.dispose();
    return;
  }
  resources = $getAsArray(resource, 'resources');
  if (resources._entries.size_0 != 1) {
    $add_5(this$static._metadataErrors, 'BingMapsLayer: Error while parsing json metadata, resources has more elements than the current implementation can handle.');
    $logError(_instance_3, 'BingMapsLayer: Error while parsing json metadata, resources has %d elements (the current implementation can only handle 1 element).', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(resources._entries.size_0)]));
    !!jsonBaseObject && jsonBaseObject.dispose();
    return;
  }
  meanfulResource = $getAsObject(resources, 0);
  if (!meanfulResource) {
    $add_5(this$static._metadataErrors, "BingMapsLayer: Error while parsing json metadata, can't find a meanfulResource JSONObject.");
    $logError(_instance_3, "BingMapsLayer: Error while parsing json metadata, can't find a meanfulResource JSONObject.", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    !!jsonBaseObject && jsonBaseObject.dispose();
    return;
  }
  imageUrl = $getAsString(meanfulResource, 'imageUrl');
  if (imageUrl.length == 0) {
    $add_5(this$static._metadataErrors, "BingMapsLayer: Error while parsing json metadata, can't find a imageUrl String.");
    $logError(_instance_3, "BingMapsLayer: Error while parsing json metadata, can't find a imageUrl String.", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    !!jsonBaseObject && jsonBaseObject.dispose();
    return;
  }
  imageWidth = round_int($getAsNumber_1(meanfulResource, 'imageWidth', 256));
  imageHeight = round_int($getAsNumber_1(meanfulResource, 'imageHeight', 256));
  zoomMin = round_int($getAsNumber_1(meanfulResource, 'zoomMin', 1));
  zoomMax = round_int($getAsNumber_1(meanfulResource, 'zoomMax', 1));
  imageUrlSubdomainsJS = $getAsArray(meanfulResource, 'imageUrlSubdomains');
  if (!imageUrlSubdomainsJS) {
    $add_5(this$static._metadataErrors, "BingMapsLayer: Error while parsing json metadata, can't find a imageUrlSubdomains JSONArray.");
    $logError(_instance_3, "BingMapsLayer: Error while parsing json metadata, can't find a imageUrlSubdomains JSONArray.", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    !!jsonBaseObject && jsonBaseObject.dispose();
    return;
  }
  imageUrlSubdomains = new ArrayList_0;
  for (i_0 = 0; i_0 < imageUrlSubdomainsJS._entries.size_0; i_0++) {
    imageUrlSubdomain = (jsString = (object = dynamicCast($get_2(imageUrlSubdomainsJS._entries, i_0), Q$JSONBaseObject) , !object?null:object.asString()) , !jsString?'':jsString._value);
    imageUrlSubdomain.length != 0 && (setCheck(imageUrlSubdomains.array, imageUrlSubdomains.size_0++, imageUrlSubdomain) , true);
  }
  if (imageUrlSubdomains.size_0 == 0) {
    $add_5(this$static._metadataErrors, "BingMapsLayer: Error while parsing json metadata, can't find any imageUrlSubdomain String.");
    $logError(_instance_3, "BingMapsLayer: Error while parsing json metadata, can't find any imageUrlSubdomain String.", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    !!jsonBaseObject && jsonBaseObject.dispose();
    return;
  }
  $addInfo(this$static, new Info_0);
  this$static._imageUrl = imageUrl;
  this$static._imageUrlSubdomains = imageUrlSubdomains;
  this$static._isInitialized = true;
  $setParameters(this$static, new LayerTilesRenderParameters_0(($clinit_Sector() , $clinit_Sector() , FULL_SPHERE), 1, 1, $max_2(zoomMin, this$static._initialLevel), $min_0(zoomMax, this$static._maxLevel), new Vector2I_0(imageWidth, imageHeight), new Vector2S_0(16, 16), true));
  !!jsonBaseObject && jsonBaseObject.dispose();
}

function $onDownloadErrorMetadata(this$static){
  $add_5(this$static._metadataErrors, 'BingMapsLayer: Error while downloading metadata. Please review your key');
  $notifyChanges(this$static);
  $logError(_instance_3, 'BingMapsLayer: Error while downloading metadata.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
}

function BingMapsLayer_0(){
  BingMapsLayer_1.call(this, new ArrayList_0);
}

function BingMapsLayer_1(layerInfo){
  RasterLayer_0.call(this, null, layerInfo);
  this._imageUrlSubdomains = new ArrayList_0;
  this._metadataErrors = new ArrayList_0;
  this._imagerySet = 'Aerial';
  this._culture = 'en-US';
  this._key = 'AnU5uta7s5ql_HTrRZcPLI4_zotvNefEeSxIClF1Jf7eS-mLig1jluUdCoecV7jc';
  this._initialLevel = 2;
  this._maxLevel = 25;
  this._isInitialized = false;
}

function getQuadKey(zoom, column, row){
  var i_0, isb, result, t, zoom_i;
  isb = new StringBuilder_WebGL_0;
  for (i_0 = 1; i_0 <= zoom; i_0++) {
    zoom_i = zoom - i_0;
    t = (~~row >> zoom_i & 1) << 1 | ~~column >> zoom_i & 1;
    isb._string += t;
  }
  result = isb._string;
  return result;
}

defineSeed(378, 379, makeCastMap([Q$Layer]), BingMapsLayer_0);
_.createURL = function createURL(tile){
  var column, level, numRows, path, quadkey, row, subdomain, subdomainsIndex, subdomainsSize;
  level = tile._level;
  column = tile._column;
  numRows = round_int(pow_0(2, level));
  row = numRows - tile._row - 1;
  subdomainsSize = this._imageUrlSubdomains.size_0;
  subdomain = '';
  if (subdomainsSize > 0) {
    subdomainsIndex = (level + column + row < 0?-(level + column + row):level + column + row) % subdomainsSize;
    subdomain = dynamicCast($get_2(this._imageUrlSubdomains, subdomainsIndex), Q$String);
  }
  quadkey = getQuadKey(level, column, row);
  path = this._imageUrl;
  path = $replace(path, '{subdomain}', subdomain);
  path = $replace(path, '{quadkey}', quadkey);
  path = $replace(path, '{culture}', this._culture);
  return new URL_2(path);
}
;
_.description_0 = function description(){
  return '[BingMapsLayer]';
}
;
_.getDataSector = function getDataSector(){
  return $clinit_Sector() , $clinit_Sector() , FULL_SPHERE;
}
;
_.getRenderState = function getRenderState(){
  $clear(this._errors);
  this._metadataErrors.size_0 > 0 && $addAll(this._errors, this._metadataErrors);
  compareTo_6(this._imagerySet, '') == 0 && $add_5(this._errors, 'Missing layer parameter: imagerySet');
  compareTo_6(this._key, '') == 0 && $add_5(this._errors, 'Missing layer parameter: key');
  if (this._errors.size_0 > 0) {
    return $clinit_RenderState() , new RenderState_0(this._errors);
  }
  return this._isInitialized?($clinit_RenderState() , $clinit_RenderState() , READY):($clinit_RenderState() , $clinit_RenderState() , BUSY);
}
;
_.initialize_0 = function initialize_2(context){
  var url_0;
  $clear(this._metadataErrors);
  url_0 = new URL_2('http://dev.virtualearth.net/REST/v1/Imagery/Metadata/' + this._imagerySet + '?key=' + this._key);
  $requestBuffer(context._downloader, url_0, P186a0_longLit, (new TimeInterval_0(P5265c00_longLit) , new BingMapsLayer_MetadataBufferDownloadListener_0(this)));
}
;
_.rawContribution = function rawContribution(tile){
  var requestedImageSector, tileP;
  tileP = $getParentTileOfSuitableLevel(this, tile);
  if (!tileP) {
    return null;
  }
   else if (tile == tileP) {
    return this._transparency < 1?fullCoverageTransparent(this._transparency):($clinit_TileImageContribution() , ++FULL_COVERAGE_OPAQUE._referenceCounter , $clinit_TileImageContribution() , FULL_COVERAGE_OPAQUE);
  }
   else {
    requestedImageSector = tileP._sector;
    return this._transparency < 1?partialCoverageTransparent(requestedImageSector, this._transparency):($clinit_TileImageContribution() , new TileImageContribution_0(requestedImageSector, false, 1));
  }
}
;
_.toString$ = function toString_39(){
  return '[BingMapsLayer]';
}
;
_._initialLevel = 0;
_._isInitialized = false;
_._maxLevel = 0;
defineSeed(382, 1, {});
_.dispose = function dispose_3(){
}
;
function BingMapsLayer_MetadataBufferDownloadListener_0(bingMapsLayer){
  this._bingMapsLayer = bingMapsLayer;
}

defineSeed(381, 382, {}, BingMapsLayer_MetadataBufferDownloadListener_0);
_.onCancel = function onCancel(url_0){
}
;
_.onCanceledDownload = function onCanceledDownload(url_0, data_0, expired){
}
;
_.onDownload = function onDownload(url_0, buffer, expired){
  $onDowloadMetadata(this._bingMapsLayer, buffer);
}
;
_.onError = function onError(url_0){
  $onDownloadErrorMetadata(this._bingMapsLayer);
}
;
defineSeed(383, 1, {});
_.dispose = function dispose_4(){
}
;
function $getCornersArray(this$static){
  if (this$static._cornersArray == null) {
    this$static._cornersArray = initDim(_3Lorg_glob3_mobile_generated_Vector3F_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Vector3F, 8, 0);
    this$static._cornersArray[0] = new Vector3F_0(this$static._lower._x, this$static._lower._y, this$static._lower._z);
    this$static._cornersArray[1] = new Vector3F_0(this$static._lower._x, this$static._lower._y, this$static._upper._z);
    this$static._cornersArray[2] = new Vector3F_0(this$static._lower._x, this$static._upper._y, this$static._lower._z);
    this$static._cornersArray[3] = new Vector3F_0(this$static._lower._x, this$static._upper._y, this$static._upper._z);
    this$static._cornersArray[4] = new Vector3F_0(this$static._upper._x, this$static._lower._y, this$static._lower._z);
    this$static._cornersArray[5] = new Vector3F_0(this$static._upper._x, this$static._lower._y, this$static._upper._z);
    this$static._cornersArray[6] = new Vector3F_0(this$static._upper._x, this$static._upper._y, this$static._lower._z);
    this$static._cornersArray[7] = new Vector3F_0(this$static._upper._x, this$static._upper._y, this$static._upper._z);
  }
  return this$static._cornersArray;
}

function $touchesBox(this$static, that){
  if (this$static._lower._x > that._upper._x) {
    return false;
  }
  if (this$static._upper._x < that._lower._x) {
    return false;
  }
  if (this$static._lower._y > that._upper._y) {
    return false;
  }
  if (this$static._upper._y < that._lower._y) {
    return false;
  }
  if (this$static._lower._z > that._upper._z) {
    return false;
  }
  if (this$static._upper._z < that._lower._z) {
    return false;
  }
  return true;
}

function Box_0(lower, upper){
  this._lower = new Vector3D_1(lower);
  this._upper = new Vector3D_1(upper);
}

defineSeed(384, 383, {}, Box_0);
_.dispose = function dispose_5(){
}
;
_.mergedWith = function mergedWith(that){
  if (!that) {
    return null;
  }
  return that.mergedWithBox(this);
}
;
_.mergedWithBox = function mergedWithBox(that){
  var lowerX, lowerY, lowerZ, upperX, upperY, upperZ;
  return lowerX = $min_1(this._lower._x, that._lower._x) , lowerY = $min_1(this._lower._y, that._lower._y) , lowerZ = $min_1(this._lower._z, that._lower._z) , upperX = $max_0(this._upper._x, that._upper._x) , upperY = $max_0(this._upper._y, that._upper._y) , upperZ = $max_0(this._upper._z, that._upper._z) , new Box_0(new Vector3D_0(lowerX, lowerY, lowerZ), new Vector3D_0(upperX, upperY, upperZ));
}
;
_.mergedWithSphere = function mergedWithSphere(that){
  return $mergedWithBox(that, this);
}
;
_.touchesFrustum = function touchesFrustum(frustum){
  return $touchesWithBox(frustum, this);
}
;
_._cornersArray = null;
function $getElevationAt(this$static, latitude, longitude){
  var alphaX, alphaY, dX, dY, heightNextX, heightNextY, heightX, heightY, nextX, nextY, result, u, uv, v, valueNE, valueNW, valueSE, valueSW, x_0, y_0, alphaSW, alphaSE, alphaNE, alphaNW;
  uv = $getUVCoordinates(this$static._sector, latitude, longitude);
  u = uv._x;
  v = uv._y;
  if (u < 0 || u > 1 || v < 0 || v > 1) {
    return NaN;
  }
  dX = u * (this$static._width - 1);
  dY = (1 - v) * (this$static._height - 1);
  x_0 = round_int(dX);
  y_0 = round_int(dY);
  nextX = x_0 + 1;
  nextY = y_0 + 1;
  alphaY = dY - y_0;
  alphaX = dX - x_0;
  if (x_0 == dX) {
    if (y_0 == dY) {
      result = this$static.getElevationAt(x_0, y_0);
    }
     else {
      heightY = this$static.getElevationAt(x_0, y_0);
      if (heightY != heightY) {
        return NaN;
      }
      heightNextY = this$static.getElevationAt(x_0, nextY);
      if (heightNextY != heightNextY) {
        return NaN;
      }
      result = heightY + (heightNextY - heightY) * alphaY;
    }
  }
   else {
    if (y_0 == dY) {
      heightX = this$static.getElevationAt(x_0, y_0);
      if (heightX != heightX) {
        return NaN;
      }
      heightNextX = this$static.getElevationAt(nextX, y_0);
      if (heightNextX != heightNextX) {
        return NaN;
      }
      result = heightX + (heightNextX - heightX) * alphaX;
    }
     else {
      valueNW = this$static.getElevationAt(x_0, y_0);
      if (valueNW != valueNW) {
        return NaN;
      }
      valueNE = this$static.getElevationAt(nextX, y_0);
      if (valueNE != valueNE) {
        return NaN;
      }
      valueSE = this$static.getElevationAt(nextX, nextY);
      if (valueSE != valueSE) {
        return NaN;
      }
      valueSW = this$static.getElevationAt(x_0, nextY);
      if (valueSW != valueSW) {
        return NaN;
      }
      result = (!this$static._interpolator && (this$static._interpolator = new BilinearInterpolator_0) , alphaSW = (1 - alphaX) * alphaY , alphaSE = alphaX * alphaY , alphaNE = alphaX * (1 - alphaY) , alphaNW = (1 - alphaX) * (1 - alphaY) , alphaSW * valueSW + alphaSE * valueSE + alphaNE * valueNE + alphaNW * valueNW);
    }
  }
  return result;
}

function $getExtent(this$static){
  return new Vector2I_0(this$static._width, this$static._height);
}

function ElevationData_0(sector, extent){
  this._sector = new Sector_1(sector);
  this._width = extent._x;
  this._height = extent._y;
  new Geodetic2D_0($div(sector._deltaLatitude, extent._y), $div(sector._deltaLongitude, extent._x));
  this._interpolator = null;
}

defineSeed(386, 1, {});
_.dispose = function dispose_6(){
}
;
_._height = 0;
_._width = 0;
defineSeed(385, 386, {});
_.dispose = function dispose_7(){
}
;
_.getElevationAt = function getElevationAt(x_0, y_0){
  var index_0;
  index_0 = (this._height - 1 - y_0) * this._width + x_0;
  return $getValueInBufferAt(this, index_0) + this._deltaHeight;
}
;
_._bufferSize = 0;
_._deltaHeight = 0;
function gently(x_0){
  if (x_0 < 0.25) {
    return 2.6666666666666665 * x_0 * x_0;
  }
  if (x_0 > 0.75) {
    return -2.6666666666666665 * x_0 * x_0 + 5.333333333333333 * x_0 + -1.6666666666666665;
  }
  return 1.3333333333333333 * x_0 + -0.16666666666666666;
}

function pace(f){
  var result;
  if (f < 0)
    return 0;
  if (f > 1)
    return 1;
  result = gently(f);
  if (result < 0)
    return 0;
  if (result > 1)
    return 1;
  return result;
}

defineSeed(389, 1, {});
_.dispose = function dispose_8(){
}
;
defineSeed(388, 389, {});
_.doStep = function doStep(rc, when){
}
;
_.isDone = function isDone(rc, when){
  return false;
}
;
function BusyMeshEffect_0(renderer){
  this._renderer = renderer;
}

defineSeed(387, 388, {}, BusyMeshEffect_0);
_.cancel_0 = function cancel_2(when){
}
;
_.doStep = function doStep_0(rc, when){
  var deltaDegrees, ellapsed, now_0;
  now_0 = when._milliseconds;
  ellapsed = sub_0(now_0, this._lastMS);
  this._lastMS = now_0;
  deltaDegrees = 0.3 * toDouble(ellapsed);
  $incDegrees(this._renderer, deltaDegrees);
}
;
_.start_1 = function start_1(rc, when){
  this._lastMS = when._milliseconds;
}
;
_.stop_0 = function stop_0(rc, when){
}
;
_._lastMS = P0_longLit;
function $createGLState_0(this$static){
  if (!this$static._projectionFeature) {
    this$static._projectionFeature = new ProjectionGLFeature_0($asMatrix44D(this$static._projectionMatrix));
    $addGLFeature(this$static._glState, this$static._projectionFeature, false);
  }
   else {
    $setMatrix(this$static._projectionFeature, $asMatrix44D(this$static._projectionMatrix));
  }
  if (!this$static._modelFeature) {
    this$static._modelFeature = new ModelGLFeature_0($asMatrix44D(this$static._modelviewMatrix));
    $addGLFeature(this$static._glState, this$static._modelFeature, false);
  }
   else {
    $setMatrix(this$static._modelFeature, $asMatrix44D(this$static._modelviewMatrix));
  }
}

function $createMesh(rc){
  var angle, c, camera, colors, indices, indicesCounter, minSize, outerRadius, result, s, step, vertices, viewPortHeight, viewPortWidth;
  vertices = new FloatBufferBuilderFromCartesian3D_0(($clinit_Vector3D() , zero));
  colors = new FloatBufferBuilderFromColor_0;
  indices = new ShortBufferBuilder_0;
  indicesCounter = 0;
  camera = rc._currentCamera;
  viewPortWidth = camera._viewPortWidth;
  viewPortHeight = camera._viewPortHeight;
  minSize = viewPortWidth < viewPortHeight?viewPortWidth:viewPortHeight;
  outerRadius = minSize / 15;
  for (step = 0; step <= 5; step++) {
    angle = step * 2 * 3.141592653589793 / 5;
    c = cos_0(angle);
    s = sin_0(angle);
    $add_11(vertices, 0, 0);
    $add_11(vertices, outerRadius * c, outerRadius * s);
    $add_19(indices, narrow_short(indicesCounter++));
    $add_19(indices, narrow_short(indicesCounter++));
    $add_12(colors, 1);
    $add_12(colors, 0);
  }
  $push_back_0(indices._values, 0);
  $push_back_0(indices._values, 1);
  result = new IndexedMesh_0(_triangleStrip, new Vector3D_0(vertices._cx, vertices._cy, vertices._cz), new FloatBuffer_WebGL_2(vertices._values._array, vertices._values._size), new ShortBuffer_WebGL_1(indices._values._array, indices._values._size), new FloatBuffer_WebGL_2(colors._values._array, colors._values._size));
  return result;
}

function $incDegrees(this$static, value_0){
  this$static._degrees += value_0;
  this$static._degrees > 360 && (this$static._degrees -= 360);
  $copyValue(this$static._modelviewMatrix, createRotationMatrix(fromDegrees(this$static._degrees), new Vector3D_0(0, 0, -1)));
}

function $onResizeViewportEvent(this$static, width_0, height){
  var halfHeight, halfWidth;
  halfWidth = ~~(width_0 / 2);
  halfHeight = ~~(height / 2);
  $copyValue(this$static._projectionMatrix, createOrthographicProjectionMatrix(-halfWidth, halfWidth, -halfHeight, halfHeight, -halfWidth, halfWidth));
  !!this$static._mesh && $dispose_8(this$static._mesh);
  this$static._mesh = null;
}

function $render_0(this$static, rc){
  var gl, mesh;
  gl = rc._gl;
  $createGLState_0(this$static);
  $clearScreen(gl, this$static._backgroundColor);
  mesh = (!this$static._mesh && (this$static._mesh = $createMesh(rc)) , this$static._mesh);
  !!mesh && $render(mesh, rc, this$static._glState);
}

function BusyMeshRenderer_0(backgroundColor){
  this._projectionMatrix = new MutableMatrix44D_0;
  this._modelviewMatrix = new MutableMatrix44D_0;
  this._degrees = 0;
  this._backgroundColor = backgroundColor;
  this._projectionFeature = null;
  this._modelFeature = null;
  this._glState = new GLState_0;
  this._mesh = null;
}

defineSeed(390, 1, {}, BusyMeshRenderer_0);
_.initialize_0 = function initialize_3(context){
}
;
_.onResizeViewportEvent = function onResizeViewportEvent(ec, width_0, height){
  $onResizeViewportEvent(this, width_0, height);
}
;
_.render = function render(rc, glState){
  $render_0(this, rc);
}
;
_.start_2 = function start_2(rc){
  var effect;
  effect = new BusyMeshEffect_0(this);
  $startEffect(rc._effectsScheduler, effect, this);
}
;
_.stop_1 = function stop_1(rc){
  $cancelAllEffectsFor(rc._effectsScheduler, this);
  !!this._mesh && $dispose_8(this._mesh);
  this._mesh = null;
}
;
_._degrees = 0;
function $create(this$static){
  var i_0, result, size_0;
  size_0 = this$static._values.size_0;
  result = new ByteBuffer_WebGL_0(size_0);
  for (i_0 = 0; i_0 < size_0; i_0++) {
    $rawPut(result, i_0, dynamicCast($get_2(this$static._values, i_0), Q$Byte).value_0);
  }
  return result;
}

function ByteBufferBuilder_0(){
  this._values = new ArrayList_0;
}

defineSeed(391, 1, {}, ByteBufferBuilder_0);
function $hasNext_0(this$static){
  if (this$static._bufferTimestamp != 0) {
    throw new RuntimeException_1('The buffer was changed after the iteration started');
  }
  return this$static._cursor < this$static._bufferSize;
}

function $nextBufferUpTo(this$static){
  var builder, c;
  builder = new ByteBufferBuilder_0;
  while ((c = $nextUInt8(this$static)) != 0) {
    $add_5(builder._values, valueOf(c));
  }
  return $create(builder);
}

function $nextInt32(this$static){
  var b1, b2, b3, b4;
  b1 = $nextUInt8(this$static) & 255;
  b2 = $nextUInt8(this$static) & 255;
  b3 = $nextUInt8(this$static) & 255;
  b4 = $nextUInt8(this$static) & 255;
  return b1 | b2 << 8 | b3 << 16 | b4 << 24;
}

function $nextInt64(this$static){
  var b1, b2, b3, b4, b5, b6, b7, b8;
  b1 = $nextUInt8(this$static) & 255;
  b2 = $nextUInt8(this$static) & 255;
  b3 = $nextUInt8(this$static) & 255;
  b4 = $nextUInt8(this$static) & 255;
  b5 = $nextUInt8(this$static) & 255;
  b6 = $nextUInt8(this$static) & 255;
  b7 = $nextUInt8(this$static) & 255;
  b8 = $nextUInt8(this$static) & 255;
  return or(or(or(or(or(or(or(fromInt(b1), shl(fromInt(b2), 8)), shl(fromInt(b3), 16)), shl(fromInt(b4), 24)), shl(fromInt(b5), 32)), shl(fromInt(b6), 40)), shl(fromInt(b7), 48)), shl(fromInt(b8), 56));
}

function $nextUInt8(this$static){
  if (this$static._bufferTimestamp != 0) {
    throw new RuntimeException_1('The buffer was changed after the iteration started');
  }
  if (this$static._cursor >= this$static._bufferSize) {
    throw new RuntimeException_1('Iteration overflow');
  }
  return $get_7(this$static._buffer, this$static._cursor++);
}

function $nextZeroTerminatedString(this$static){
  var buffer, result;
  buffer = $nextBufferUpTo(this$static);
  result = $getAsString_0(buffer);
  return result;
}

function ByteBufferIterator_0(buffer){
  this._buffer = buffer;
  this._cursor = 0;
  this._bufferTimestamp = 0;
  this._bufferSize = buffer._buffer.length;
}

defineSeed(392, 1, {}, ByteBufferIterator_0);
_._bufferSize = 0;
_._bufferTimestamp = 0;
_._cursor = 0;
function $_getCartesianCenterOfView(this$static){
  if (this$static._dirtyFlags._cartesianCenterOfViewDirty) {
    this$static._dirtyFlags._cartesianCenterOfViewDirty = false;
    $copyFrom_2(this$static._cartesianCenterOfView, $closestIntersection(this$static._planet, $asVector3D(this$static._position), new Vector3D_0(this$static._center._x - this$static._position._x, this$static._center._y - this$static._position._y, this$static._center._z - this$static._position._z)));
  }
  return this$static._cartesianCenterOfView;
}

function $_getGeodeticCenterOfView(this$static){
  if (this$static._dirtyFlags._geodeticCenterOfViewDirty) {
    this$static._dirtyFlags._geodeticCenterOfViewDirty = false;
    this$static._geodeticCenterOfView = new Geodetic3D_2(this$static._planet.toGeodetic3D($asVector3D($_getCartesianCenterOfView(this$static))));
  }
  return this$static._geodeticCenterOfView;
}

function $applyTransform(this$static, M){
  $setCartesianPosition(this$static, $transformedBy(this$static._position, M, 1));
  $setCenter(this$static, $transformedBy(this$static._center, M, 1));
  $setUp(this$static, $transformedBy(this$static._up, M, 0));
}

function $calculateFrustumData(this$static){
  var bottom, height, left, ratio, ratioScreen, right, tanHalfHFOV, tanHalfVFOV, top_0, zFar, zNear;
  height = (!this$static._geodeticPosition && (this$static._geodeticPosition = new Geodetic3D_2(this$static._planet.toGeodetic3D($asVector3D(this$static._position)))) , this$static._geodeticPosition)._height;
  zNear = height * 0.1;
  zFar = this$static._planet.distanceToHorizon($asVector3D(this$static._position));
  ratio = zFar / zNear;
  ratio < 1000 && (zNear = zFar / 1000);
  tanHalfHFOV = this$static._tanHalfHorizontalFieldOfView;
  tanHalfVFOV = this$static._tanHalfVerticalFieldOfView;
  if (tanHalfHFOV != tanHalfHFOV || tanHalfVFOV != tanHalfVFOV) {
    ratioScreen = this$static._viewPortHeight / this$static._viewPortWidth;
    if (tanHalfHFOV != tanHalfHFOV && tanHalfVFOV != tanHalfVFOV) {
      tanHalfVFOV = 0.3;
      tanHalfHFOV = 0.3 / ratioScreen;
    }
     else {
      tanHalfHFOV != tanHalfHFOV?(tanHalfHFOV = tanHalfVFOV / ratioScreen):tanHalfVFOV != tanHalfVFOV && (tanHalfVFOV = tanHalfHFOV * ratioScreen);
    }
  }
  right = tanHalfHFOV * zNear;
  left = -right;
  top_0 = tanHalfVFOV * zNear;
  bottom = -top_0;
  return new FrustumData_1(left, right, bottom, top_0, zNear, zFar);
}

function $copyFrom(this$static, that){
  if (eq(this$static._timestamp, that._timestamp)) {
    return;
  }
  $_getGeodeticCenterOfView(that);
  $_getCartesianCenterOfView(that);
  $getFrustumInModelCoordinates(that);
  $asMatrix44D($getProjectionMatrix(that));
  $asMatrix44D($getModelMatrix(that));
  $asMatrix44D($getModelViewMatrix(that));
  this$static._timestamp = that._timestamp;
  this$static._viewPortWidth = that._viewPortWidth;
  this$static._viewPortHeight = that._viewPortHeight;
  this$static._planet = that._planet;
  $copyFrom_1(this$static._position, that._position);
  $copyFrom_1(this$static._center, that._center);
  $copyFrom_1(this$static._up, that._up);
  $copyFrom_1(this$static._normalizedPosition, that._normalizedPosition);
  $copyFrom_0(this$static._dirtyFlags, that._dirtyFlags);
  this$static._frustumData = that._frustumData;
  $copyValue(this$static._projectionMatrix, that._projectionMatrix);
  $copyValue(this$static._modelMatrix, that._modelMatrix);
  $copyValue(this$static._modelViewMatrix, that._modelViewMatrix);
  $copyFrom_1(this$static._cartesianCenterOfView, that._cartesianCenterOfView);
  this$static._geodeticCenterOfView = that._geodeticCenterOfView;
  this$static._frustum = that._frustum;
  this$static._frustumInModelCoordinates = that._frustumInModelCoordinates;
  this$static._geodeticPosition = that._geodeticPosition;
  this$static._angle2Horizon = that._angle2Horizon;
  this$static._tanHalfVerticalFieldOfView = that._tanHalfVerticalFieldOfView;
  this$static._tanHalfHorizontalFieldOfView = that._tanHalfHorizontalFieldOfView;
}

function $getEstimatedPixelDistance(this$static, point0, point1){
  var angleInRadians, distanceInMeters, frustumData;
  $putSub(this$static._ray0, this$static._position, point0);
  $putSub(this$static._ray1, this$static._position, point1);
  angleInRadians = angleInRadiansBetween(this$static._ray1, this$static._ray0);
  frustumData = $getFrustumData(this$static);
  distanceInMeters = frustumData._znear * Math.tan(angleInRadians / 2);
  return distanceInMeters * this$static._viewPortHeight / frustumData._top;
}

function $getFrustum(this$static){
  if (this$static._dirtyFlags._frustumDirty) {
    this$static._dirtyFlags._frustumDirty = false;
    this$static._frustum = new Frustum_1($getFrustumData(this$static));
  }
  return this$static._frustum;
}

function $getFrustumData(this$static){
  if (this$static._dirtyFlags._frustumDataDirty) {
    this$static._dirtyFlags._frustumDataDirty = false;
    this$static._frustumData = $calculateFrustumData(this$static);
  }
  return this$static._frustumData;
}

function $getFrustumInModelCoordinates(this$static){
  if (this$static._dirtyFlags._frustumMCDirty) {
    this$static._dirtyFlags._frustumMCDirty = false;
    this$static._frustumInModelCoordinates = $transformedBy_P($getFrustum(this$static), $getModelMatrix(this$static));
  }
  return this$static._frustumInModelCoordinates;
}

function $getGeodeticPosition(this$static){
  !this$static._geodeticPosition && (this$static._geodeticPosition = new Geodetic3D_2(this$static._planet.toGeodetic3D($asVector3D(this$static._position))));
  return this$static._geodeticPosition;
}

function $getHeadingPitchRoll(this$static){
  var cameraRS, localRS;
  localRS = $getCoordinateSystemAt(this$static._planet, (!this$static._geodeticPosition && (this$static._geodeticPosition = new Geodetic3D_2(this$static._planet.toGeodetic3D($asVector3D(this$static._position)))) , this$static._geodeticPosition));
  cameraRS = new CoordinateSystem_0(new Vector3D_0(this$static._center._x - this$static._position._x, this$static._center._y - this$static._position._y, this$static._center._z - this$static._position._z), $asVector3D(this$static._up), $asVector3D(this$static._position));
  return $getTaitBryanAngles(cameraRS, localRS);
}

function $getLookAtParamsInto(this$static, position, center, up){
  $copyFrom_1(position, this$static._position);
  $copyFrom_1(center, this$static._center);
  $copyFrom_1(up, this$static._up);
}

function $getModelMatrix(this$static){
  if (this$static._dirtyFlags._modelMatrixDirty) {
    this$static._dirtyFlags._modelMatrixDirty = false;
    $copyValue(this$static._modelMatrix, createModelMatrix(this$static._position, this$static._center, this$static._up));
  }
  return this$static._modelMatrix;
}

function $getModelViewMatrix(this$static){
  if (this$static._dirtyFlags._modelViewMatrixDirty) {
    this$static._dirtyFlags._modelViewMatrixDirty = false;
    $copyValueOfMultiplication(this$static._modelViewMatrix, $getProjectionMatrix(this$static), $getModelMatrix(this$static));
  }
  return this$static._modelViewMatrix;
}

function $getModelViewMatrixInto(this$static, matrix){
  $copyValue(matrix, $getModelViewMatrix(this$static));
}

function $getProjectionMatrix(this$static){
  if (this$static._dirtyFlags._projectionMatrixDirty) {
    this$static._dirtyFlags._projectionMatrixDirty = false;
    $copyValue(this$static._projectionMatrix, createProjectionMatrix_0($getFrustumData(this$static)));
  }
  return this$static._projectionMatrix;
}

function $getUpMutable(this$static, result){
  $copyFrom_1(result, this$static._up);
}

function $getViewDirectionInto(this$static, result){
  $set_3(result, this$static._center._x - this$static._position._x, this$static._center._y - this$static._position._y, this$static._center._z - this$static._position._z);
}

function $getViewPortInto(this$static, viewport){
  $set_2(viewport, this$static._viewPortWidth, this$static._viewPortHeight);
}

function $initialize(this$static, context){
  this$static._planet = context._planet;
  if (this$static._planet.isFlat()) {
    $setCartesianPosition(this$static, new MutableVector3D_1(0, 0, this$static._planet.getRadii()._y * 5));
    $setUp(this$static, new MutableVector3D_1(0, 1, 0));
  }
   else {
    $setCartesianPosition(this$static, new MutableVector3D_1($maxAxis(this$static._planet.getRadii()) * 5, 0, 0));
    $setUp(this$static, new MutableVector3D_1(0, 0, 1));
  }
  $setAllDirty(this$static._dirtyFlags);
}

function $moveForward(this$static, d){
  var view;
  view = $normalized_0(new Vector3D_0(this$static._center._x - this$static._position._x, this$static._center._y - this$static._position._y, this$static._center._z - this$static._position._z));
  $applyTransform(this$static, createTranslationMatrix(new Vector3D_0(view._x * d, view._y * d, view._z * d)));
}

function $pixel2Ray(this$static, pixel){
  var obj, pixel3D, px, py;
  px = pixel._x;
  py = this$static._viewPortHeight - pixel._y;
  pixel3D = new Vector3D_0(px, py, 0);
  obj = $unproject($getModelViewMatrix(this$static), pixel3D, this$static._viewPortWidth, this$static._viewPortHeight);
  if (obj._x != obj._x || obj._y != obj._y || obj._z != obj._z) {
    $logWarning(_instance_3, 'Pixel to Ray return NaN', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return obj;
  }
  return $sub_2(obj, $asVector3D(this$static._position));
}

function $resizeViewport(this$static, width_0, height){
  this$static._timestamp = add_1(this$static._timestamp, P1_longLit);
  this$static._viewPortWidth = width_0;
  this$static._viewPortHeight = height;
  $setAllDirty(this$static._dirtyFlags);
}

function $rotateWithAxis(this$static, axis_0, delta){
  $applyTransform(this$static, createRotationMatrix(delta, axis_0));
}

function $rotateWithAxisAndPoint(this$static, axis_0, point, delta){
  var m_0;
  m_0 = createGeneralRotationMatrix(delta, axis_0, point);
  $applyTransform(this$static, m_0);
}

function $setCameraCoordinateSystem(this$static, rs){
  this$static._timestamp = add_1(this$static._timestamp, P1_longLit);
  $copyFrom_1(this$static._center, this$static._position);
  $addInPlace(this$static._center, rs._y);
  $copyFrom_2(this$static._up, rs._z);
  $setAllDirty(this$static._dirtyFlags);
}

function $setCartesianPosition(this$static, v){
  var distanceToPlanetCenter, planetRadius;
  if (!$equalTo(v, this$static._position)) {
    this$static._timestamp = add_1(this$static._timestamp, P1_longLit);
    $copyFrom_1(this$static._position, v);
    this$static._geodeticPosition = null;
    $setAllDirty(this$static._dirtyFlags);
    distanceToPlanetCenter = $length(this$static._position);
    planetRadius = distanceToPlanetCenter - (!this$static._geodeticPosition && (this$static._geodeticPosition = new Geodetic3D_2(this$static._planet.toGeodetic3D($asVector3D(this$static._position)))) , this$static._geodeticPosition)._height;
    this$static._angle2Horizon = Math.acos(planetRadius / distanceToPlanetCenter);
    $copyFrom_1(this$static._normalizedPosition, this$static._position);
    $normalize(this$static._normalizedPosition);
  }
}

function $setCenter(this$static, v){
  if (!$equalTo(v, this$static._center)) {
    this$static._timestamp = add_1(this$static._timestamp, P1_longLit);
    $copyFrom_1(this$static._center, v);
    $setAllDirty(this$static._dirtyFlags);
  }
}

function $setGeodeticPosition(this$static, g3d){
  var dragMatrix, heading, pitch;
  heading = $getHeadingPitchRoll(this$static)._heading;
  pitch = $getHeadingPitchRoll(this$static)._pitch;
  $setPitch(this$static, new Angle_0(-90, -1.5707963267948966));
  dragMatrix = this$static._planet.drag((!this$static._geodeticPosition && (this$static._geodeticPosition = new Geodetic3D_2(this$static._planet.toGeodetic3D($asVector3D(this$static._position)))) , this$static._geodeticPosition), g3d);
  dragMatrix._isValid && $applyTransform(this$static, dragMatrix);
  $setHeading(this$static, heading);
  $setPitch(this$static, pitch);
}

function $setHeading(this$static, angle){
  var angles, cameraRS, localRS;
  angles = $getHeadingPitchRoll(this$static);
  localRS = $getCoordinateSystemAt(this$static._planet, (!this$static._geodeticPosition && (this$static._geodeticPosition = new Geodetic3D_2(this$static._planet.toGeodetic3D($asVector3D(this$static._position)))) , this$static._geodeticPosition));
  cameraRS = $applyTaitBryanAngles(localRS, angle, angles._pitch, angles._roll);
  $setCameraCoordinateSystem(this$static, cameraRS);
}

function $setLookAtParams(this$static, position, center, up){
  $setCartesianPosition(this$static, position);
  $setCenter(this$static, center);
  $setUp(this$static, up);
}

function $setPitch(this$static, angle){
  var angles, cameraRS, localRS;
  angles = $getHeadingPitchRoll(this$static);
  localRS = $getCoordinateSystemAt(this$static._planet, (!this$static._geodeticPosition && (this$static._geodeticPosition = new Geodetic3D_2(this$static._planet.toGeodetic3D($asVector3D(this$static._position)))) , this$static._geodeticPosition));
  cameraRS = $applyTaitBryanAngles(localRS, angles._heading, angle, angles._roll);
  $setCameraCoordinateSystem(this$static, cameraRS);
}

function $setRoll(this$static, angle){
  var angles, cameraRS, localRS;
  angles = $getHeadingPitchRoll(this$static);
  localRS = $getCoordinateSystemAt(this$static._planet, (!this$static._geodeticPosition && (this$static._geodeticPosition = new Geodetic3D_2(this$static._planet.toGeodetic3D($asVector3D(this$static._position)))) , this$static._geodeticPosition));
  cameraRS = $applyTaitBryanAngles(localRS, angles._heading, angles._pitch, angle);
  $setCameraCoordinateSystem(this$static, cameraRS);
}

function $setUp(this$static, v){
  if (!$equalTo(v, this$static._up)) {
    this$static._timestamp = add_1(this$static._timestamp, P1_longLit);
    $copyFrom_1(this$static._up, v);
    $setAllDirty(this$static._dirtyFlags);
  }
}

function Camera_0(timestamp){
  this._ray0 = new MutableVector3D_0;
  this._ray1 = new MutableVector3D_0;
  this._position = new MutableVector3D_0;
  this._center = new MutableVector3D_0;
  this._up = new MutableVector3D_0;
  this._normalizedPosition = new MutableVector3D_0;
  this._dirtyFlags = new CameraDirtyFlags_0;
  this._frustumData = new FrustumData_0;
  this._projectionMatrix = new MutableMatrix44D_0;
  this._modelMatrix = new MutableMatrix44D_0;
  this._modelViewMatrix = new MutableMatrix44D_0;
  this._cartesianCenterOfView = new MutableVector3D_0;
  this._planet = null;
  this._position = new MutableVector3D_1(0, 0, 0);
  this._center = new MutableVector3D_1(0, 0, 0);
  this._up = new MutableVector3D_1(0, 0, 1);
  this._dirtyFlags = new CameraDirtyFlags_0;
  this._frustumData = new FrustumData_0;
  this._projectionMatrix = new MutableMatrix44D_0;
  this._modelMatrix = new MutableMatrix44D_0;
  this._modelViewMatrix = new MutableMatrix44D_0;
  this._cartesianCenterOfView = new MutableVector3D_1(0, 0, 0);
  this._geodeticCenterOfView = null;
  this._frustum = null;
  this._frustumInModelCoordinates = null;
  this._camEffectTarget = new Camera$CameraEffectTarget_0;
  this._geodeticPosition = null;
  this._angle2Horizon = -99;
  this._normalizedPosition = new MutableVector3D_1(0, 0, 0);
  this._tanHalfVerticalFieldOfView = NaN;
  this._tanHalfHorizontalFieldOfView = NaN;
  this._timestamp = timestamp;
  $resizeViewport(this, 0, 0);
  $setAllDirty(this._dirtyFlags);
}

function pixel2Ray(position, pixel, viewport, modelViewMatrix){
  var obj, pixel3D, px, py;
  px = pixel._x;
  py = viewport._y - pixel._y;
  pixel3D = new Vector3D_0(px, py, 0);
  obj = $unproject(modelViewMatrix, pixel3D, viewport._x, viewport._y);
  if (obj._x != obj._x || obj._y != obj._y || obj._z != obj._z) {
    return obj;
  }
  return $sub_2(obj, new Vector3D_0(position._x, position._y, position._z));
}

function pixel2RayInto(position, pixel, viewport, modelViewMatrix, ray){
  var obj, pixel3D, px, py;
  px = pixel._x;
  py = viewport._y - pixel._y;
  pixel3D = new Vector3D_0(px, py, 0);
  obj = $unproject(modelViewMatrix, pixel3D, viewport._x, viewport._y);
  obj._x != obj._x || obj._y != obj._y || obj._z != obj._z?$copyFrom_2(ray, obj):$set_3(ray, obj._x - position._x, obj._y - position._y, obj._z - position._z);
}

defineSeed(393, 1, {}, Camera_0);
_.getGeodeticPosition = function getGeodeticPosition(){
  return $getGeodeticPosition(this);
}
;
_.getHeading_0 = function getHeading(){
  return $getHeadingPitchRoll(this)._heading;
}
;
_.getPitch_0 = function getPitch(){
  return $getHeadingPitchRoll(this)._pitch;
}
;
_._angle2Horizon = 0;
_._tanHalfHorizontalFieldOfView = 0;
_._tanHalfVerticalFieldOfView = 0;
_._timestamp = P0_longLit;
_._viewPortHeight = 0;
_._viewPortWidth = 0;
function Camera$CameraEffectTarget_0(){
}

defineSeed(394, 1, {}, Camera$CameraEffectTarget_0);
function $setCurrentGesture(this$static, gesture){
  this$static._currentGesture = gesture;
}

function CameraContext_0(gesture, nextCamera){
  this._currentGesture = gesture;
  this._nextCamera = nextCamera;
}

defineSeed(395, 1, {}, CameraContext_0);
function $copyFrom_0(this$static, other){
  this$static._frustumDataDirty = other._frustumDataDirty;
  this$static._projectionMatrixDirty = other._projectionMatrixDirty;
  this$static._modelMatrixDirty = other._modelMatrixDirty;
  this$static._modelViewMatrixDirty = other._modelViewMatrixDirty;
  this$static._cartesianCenterOfViewDirty = other._cartesianCenterOfViewDirty;
  this$static._geodeticCenterOfViewDirty = other._geodeticCenterOfViewDirty;
  this$static._frustumDirty = other._frustumDirty;
  this$static._frustumMCDirty = other._frustumMCDirty;
}

function $setAllDirty(this$static){
  this$static._frustumDataDirty = true;
  this$static._projectionMatrixDirty = true;
  this$static._modelMatrixDirty = true;
  this$static._modelViewMatrixDirty = true;
  this$static._cartesianCenterOfViewDirty = true;
  this$static._geodeticCenterOfViewDirty = true;
  this$static._frustumDirty = true;
  this$static._frustumMCDirty = true;
}

function CameraDirtyFlags_0(){
  $setAllDirty(this);
}

defineSeed(396, 1, {}, CameraDirtyFlags_0);
_.toString$ = function toString_40(){
  var d;
  return d = '' , this._frustumDataDirty && (d += 'FD ') , this._projectionMatrixDirty && (d += 'PM ') , this._modelMatrixDirty && (d += 'MM ') , this._modelViewMatrixDirty && (d += 'MVM ') , this._cartesianCenterOfViewDirty && (d += 'CCV ') , this._geodeticCenterOfViewDirty && (d += 'GCV ') , this._frustumDirty && (d += 'F ') , this._frustumMCDirty && (d += 'FMC ') , d;
}
;
_._cartesianCenterOfViewDirty = false;
_._frustumDataDirty = false;
_._frustumDirty = false;
_._frustumMCDirty = false;
_._geodeticCenterOfViewDirty = false;
_._modelMatrixDirty = false;
_._modelViewMatrixDirty = false;
_._projectionMatrixDirty = false;
defineSeed(398, 1, makeCastMap([Q$CameraEventHandler]));
function $onDown(this$static, eventContext, touchEvent, cameraContext){
  var camera, initialRay0, initialRay1, pixel0, pixel1;
  camera = cameraContext._nextCamera;
  $getLookAtParamsInto(camera, this$static._cameraPosition, this$static._cameraCenter, this$static._cameraUp);
  $getModelViewMatrixInto(camera, this$static._cameraModelViewMatrix);
  $getViewPortInto(camera, this$static._cameraViewPort);
  pixel0 = dynamicCast($get_2(touchEvent._touchs, 0), Q$Touch)._pos;
  pixel1 = dynamicCast($get_2(touchEvent._touchs, 1), Q$Touch)._pos;
  initialRay0 = $pixel2Ray(camera, pixel0);
  initialRay1 = $pixel2Ray(camera, pixel1);
  if (initialRay0._x != initialRay0._x || initialRay0._y != initialRay0._y || initialRay0._z != initialRay0._z || initialRay1._x != initialRay1._x || initialRay1._y != initialRay1._y || initialRay1._z != initialRay1._z)
    return;
  $setCurrentGesture(cameraContext, ($clinit_Gesture() , DoubleDrag));
  eventContext._planet.beginDoubleDrag($asVector3D(camera._position), new Vector3D_0(camera._center._x - camera._position._x, camera._center._y - camera._position._y, camera._center._z - camera._position._z), $pixel2Ray(camera, pixel0), $pixel2Ray(camera, pixel1));
}

function $onMove(this$static, eventContext, touchEvent, cameraContext){
  var initialRay0, initialRay1, matrix, pixel0, pixel1, planet;
  if (cameraContext._currentGesture != ($clinit_Gesture() , DoubleDrag))
    return;
  planet = eventContext._planet;
  pixel0 = dynamicCast($get_2(touchEvent._touchs, 0), Q$Touch)._pos;
  pixel1 = dynamicCast($get_2(touchEvent._touchs, 1), Q$Touch)._pos;
  initialRay0 = pixel2Ray(this$static._cameraPosition, pixel0, this$static._cameraViewPort, this$static._cameraModelViewMatrix);
  initialRay1 = pixel2Ray(this$static._cameraPosition, pixel1, this$static._cameraViewPort, this$static._cameraModelViewMatrix);
  if (initialRay0._x != initialRay0._x || initialRay0._y != initialRay0._y || initialRay0._z != initialRay0._z || initialRay1._x != initialRay1._x || initialRay1._y != initialRay1._y || initialRay1._z != initialRay1._z)
    return;
  matrix = planet.doubleDrag(initialRay0, initialRay1);
  if (!matrix._isValid)
    return;
  $setLookAtParams(cameraContext._nextCamera, $transformedBy(this$static._cameraPosition, matrix, 1), $transformedBy(this$static._cameraCenter, matrix, 1), $transformedBy(this$static._cameraUp, matrix, 0));
}

function CameraDoubleDragHandler_0(){
  this._cameraPosition = new MutableVector3D_0;
  this._cameraCenter = new MutableVector3D_0;
  this._cameraUp = new MutableVector3D_0;
  this._cameraViewPort = new MutableVector2I_0;
  this._cameraModelViewMatrix = new MutableMatrix44D_0;
}

defineSeed(397, 398, makeCastMap([Q$CameraEventHandler]), CameraDoubleDragHandler_0);
_.onTouchEvent = function onTouchEvent(eventContext, touchEvent, cameraContext){
  if (touchEvent._touchs.size_0 != 2)
    return false;
  switch (touchEvent._eventType.ordinal) {
    case 0:
      $onDown(this, eventContext, touchEvent, cameraContext);
      break;
    case 2:
      $onMove(this, eventContext, touchEvent, cameraContext);
      break;
    case 1:
      $setCurrentGesture(cameraContext, ($clinit_Gesture() , None));
  }
  return true;
}
;
_.render_0 = function render_0(rc, cameraContext){
}
;
function $onDown_0(eventContext, touchEvent, cameraContext){
  var camera, effect, pixel, planet, target;
  pixel = dynamicCast($get_2(touchEvent._touchs, 0), Q$Touch)._pos;
  planet = eventContext._planet;
  camera = cameraContext._nextCamera;
  effect = planet.createDoubleTapEffect($asVector3D(camera._position), new Vector3D_0(camera._center._x - camera._position._x, camera._center._y - camera._position._y, camera._center._z - camera._position._z), $pixel2Ray(camera, pixel));
  if (effect) {
    target = cameraContext._nextCamera._camEffectTarget;
    $startEffect(eventContext._effectsScheduler, effect, target);
  }
}

function CameraDoubleTapHandler_0(){
}

defineSeed(399, 398, makeCastMap([Q$CameraEventHandler]), CameraDoubleTapHandler_0);
_.onTouchEvent = function onTouchEvent_0(eventContext, touchEvent, cameraContext){
  if (touchEvent._touchs.size_0 != 1)
    return false;
  if ($getTapCount(touchEvent) != 2)
    return false;
  if (touchEvent._eventType != ($clinit_TouchEventType() , Down))
    return false;
  $onDown_0(eventContext, touchEvent, cameraContext);
  return true;
}
;
_.render_0 = function render_1(rc, cameraContext){
}
;
defineSeed(401, 1, {});
function $modifyGLState(this$static, glState, rc){
  var camera, cameraVector, f, lightDir, rotationLightDirAxis;
  camera = rc._currentCamera;
  $getViewDirectionInto(camera, this$static._camDir);
  $getUpMutable(camera, this$static._up);
  if (this$static._cameraDirX == this$static._camDir._x && this$static._cameraDirY == this$static._camDir._y && this$static._cameraDirZ == this$static._camDir._z && this$static._upX == this$static._up._x && this$static._upY == this$static._up._y && this$static._upZ == this$static._up._z) {
    return;
  }
  cameraVector = $times_0(this$static._camDir);
  rotationLightDirAxis = $cross(this$static._up, cameraVector);
  lightDir = $rotateAroundAxis(cameraVector, rotationLightDirAxis, new Angle_0(45, 0.7853981633974483));
  f = dynamicCast($getGLFeature(glState, 11), Q$DirectionLightGLFeature);
  if (!f) {
    $clearGLFeatureGroup(glState, ($clinit_GLFeatureGroupName() , LIGHTING_GROUP));
    $addGLFeature(glState, new DirectionLightGLFeature_0(new Vector3D_0(lightDir._x, lightDir._y, lightDir._z), this$static._diffuseColor, this$static._ambientColor), false);
  }
   else {
    $setLightDirection(f, new Vector3D_0(lightDir._x, lightDir._y, lightDir._z));
  }
  this$static._cameraDirX = this$static._camDir._x;
  this$static._cameraDirY = this$static._camDir._y;
  this$static._cameraDirZ = this$static._camDir._z;
  this$static._upX = this$static._up._x;
  this$static._upY = this$static._up._y;
  this$static._upZ = this$static._up._z;
}

function CameraFocusSceneLighting_0(ambient, diffuse){
  this._camDir = new MutableVector3D_0;
  this._up = new MutableVector3D_0;
  this._ambientColor = new Color_1(ambient);
  this._diffuseColor = new Color_1(diffuse);
  this._cameraDirX = 0;
  this._cameraDirY = 0;
  this._cameraDirZ = 0;
}

defineSeed(400, 401, {}, CameraFocusSceneLighting_0);
_._cameraDirX = 0;
_._cameraDirY = 0;
_._cameraDirZ = 0;
_._upX = 0;
_._upY = 0;
_._upZ = 0;
function $getAlpha(this$static, when){
  var percent;
  percent = $percentDone(this$static, when);
  return this$static._linearTiming?percent:pace(percent);
}

function $percentDone(this$static, when){
  var elapsed, percent;
  elapsed = sub_0(when._milliseconds, this$static._started);
  percent = toDouble(elapsed) / toDouble(this$static._durationMS);
  if (percent > 1)
    return 1;
  if (percent < 0)
    return 0;
  return percent;
}

function EffectWithDuration_0(duration){
  this._durationMS = duration._milliseconds;
  this._linearTiming = false;
  this._started = P0_longLit;
}

defineSeed(403, 389, {});
_.isDone = function isDone_0(rc, when){
  var percent;
  percent = $percentDone(this, when);
  return percent >= 1;
}
;
_.start_1 = function start_3(rc, when){
  this._started = when._milliseconds;
}
;
_._durationMS = P0_longLit;
_._linearTiming = false;
_._started = P0_longLit;
function $calculateMaxHeight(this$static, planet){
  var averageHeight, delta, deltaLatInDeg, deltaLonInDeg, distanceInDeg, maxHeight, middleHeight;
  maxHeight = $axisAverage(planet.getRadii()) * 5;
  deltaLatInDeg = this$static._fromPosition._latitude._degrees - this$static._toPosition._latitude._degrees;
  deltaLonInDeg = this$static._fromPosition._longitude._degrees - this$static._toPosition._longitude._degrees;
  distanceInDeg = Math.sqrt(deltaLatInDeg * deltaLatInDeg + deltaLonInDeg * deltaLonInDeg);
  if (distanceInDeg >= 180) {
    return maxHeight;
  }
  middleHeight = distanceInDeg / 180 * maxHeight;
  averageHeight = (this$static._fromPosition._height + this$static._toPosition._height) / 2;
  if (middleHeight < averageHeight) {
    delta = (averageHeight - middleHeight) / 2;
    return averageHeight + delta;
  }
  return middleHeight;
}

function CameraGoToPositionEffect_0(duration, fromPosition, toPosition, fromHeading, toHeading, fromPitch, toPitch){
  EffectWithDuration_0.call(this, duration);
  this._fromPosition = new Geodetic3D_2(fromPosition);
  this._toPosition = new Geodetic3D_2(toPosition);
  this._fromHeading = new Angle_1(fromHeading);
  this._toHeading = new Angle_1(toHeading);
  this._fromPitch = new Angle_1(fromPitch);
  this._toPitch = new Angle_1(toPitch);
  this._linearHeight = false;
}

defineSeed(402, 403, {}, CameraGoToPositionEffect_0);
_.cancel_0 = function cancel_3(when){
}
;
_.doStep = function doStep_1(rc, when){
  var alpha_0, camera, heading, height, middlePitch;
  alpha_0 = $getAlpha(this, when);
  this._linearHeight?(height = $linearInterpolation(this._fromPosition._height, this._toPosition._height, alpha_0)):(height = $quadraticBezierInterpolation(this._fromPosition._height, this._middleHeight, this._toPosition._height, alpha_0));
  camera = rc._nextCamera;
  $setGeodeticPosition(camera, new Geodetic3D_0(linearInterpolation(this._fromPosition._latitude, this._toPosition._latitude, alpha_0), linearInterpolation(this._fromPosition._longitude, this._toPosition._longitude, alpha_0), height));
  heading = linearInterpolation(this._fromHeading, this._toHeading, alpha_0);
  $setHeading(camera, heading);
  middlePitch = new Angle_0(-90, -1.5707963267948966);
  alpha_0 <= 0.1?$setPitch(camera, linearInterpolation(this._fromPitch, middlePitch, alpha_0 * 10)):alpha_0 >= 0.9?$setPitch(camera, linearInterpolation(middlePitch, this._toPitch, (alpha_0 - 0.9) * 10)):$setPitch(camera, middlePitch);
}
;
_.start_1 = function start_4(rc, when){
  this._started = when._milliseconds;
  this._middleHeight = $calculateMaxHeight(this, rc._planet);
}
;
_.stop_0 = function stop_2(rc, when){
  var camera;
  camera = rc._nextCamera;
  $setGeodeticPosition(camera, this._toPosition);
  $setPitch(camera, this._toPitch);
  $setHeading(camera, this._toHeading);
}
;
_._linearHeight = false;
_._middleHeight = 0;
function $addHandler_2(this$static, handler){
  $add_5(this$static._handlers, handler);
}

function $onTouchEvent(this$static, ec, touchEvent){
  var handlersSize, i_0, target;
  if (this$static._processTouchEvents) {
    if (touchEvent._eventType == ($clinit_TouchEventType() , Down)) {
      target = this$static._cameraContext._nextCamera._camEffectTarget;
      $cancelAllEffectsFor(ec._effectsScheduler, target);
    }
    handlersSize = this$static._handlers.size_0;
    for (i_0 = 0; i_0 < handlersSize; i_0++) {
      if (dynamicCast($get_2(this$static._handlers, i_0), Q$CameraEventHandler).onTouchEvent(ec, touchEvent, this$static._cameraContext)) {
        return true;
      }
    }
  }
  return false;
}

function $render_1(this$static, rc){
  var handlersSize, i_0;
  !this$static._cameraContext && (this$static._cameraContext = new CameraContext_0(($clinit_Gesture() , None), rc._nextCamera));
  handlersSize = this$static._handlers.size_0;
  for (i_0 = 0; i_0 < handlersSize; i_0++) {
    dynamicCast($get_2(this$static._handlers, i_0), Q$CameraEventHandler).render_0(rc, this$static._cameraContext);
  }
}

function CameraRenderer_0(){
  this._handlers = new ArrayList_0;
  this._cameraContext = null;
  this._processTouchEvents = true;
}

defineSeed(404, 1, {}, CameraRenderer_0);
_.initialize_0 = function initialize_4(context){
}
;
_.onResizeViewportEvent = function onResizeViewportEvent_0(ec, width_0, height){
}
;
_.render = function render_2(rc, glState){
  $render_1(this, rc);
}
;
_.start_2 = function start_5(rc){
}
;
_.stop_1 = function stop_3(rc){
}
;
_._processTouchEvents = false;
function $onDown_1(this$static, touchEvent, cameraContext){
  var averagePixel, camera, pixel0, pixel1, pixel2;
  camera = cameraContext._nextCamera;
  $getLookAtParamsInto(camera, this$static._cameraPosition, this$static._cameraCenter, this$static._cameraUp);
  $setCurrentGesture(cameraContext, ($clinit_Gesture() , Rotate));
  pixel0 = dynamicCast($get_2(touchEvent._touchs, 0), Q$Touch)._pos;
  pixel1 = dynamicCast($get_2(touchEvent._touchs, 1), Q$Touch)._pos;
  pixel2 = dynamicCast($get_2(touchEvent._touchs, 2), Q$Touch)._pos;
  averagePixel = $div_1($add_20(new Vector2F_0(pixel0._x + pixel1._x, pixel0._y + pixel1._y), pixel2));
  this$static._pivotPixel = new MutableVector2F_1(averagePixel._x, averagePixel._y);
  $copyFrom_2(this$static._pivotPoint, $asVector3D($_getCartesianCenterOfView(camera)));
  if ($isNan(this$static._pivotPoint)) {
    $logError(_instance_3, 'CAMERA ERROR: center point does not intersect globe!!\n', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    $setCurrentGesture(cameraContext, None);
  }
}

function $onMove_0(this$static, eventContext, touchEvent, cameraContext){
  var angle_v, c0, c1, c2, camera, cm, delta, dot, finalAngle, initialAngle, normal, u, view, M;
  if (cameraContext._currentGesture != ($clinit_Gesture() , Rotate))
    return;
  c0 = dynamicCast($get_2(touchEvent._touchs, 0), Q$Touch)._pos;
  c1 = dynamicCast($get_2(touchEvent._touchs, 1), Q$Touch)._pos;
  c2 = dynamicCast($get_2(touchEvent._touchs, 2), Q$Touch)._pos;
  cm = $div_1($add_20(new Vector2F_0(c0._x + c1._x, c0._y + c1._y), c2));
  normal = eventContext._planet.geodeticSurfaceNormal(this$static._pivotPoint);
  camera = cameraContext._nextCamera;
  $setLookAtParams(camera, this$static._cameraPosition, this$static._cameraCenter, this$static._cameraUp);
  angle_v = fromDegrees((this$static._pivotPixel._x - cm._x) * 0.25);
  $rotateWithAxisAndPoint(camera, normal, $asVector3D(this$static._pivotPoint), angle_v);
  view = new Vector3D_0(camera._center._x - camera._position._x, camera._center._y - camera._position._y, camera._center._z - camera._position._z);
  dot = $dot_0($normalized_0(normal), $times_2($normalized_0(view), -1));
  initialAngle = acos_0(dot) / 3.141592653589793 * 180;
  delta = (cm._y - this$static._pivotPixel._y) * 0.25;
  finalAngle = initialAngle + delta;
  finalAngle > 85 && (delta = 85 - initialAngle);
  finalAngle < 0 && (delta = -initialAngle);
  $getLookAtParamsInto(camera, this$static._tempCameraPosition, this$static._tempCameraCenter, this$static._tempCameraUp);
  u = (M = $getModelMatrix(camera) , new Vector3D_0(M._m00, M._m01, M._m02));
  $rotateWithAxisAndPoint(camera, u, $asVector3D(this$static._pivotPoint), new Angle_0(delta, delta / 180 * 3.141592653589793));
  $isNan_0($asVector3D($_getCartesianCenterOfView(camera))) && $setLookAtParams(camera, this$static._tempCameraPosition, this$static._tempCameraCenter, this$static._tempCameraUp);
}

function CameraRotationHandler_0(){
  this._pivotPoint = new MutableVector3D_0;
  this._pivotPixel = new MutableVector2F_0;
  this._cameraPosition = new MutableVector3D_0;
  this._cameraCenter = new MutableVector3D_0;
  this._cameraUp = new MutableVector3D_0;
  this._tempCameraPosition = new MutableVector3D_0;
  this._tempCameraCenter = new MutableVector3D_0;
  this._tempCameraUp = new MutableVector3D_0;
  this._pivotPoint = new MutableVector3D_1(0, 0, 0);
  this._pivotPixel = new MutableVector2F_1(0, 0);
}

defineSeed(405, 398, makeCastMap([Q$CameraEventHandler]), CameraRotationHandler_0);
_.onTouchEvent = function onTouchEvent_1(eventContext, touchEvent, cameraContext){
  if (touchEvent._touchs.size_0 != 3)
    return false;
  switch (touchEvent._eventType.ordinal) {
    case 0:
      $onDown_1(this, touchEvent, cameraContext);
      break;
    case 2:
      $onMove_0(this, eventContext, touchEvent, cameraContext);
      break;
    case 1:
      $setCurrentGesture(cameraContext, ($clinit_Gesture() , None));
      this._pivotPixel = new MutableVector2F_1(0, 0);
  }
  return true;
}
;
_.render_0 = function render_3(rc, cameraContext){
}
;
function $onDown_2(this$static, eventContext, touchEvent, cameraContext){
  var camera, initialRay, pixel;
  camera = cameraContext._nextCamera;
  $getLookAtParamsInto(camera, this$static._cameraPosition, this$static._cameraCenter, this$static._cameraUp);
  $getModelViewMatrixInto(camera, this$static._cameraModelViewMatrix);
  $getViewPortInto(camera, this$static._cameraViewPort);
  pixel = dynamicCast($get_2(touchEvent._touchs, 0), Q$Touch)._pos;
  initialRay = $pixel2Ray(camera, pixel);
  if (!(initialRay._x != initialRay._x || initialRay._y != initialRay._y || initialRay._z != initialRay._z)) {
    $setCurrentGesture(cameraContext, ($clinit_Gesture() , Drag));
    eventContext._planet.beginSingleDrag($asVector3D(camera._position), initialRay);
  }
}

function $onMove_1(this$static, eventContext, touchEvent, cameraContext){
  var matrix, pixel, planet;
  if (cameraContext._currentGesture != ($clinit_Gesture() , Drag))
    return;
  pixel = dynamicCast($get_2(touchEvent._touchs, 0), Q$Touch)._pos;
  pixel2RayInto(this$static._cameraPosition, pixel, this$static._cameraViewPort, this$static._cameraModelViewMatrix, this$static._finalRay);
  if ($isNan(this$static._finalRay))
    return;
  planet = eventContext._planet;
  matrix = planet.singleDrag($asVector3D(this$static._finalRay));
  if (!matrix._isValid)
    return;
  $setLookAtParams(cameraContext._nextCamera, $transformedBy(this$static._cameraPosition, matrix, 1), $transformedBy(this$static._cameraCenter, matrix, 1), $transformedBy(this$static._cameraUp, matrix, 0));
}

function $onUp(this$static, eventContext, touchEvent, cameraContext){
  var currPixel, delta, desp, effect, planet, prevPixel, target, touch;
  planet = eventContext._planet;
  if (this$static._useInertia) {
    touch = dynamicCast($get_2(touchEvent._touchs, 0), Q$Touch);
    currPixel = touch._pos;
    prevPixel = touch._prevPos;
    desp = $length_0(new Vector2F_0(currPixel._x - prevPixel._x, currPixel._y - prevPixel._y));
    delta = 3.7795276641845703 * ($getDeviceInfo(_instance_1) , 0.20000000298023224);
    if (cameraContext._currentGesture == ($clinit_Gesture() , Drag) && desp > delta) {
      effect = planet.createEffectFromLastSingleDrag();
      if (effect) {
        target = cameraContext._nextCamera._camEffectTarget;
        $startEffect(eventContext._effectsScheduler, effect, target);
      }
    }
  }
  $setCurrentGesture(cameraContext, ($clinit_Gesture() , None));
}

function CameraSingleDragHandler_0(){
  this._cameraPosition = new MutableVector3D_0;
  this._cameraCenter = new MutableVector3D_0;
  this._cameraUp = new MutableVector3D_0;
  this._cameraViewPort = new MutableVector2I_0;
  this._cameraModelViewMatrix = new MutableMatrix44D_0;
  this._finalRay = new MutableVector3D_0;
  this._useInertia = true;
}

defineSeed(406, 398, makeCastMap([Q$CameraEventHandler]), CameraSingleDragHandler_0);
_.onTouchEvent = function onTouchEvent_2(eventContext, touchEvent, cameraContext){
  if (touchEvent._touchs.size_0 != 1)
    return false;
  if ($getTapCount(touchEvent) > 1)
    return false;
  switch (touchEvent._eventType.ordinal) {
    case 0:
      $onDown_2(this, eventContext, touchEvent, cameraContext);
      break;
    case 2:
      $onMove_1(this, eventContext, touchEvent, cameraContext);
      break;
    case 1:
      $onUp(this, eventContext, touchEvent, cameraContext);
  }
  return true;
}
;
_.render_0 = function render_4(rc, cameraContext){
}
;
_._useInertia = false;
defineSeed(407, 1, makeCastMap([Q$CanvasElement]));
function $build(this$static, context, listener){
  var canvas;
  canvas = $getCanvas(this$static, context);
  $buildOnCanvas(this$static, canvas);
  $createImage(canvas, new CanvasImageBuilder_ImageListener_0('_DefaultChessCanvasImage_' + this$static._width + '_' + this$static._height + '_' + $toID(this$static._backgroundColor) + '_' + $toID(this$static._boxColor) + '_' + this$static._splits, listener));
}

function $getCanvas(this$static, context){
  if (!this$static._canvas || this$static._canvasWidth != this$static._width || this$static._canvasHeight != this$static._height) {
    this$static._canvas = new Canvas_WebGL_0;
    $initialize_2(this$static._canvas, this$static._width, this$static._height);
    this$static._canvasWidth = this$static._width;
    this$static._canvasHeight = this$static._height;
  }
   else {
    $setFillColor(this$static._canvas, new Color_0(0, 0, 0, 0));
    $fillRectangle(this$static._canvas, this$static._width, this$static._height);
  }
  return this$static._canvas;
}

defineSeed(408, 370, {});
_._canvasHeight = 0;
_._canvasWidth = 0;
_._height = 0;
_._width = 0;
defineSeed(410, 1, {});
_.dispose = function dispose_9(){
}
;
function CanvasImageBuilder_ImageListener_0(imageName, listener){
  this._imageName = imageName;
  this._listener = listener;
}

defineSeed(409, 410, {}, CanvasImageBuilder_ImageListener_0);
_.dispose = function dispose_10(){
}
;
_.imageCreated = function imageCreated(image){
  $imageCreated_1(this._listener, image, this._imageName);
  this._listener = null;
}
;
function $_release(this$static){
  if (--this$static._referenceCounter == 0) {
    this$static.dispose();
    return true;
  }
  return false;
}

function $dispose_1(this$static){
  if (this$static._referenceCounter != 0) {
    throw new RuntimeException_1('Deleted RCObject with unreleased references!');
  }
}

function RCObject_0(){
  this._referenceCounter = 1;
}

defineSeed(413, 1, makeCastMap([Q$RCObject]));
_.dispose = function dispose_11(){
  $dispose_1(this);
}
;
_._referenceCounter = 0;
function TileImageProvider_0(){
  RCObject_0.call(this);
}

defineSeed(412, 413, makeCastMap([Q$RCObject, Q$TileImageProvider]));
_.dispose = function dispose_12(){
  $dispose_1(this);
}
;
defineSeed(411, 412, makeCastMap([Q$RCObject, Q$TileImageProvider]));
_.dispose = function dispose_13(){
  $dispose_1(this);
}
;
function $setInfo(this$static, info){
  $clear(this$static._info);
  $addAll(this$static._info, info);
}

function ChildRenderer_0(renderer){
  this._info = new ArrayList_0;
  this._renderer = renderer;
}

defineSeed(414, 1, makeCastMap([Q$ChildRenderer]), ChildRenderer_0);
function $getHueInRadians(this$static){
  var b, g, h_0, max_0, min_0, mu, r, span_0;
  mu = _instance_4;
  r = this$static._red;
  g = this$static._green;
  b = this$static._blue;
  max_0 = $max_1($max_1(r, g), b);
  min_0 = $min_2($min_2(r, g), b);
  span_0 = max_0 - min_0;
  if (span_0 == 0) {
    return 0;
  }
  r == max_0?(h_0 = (g - b) / span_0 * 1.0471975511965976):g == max_0?(h_0 = 2.0943951023931953 + (b - r) / span_0 * 1.0471975511965976):(h_0 = 4.1887902047863905 + (r - g) / span_0 * 1.0471975511965976);
  if (h_0 < 0) {
    return 6.283185307179586 + h_0;
  }
  return h_0;
}

function $getSaturation(this$static){
  var max_0, min_0;
  max_0 = $max(this$static._red, this$static._green, this$static._blue);
  min_0 = $min(this$static._red, this$static._green, this$static._blue);
  if (max_0 == 0) {
    return 0;
  }
  return (max_0 - min_0) / max_0;
}

function $mixedWith(this$static, that, factor){
  var frac1, frac2, newAlpha, newBlue, newGreen, newRed;
  frac1 = factor;
  factor < 0 && (frac1 = 0);
  frac1 > 1 && (frac1 = 1);
  frac2 = 1 - frac1;
  newRed = this$static._red * frac2 + that._red * frac1;
  newGreen = this$static._green * frac2 + that._green * frac1;
  newBlue = this$static._blue * frac2 + that._blue * frac1;
  newAlpha = this$static._alpha * frac2 + that._alpha * frac1;
  return new Color_0(newRed, newGreen, newBlue, newAlpha);
}

function $toID(this$static){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  $addFloat(isb, this$static._red);
  isb._string += '/';
  $addFloat(isb, this$static._green);
  isb._string += '/';
  $addFloat(isb, this$static._blue);
  isb._string += '/';
  $addFloat(isb, this$static._alpha);
  s = isb._string;
  return s;
}

function $wheelStep(this$static, step){
  var hueInRadians;
  hueInRadians = $getHueInRadians(this$static) + 1.2566370614359172 * step;
  return fromHueSaturationBrightness(hueInRadians, $getSaturation(this$static), $max(this$static._red, this$static._green, this$static._blue), this$static._alpha);
}

function Color_0(red, green, blue, alpha_0){
  this._red = red;
  this._green = green;
  this._blue = blue;
  this._alpha = alpha_0;
}

function Color_1(that){
  this._red = that._red;
  this._green = that._green;
  this._blue = that._blue;
  this._alpha = that._alpha;
}

function fromHueSaturationBrightness(hueInRadians, saturation, brightness, alpha_0){
  var f, hf, i_0, p, q, s, t, v;
  s = $clamp(saturation);
  v = $clamp(brightness);
  if (s == 0) {
    return new Color_0(v, v, v, alpha_0);
  }
  hf = $pseudoModule(hueInRadians) / 1.0471975511965976;
  i_0 = round_int(hf);
  f = hf - i_0;
  p = (1 - s) * v;
  q = (1 - s * f) * v;
  t = (1 - s * (1 - f)) * v;
  switch (i_0) {
    case 0:
      return new Color_0(v, t, p, alpha_0);
    case 1:
      return new Color_0(q, v, p, alpha_0);
    case 2:
      return new Color_0(p, v, t, alpha_0);
    case 3:
      return new Color_0(p, q, v, alpha_0);
    case 4:
      return new Color_0(t, p, v, alpha_0);
    default:return new Color_0(v, p, q, alpha_0);
  }
}

defineSeed(415, 1, {}, Color_0, Color_1);
_.toString$ = function toString_41(){
  var isb;
  return isb = new StringBuilder_WebGL_0 , isb._string += '[Color red=' , $addFloat(isb, this._red) , isb._string += ', green=' , $addFloat(isb, this._green) , isb._string += ', blue=' , $addFloat(isb, this._blue) , isb._string += ', alpha=' , $addFloat(isb, this._alpha) , isb._string += ']' , isb._string;
}
;
_._alpha = 0;
_._blue = 0;
_._green = 0;
_._red = 0;
function GLFeature_0(group, id_0){
  RCObject_0.call(this);
  this._group = group;
  this._id = id_0;
  this._values = new GPUVariableValueSet_0;
}

defineSeed(419, 413, makeCastMap([Q$GLFeature, Q$RCObject]));
_.dispose = function dispose_14(){
  !!this._values && $dispose_6(this._values);
  $dispose_1(this);
}
;
_._id = 0;
function PriorityGLFeature_0(g, id_0, priority){
  GLFeature_0.call(this, g, id_0);
  this._priority = priority;
}

defineSeed(418, 419, makeCastMap([Q$GLFeature, Q$PriorityGLFeature, Q$RCObject]));
_.dispose = function dispose_15(){
  !!this._values && $dispose_6(this._values);
  $dispose_1(this);
}
;
_._priority = 0;
function $blendingOnGlobalGLState(this$static, state){
  if (this$static._blend) {
    state._blend = true;
    $setBlendFactors(state, this$static._sFactor, this$static._dFactor);
  }
   else {
    state._blend = false;
  }
}

function GLColorGroupFeature_0(id_0, priority, blend, sFactor, dFactor){
  PriorityGLFeature_0.call(this, ($clinit_GLFeatureGroupName() , COLOR_GROUP), id_0, priority);
  this._blend = blend;
  this._sFactor = sFactor;
  this._dFactor = dFactor;
}

defineSeed(417, 418, makeCastMap([Q$GLFeature, Q$PriorityGLFeature, Q$RCObject]));
_.dispose = function dispose_16(){
  !!this._values && $dispose_6(this._values);
  $dispose_1(this);
}
;
_._blend = false;
_._dFactor = 0;
_._sFactor = 0;
function ColorGLFeature_0(colors, sFactor, dFactor){
  var value_0;
  GLColorGroupFeature_0.call(this, 7, 3, true, sFactor, dFactor);
  value_0 = new GPUAttributeValueVec4Float_0(colors, 4);
  $addAttributeValue(this._values, ($clinit_GPUAttributeKey() , COLOR), value_0);
}

defineSeed(416, 417, makeCastMap([Q$GLFeature, Q$PriorityGLFeature, Q$RCObject]), ColorGLFeature_0);
_.applyOnGlobalGLState = function applyOnGlobalGLState(state){
  $blendingOnGlobalGLState(this, state);
}
;
_.dispose = function dispose_17(){
  !!this._values && $dispose_6(this._values);
  $dispose_1(this);
}
;
function $add_9(this$static, child){
  $add_5(this$static._children, child);
  this$static._extent = null;
  this$static._rawExtent = null;
}

function $drawAt(this$static, left, top_0, canvas){
  var extent, extra;
  extent = $getExtent_0(this$static, canvas);
  $setFillColor(canvas, this$static._color);
  $fillRoundedRectangle(canvas, left + this$static._margin, top_0 + this$static._margin, extent._x - this$static._margin * 2, extent._y - this$static._margin * 2, this$static._cornerRadius);
  extra = this$static._margin + this$static._padding;
  $rawDrawAt(this$static, left + extra, top_0 + extra, this$static._rawExtent, canvas);
}

function $getExtent_0(this$static, canvas){
  var extra;
  if (!this$static._extent) {
    this$static._rawExtent = $calculateExtent(this$static, canvas);
    extra = (this$static._margin + this$static._padding) * 2;
    this$static._extent = new Vector2F_0(this$static._rawExtent._x + extra, this$static._rawExtent._y + extra);
  }
  return this$static._extent;
}

defineSeed(421, 407, makeCastMap([Q$CanvasElement]));
_.drawAt = function drawAt(left, top_0, canvas){
  $drawAt(this, left, top_0, canvas);
}
;
_.getExtent = function getExtent(canvas){
  return $getExtent_0(this, canvas);
}
;
_._cornerRadius = 0;
_._margin = 0;
_._padding = 0;
function $calculateExtent(this$static, canvas){
  var child, childExtent, childrenSize, height, i_0, width_0;
  width_0 = 0;
  height = 0;
  childrenSize = this$static._children.size_0;
  for (i_0 = 0; i_0 < childrenSize; i_0++) {
    child = dynamicCast($get_2(this$static._children, i_0), Q$CanvasElement);
    childExtent = child.getExtent(canvas);
    childExtent._x > width_0 && (width_0 = childExtent._x);
    height += childExtent._y;
  }
  return new Vector2F_0(width_0, height);
}

function $rawDrawAt(this$static, left, top_0, extent, canvas){
  var child, childExtent, childrenSize, cursorLeft, cursorTop, halfWidth, i_0;
  halfWidth = extent._x / 2;
  cursorTop = top_0;
  childrenSize = this$static._children.size_0;
  for (i_0 = 0; i_0 < childrenSize; i_0++) {
    child = dynamicCast($get_2(this$static._children, i_0), Q$CanvasElement);
    childExtent = child.getExtent(canvas);
    switch (this$static._elementAlign) {
      case 0:
        cursorLeft = left;
        break;
      case 2:
        cursorLeft = left + extent._x - childExtent._x;
        break;
      case 1:
      default:cursorLeft = left + halfWidth - childExtent._x / 2;
    }
    child.drawAt(cursorLeft, cursorTop, canvas);
    cursorTop += childExtent._y;
  }
}

function ColumnCanvasElement_0(color_0){
  this._children = new ArrayList_0;
  this._color = new Color_1(color_0);
  this._margin = 0;
  this._padding = 16;
  this._cornerRadius = 8;
  this._extent = null;
  this._rawExtent = null;
  this._elementAlign = 1;
}

defineSeed(420, 421, makeCastMap([Q$CanvasElement]), ColumnCanvasElement_0);
_._elementAlign = 0;
function $addMesh(this$static, mesh){
  !!this$static._boundingVolume && this$static._boundingVolume.dispose();
  this$static._boundingVolume = null;
  $add_5(this$static._children, mesh);
}

function $calculateBoundingVolume(this$static){
  var child, childrenCount, i_0, newResult, result;
  childrenCount = this$static._children.size_0;
  if (childrenCount == 0) {
    return null;
  }
  result = dynamicCast($get_2(this$static._children, 0), Q$Mesh).getBoundingVolume();
  for (i_0 = 1; i_0 < childrenCount; i_0++) {
    child = dynamicCast($get_2(this$static._children, i_0), Q$Mesh);
    newResult = result.mergedWith(child.getBoundingVolume());
    !!result && result.dispose();
    result = newResult;
  }
  return result;
}

function $dispose_2(this$static){
  var child, childrenCount, i_0;
  childrenCount = this$static._children.size_0;
  for (i_0 = 0; i_0 < childrenCount; i_0++) {
    child = dynamicCast($get_2(this$static._children, i_0), Q$Mesh);
    !!child && child.dispose();
  }
  !!this$static._boundingVolume && this$static._boundingVolume.dispose();
}

function $rawRender(this$static, rc, parentGLState){
  var child, childrenCount, i_0;
  childrenCount = this$static._children.size_0;
  for (i_0 = 0; i_0 < childrenCount; i_0++) {
    child = dynamicCast($get_2(this$static._children, i_0), Q$Mesh);
    child._enable && child.rawRender(rc, parentGLState);
  }
}

function CompositeMesh_0(){
  Mesh_0.call(this);
  this._children = new ArrayList_0;
}

defineSeed(422, 369, makeCastMap([Q$Mesh]), CompositeMesh_0);
_.dispose = function dispose_18(){
  $dispose_2(this);
}
;
_.getBoundingVolume = function getBoundingVolume_1(){
  !this._boundingVolume && (this._boundingVolume = $calculateBoundingVolume(this));
  return this._boundingVolume;
}
;
_.rawRender = function rawRender_1(rc, parentGLState){
  $rawRender(this, rc, parentGLState);
}
;
function $addChildRenderer(this$static, renderer){
  $add_5(this$static._renderers, renderer);
  this$static._renderersSize = this$static._renderers.size_0;
  !!this$static._context && renderer._renderer.initialize_0(this$static._context);
  renderer._renderer.setChangedRendererInfoListener(this$static, this$static._renderers.size_0 - 1);
}

function $getInfo(this$static){
  var child, childInfo, i_0;
  $clear(this$static._info);
  for (i_0 = 0; i_0 < this$static._renderersSize; i_0++) {
    child = dynamicCast($get_2(this$static._renderers, i_0), Q$ChildRenderer);
    childInfo = child._info;
    $addAll(this$static._info, childInfo);
  }
  return this$static._info;
}

function CompositeRenderer_0(){
  this._info = new ArrayList_0;
  this._renderers = new ArrayList_0;
  this._errors = new ArrayList_0;
  this._context = null;
  this._enable = true;
  this._renderersSize = 0;
  this._changedInfoListener = null;
}

defineSeed(423, 1, makeCastMap([Q$CompositeRenderer, Q$Renderer]), CompositeRenderer_0);
_.changedRendererInfo = function changedRendererInfo(rendererIdentifier, info){
  rendererIdentifier < this._renderersSize?$setInfo(dynamicCast($get_2(this._renderers, rendererIdentifier), Q$ChildRenderer), info):$logWarning(_instance_3, 'Child Render not found: %d', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(rendererIdentifier)]));
  !!this._changedInfoListener && this._changedInfoListener.changedRendererInfo(-1, $getInfo(this));
}
;
_.getPlanetRenderer = function getPlanetRenderer(){
  var i_0, planetRenderer, renderer, result;
  result = null;
  for (i_0 = 0; i_0 < this._renderersSize; i_0++) {
    renderer = dynamicCast($get_2(this._renderers, i_0), Q$ChildRenderer)._renderer;
    planetRenderer = renderer.getPlanetRenderer();
    !!planetRenderer && (!result?(result = planetRenderer):$logError(_instance_3, 'Inconsistency in Renderers: more than one PlanetRenderer', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [])));
  }
  return result;
}
;
_.getRenderState_0 = function getRenderState_0(rc){
  var busyFlag, child, childErrors, childRenderState, childRenderStateType, errorFlag, i_0;
  $clear(this._errors);
  busyFlag = false;
  errorFlag = false;
  for (i_0 = 0; i_0 < this._renderersSize; i_0++) {
    child = dynamicCast($get_2(this._renderers, i_0), Q$ChildRenderer)._renderer;
    if (child.isEnable()) {
      childRenderState = child.getRenderState_0(rc);
      childRenderStateType = childRenderState._type;
      if (childRenderStateType == 2) {
        errorFlag = true;
        childErrors = childRenderState._errors;
        $addAll(this._errors, childErrors);
      }
       else 
        childRenderStateType == 1 && (busyFlag = true);
    }
  }
  return errorFlag?($clinit_RenderState() , new RenderState_0(this._errors)):busyFlag?($clinit_RenderState() , $clinit_RenderState() , BUSY):($clinit_RenderState() , $clinit_RenderState() , READY);
}
;
_.getSurfaceElevationProvider = function getSurfaceElevationProvider(){
  var childSurfaceElevationProvider, i_0, renderer, result;
  result = null;
  for (i_0 = 0; i_0 < this._renderersSize; i_0++) {
    renderer = dynamicCast($get_2(this._renderers, i_0), Q$ChildRenderer)._renderer;
    childSurfaceElevationProvider = renderer.getSurfaceElevationProvider();
    !!childSurfaceElevationProvider && (!result?(result = childSurfaceElevationProvider):$logError(_instance_3, 'Inconsistency in Renderers: more than one SurfaceElevationProvider', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [])));
  }
  return result;
}
;
_.initialize_0 = function initialize_5(context){
  var i_0;
  this._context = context;
  for (i_0 = 0; i_0 < this._renderersSize; i_0++) {
    dynamicCast($get_2(this._renderers, i_0), Q$ChildRenderer)._renderer.initialize_0(context);
  }
}
;
_.isEnable = function isEnable(){
  var i_0;
  if (!this._enable) {
    return false;
  }
  for (i_0 = 0; i_0 < this._renderersSize; i_0++) {
    if (dynamicCast($get_2(this._renderers, i_0), Q$ChildRenderer)._renderer.isEnable()) {
      return true;
    }
  }
  return false;
}
;
_.isPlanetRenderer = function isPlanetRenderer(){
  return false;
}
;
_.onResizeViewportEvent = function onResizeViewportEvent_1(ec, width_0, height){
  var i_0;
  for (i_0 = this._renderersSize - 1; i_0 >= 0; i_0--) {
    dynamicCast($get_2(this._renderers, i_0), Q$ChildRenderer)._renderer.onResizeViewportEvent(ec, width_0, height);
  }
}
;
_.onTouchEvent_0 = function onTouchEvent_3(ec, touchEvent){
  var i_0, renderer;
  for (i_0 = this._renderersSize - 1; i_0 >= 0; i_0--) {
    renderer = dynamicCast($get_2(this._renderers, i_0), Q$ChildRenderer)._renderer;
    if (renderer.isEnable()) {
      if (renderer.onTouchEvent_0(ec, touchEvent)) {
        return true;
      }
    }
  }
  return false;
}
;
_.render = function render_5(rc, glState){
  var i_0, renderer;
  for (i_0 = 0; i_0 < this._renderersSize; i_0++) {
    renderer = dynamicCast($get_2(this._renderers, i_0), Q$ChildRenderer)._renderer;
    renderer.isEnable() && renderer.render(rc, glState);
  }
}
;
_.setChangedRendererInfoListener = function setChangedRendererInfoListener(changedInfoListener, rendererIdentifier){
  !!this._changedInfoListener && $logError(_instance_3, 'Changed Renderer Info Listener of CompositeRenderer already set', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  this._changedInfoListener = changedInfoListener;
  !!this._changedInfoListener && this._changedInfoListener.changedRendererInfo(-1, $getInfo(this));
}
;
_.start_2 = function start_6(rc){
  var i_0;
  for (i_0 = 0; i_0 < this._renderersSize; i_0++) {
    dynamicCast($get_2(this._renderers, i_0), Q$ChildRenderer)._renderer.start_2(rc);
  }
}
;
_.stop_1 = function stop_4(rc){
  var i_0;
  for (i_0 = 0; i_0 < this._renderersSize; i_0++) {
    dynamicCast($get_2(this._renderers, i_0), Q$ChildRenderer)._renderer.stop_1(rc);
  }
}
;
_._enable = false;
_._renderersSize = 0;
function $clinit_TileImageContribution(){
  $clinit_TileImageContribution = nullMethod;
  FULL_COVERAGE_OPAQUE = new TileImageContribution_1(false, 1);
}

function TileImageContribution_0(sector, isTransparent, alpha_0){
  $clinit_TileImageContribution();
  RCObject_0.call(this);
  this._isFullCoverage = false;
  this._sector = new Sector_1(sector);
  this._isTransparent = isTransparent;
  this._alpha = alpha_0;
}

function TileImageContribution_1(isTransparent, alpha_0){
  RCObject_0.call(this);
  this._isFullCoverage = true;
  this._sector = new Sector_1(($clinit_Sector() , NAN_SECTOR));
  this._isTransparent = isTransparent;
  this._alpha = alpha_0;
}

function fullCoverageTransparent(alpha_0){
  $clinit_TileImageContribution();
  if (alpha_0 <= 0.01) {
    return null;
  }
  if (!_lastFullCoverageTransparent || _lastFullCoverageTransparent._alpha != alpha_0) {
    !!_lastFullCoverageTransparent && $_release(_lastFullCoverageTransparent);
    _lastFullCoverageTransparent = new TileImageContribution_1(true, alpha_0);
  }
  ++_lastFullCoverageTransparent._referenceCounter;
  return _lastFullCoverageTransparent;
}

function partialCoverageTransparent(sector, alpha_0){
  $clinit_TileImageContribution();
  return alpha_0 <= 0.01?null:new TileImageContribution_0(sector, true, alpha_0);
}

function releaseContribution(contribution){
  $clinit_TileImageContribution();
  !!contribution && $_release(contribution);
}

function retainContribution(contribution){
  $clinit_TileImageContribution();
  !!contribution && ++contribution._referenceCounter;
}

defineSeed(425, 413, makeCastMap([Q$RCObject]), TileImageContribution_0, TileImageContribution_1);
_.dispose = function dispose_19(){
  $dispose_1(this);
}
;
_._alpha = 0;
_._isFullCoverage = false;
_._isTransparent = false;
var FULL_COVERAGE_OPAQUE, _lastFullCoverageTransparent = null;
function CompositeTileImageContribution_0(contributions, transparent){
  TileImageContribution_1.call(this, transparent, 1);
  this._contributions = contributions;
}

function create_2(contributions){
  $clinit_TileImageContribution();
  var firsChild;
  if (contributions.size_0 == 0) {
    return null;
  }
  firsChild = (checkIndex(0, contributions.size_0) , dynamicCast(contributions.array[0], Q$CompositeTileImageContribution$ChildContribution));
  return new CompositeTileImageContribution_0(contributions, firsChild._contribution._alpha >= 0.99);
}

defineSeed(424, 425, makeCastMap([Q$CompositeTileImageContribution, Q$RCObject]), CompositeTileImageContribution_0);
_.dispose = function dispose_20(){
  var contribution, contributionsSize, i_0;
  contributionsSize = this._contributions.size_0;
  for (i_0 = 0; i_0 < contributionsSize; i_0++) {
    contribution = dynamicCast($get_2(this._contributions, i_0), Q$CompositeTileImageContribution$ChildContribution);
    releaseContribution(contribution._contribution);
  }
  $dispose_1(this);
}
;
function CompositeTileImageContribution$ChildContribution_0(childIndex, contribution){
  this._childIndex = childIndex;
  this._contribution = contribution;
}

defineSeed(426, 1, makeCastMap([Q$CompositeTileImageContribution$ChildContribution]), CompositeTileImageContribution$ChildContribution_0);
_._childIndex = 0;
function $cancelChildren(this$static, tileId, compositeContribution){
  var child, contributionsSize, i_0, i0, indexes;
  contributionsSize = compositeContribution._contributions.size_0;
  indexes = initDim(_3I_classLit, makeCastMap([Q$Serializable]), -1, contributionsSize, 1);
  for (i0 = 0; i0 < contributionsSize; i0++) {
    indexes[i0] = dynamicCast($get_2(compositeContribution._contributions, i0), Q$CompositeTileImageContribution$ChildContribution)._childIndex;
  }
  for (i_0 = 0; i_0 < contributionsSize; i_0++) {
    child = dynamicCast($get_2(this$static._children, indexes[i_0]), Q$TileImageProvider);
    child.cancel_1(tileId);
  }
}

function $composerDone(this$static, composer){
  $remove_4(this$static._composers, composer._tileId);
  $_release(composer);
}

function CompositeTileImageProvider_0(){
  TileImageProvider_0.call(this);
  new Color_0(0, 0, 0, 0);
  this._children = new ArrayList_0;
  this._composers = new HashMap_0;
  this._childrenSize = 0;
}

defineSeed(427, 411, makeCastMap([Q$RCObject, Q$TileImageProvider]), CompositeTileImageProvider_0);
_.cancel_1 = function cancel_4(tileId){
  var composer;
  composer = dynamicCast($remove_4(this._composers, tileId), Q$CompositeTileImageProvider$Composer);
  !!composer && (composer._canceled = true , $cancelChildren(composer._compositeTileImageProvider, tileId, composer._compositeContribution));
}
;
_.contribution = function contribution_0(tile){
  var child, childContribution, childrenContributions, childrenContributionsSize, i_0, j, previousContribution;
  childrenContributions = new ArrayList_0;
  for (i_0 = 0; i_0 < this._childrenSize; i_0++) {
    child = dynamicCast($get_2(this._children, i_0), Q$TileImageProvider);
    childContribution = child.contribution(tile);
    if (childContribution) {
      childrenContributionsSize = childrenContributions.size_0;
      if (childrenContributionsSize > 0 && childContribution._isFullCoverage && !childContribution._isTransparent && childContribution._alpha >= 0.99) {
        for (j = 0; j < childrenContributionsSize; j++) {
          previousContribution = (checkIndex(j, childrenContributions.size_0) , dynamicCast(childrenContributions.array[j], Q$CompositeTileImageContribution$ChildContribution));
          releaseContribution(previousContribution._contribution);
        }
        childrenContributions.array = initDim(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, 0, 0);
        childrenContributions.size_0 = 0;
      }
      $add_5(childrenContributions, new CompositeTileImageContribution$ChildContribution_0(i_0, childContribution));
    }
  }
  return create_2(childrenContributions);
}
;
_.create = function create_3(tile, contribution, resolution, tileDownloadPriority, logDownloadActivity, listener, deleteListener, frameTasksExecutor){
  var child, childContribution, composer, compositeContribution, contributionsSize, i_0, tileId;
  compositeContribution = dynamicCast(contribution, Q$CompositeTileImageContribution);
  tileId = tile._id;
  composer = new CompositeTileImageProvider$Composer_0(resolution._x, resolution._y, this, tileId, tile._sector, listener, deleteListener, compositeContribution, frameTasksExecutor);
  $put(this._composers, tileId, composer);
  contributionsSize = compositeContribution._contributions.size_0;
  for (i_0 = 0; i_0 < contributionsSize; i_0++) {
    childContribution = dynamicCast($get_2(compositeContribution._contributions, i_0), Q$CompositeTileImageContribution$ChildContribution);
    child = dynamicCast($get_2(this._children, childContribution._childIndex), Q$TileImageProvider);
    retainContribution(childContribution._contribution);
    child.create(tile, childContribution._contribution, resolution, tileDownloadPriority, logDownloadActivity, new CompositeTileImageProvider$ChildTileImageListener_0(composer, i_0), true, frameTasksExecutor);
  }
}
;
_.dispose = function dispose_21(){
  var child, i_0;
  for (i_0 = 0; i_0 < this._childrenSize; i_0++) {
    child = dynamicCast($get_2(this._children, i_0), Q$TileImageProvider);
    $_release(child);
  }
  $dispose_1(this);
}
;
_._childrenSize = 0;
function CompositeTileImageProvider$ChildResult_0(isError, isCanceled, image, imageId, contribution, error){
  this._isError = isError;
  this._isCanceled = isCanceled;
  this._image = image;
  this._imageId = imageId;
  this._contribution = contribution;
  this._error = error;
}

defineSeed(428, 1, makeCastMap([Q$CompositeTileImageProvider$ChildResult]), CompositeTileImageProvider$ChildResult_0);
_._isCanceled = false;
_._isError = false;
defineSeed(430, 1, {});
_.dispose = function dispose_22(){
}
;
function CompositeTileImageProvider$ChildTileImageListener_0(composer, index_0){
  this._composer = composer;
  this._index = index_0;
  ++this._composer._referenceCounter;
}

defineSeed(429, 430, {}, CompositeTileImageProvider$ChildTileImageListener_0);
_.dispose = function dispose_23(){
  $_release(this._composer);
}
;
_.imageCreated_0 = function imageCreated_0(tileId, image, imageId, contribution){
  $imageCreated(this._composer, image, imageId, contribution, this._index);
}
;
_.imageCreationCanceled = function imageCreationCanceled(tileId){
  $imageCreationCanceled(this._composer, this._index);
}
;
_.imageCreationError = function imageCreationError(tileId, error){
  $imageCreationError(this._composer, error, this._index);
}
;
_._index = 0;
function $cleanUp(this$static){
  if (this$static._deleteListener) {
    !!this$static._listener && this$static._listener.dispose();
    this$static._listener = null;
  }
  $composerDone(this$static._compositeTileImageProvider, this$static);
}

function $done(this$static){
  var childResult, composedError, contributionSector, i_0, simpleCase, singleResult;
  if (this$static._canceled) {
    $cleanUp(this$static);
    return;
  }
  if (this$static._contributionsSize == 1) {
    singleResult = dynamicCast($get_2(this$static._results, 0), Q$CompositeTileImageProvider$ChildResult);
    contributionSector = !singleResult._contribution?null:singleResult._contribution._sector;
    simpleCase = !contributionSector || contributionSector._lower._latitude._degrees != contributionSector._lower._latitude._degrees || $isEquals_3(this$static._tileSector, contributionSector);
  }
   else {
    simpleCase = false;
  }
  if (simpleCase) {
    singleResult = dynamicCast($get_2(this$static._results, 0), Q$CompositeTileImageProvider$ChildResult);
    if (singleResult._isError) {
      this$static._listener.imageCreationError(this$static._tileId, singleResult._error);
    }
     else if (singleResult._isCanceled) {
      this$static._listener.imageCreationCanceled(this$static._tileId);
    }
     else {
      retainContribution(singleResult._contribution);
      this$static._listener.imageCreated_0(singleResult._imageId, new Image_WebGL_0(singleResult._image._imgObject), singleResult._imageId, singleResult._contribution);
    }
    $cleanUp(this$static);
  }
   else {
    if (this$static._anyError) {
      composedError = '';
      for (i_0 = 0; i_0 < this$static._contributionsSize; i_0++) {
        childResult = dynamicCast($get_2(this$static._results, i_0), Q$CompositeTileImageProvider$ChildResult);
        childResult._isError && (composedError += childResult._error + ' ');
      }
      this$static._listener.imageCreationError(this$static._tileId, composedError);
      $cleanUp(this$static);
    }
     else if (this$static._anyCancelation) {
      this$static._listener.imageCreationCanceled(this$static._tileId);
      $cleanUp(this$static);
    }
     else {
      $addPreRenderTask(this$static._frameTasksExecutor, new CompositeTileImageProvider$ComposerFrameTask_0(this$static));
    }
  }
}

function $imageCreated(this$static, image, imageId, contribution, index_0){
  $set(this$static._results, index_0, new CompositeTileImageProvider$ChildResult_0(false, false, image, imageId, contribution, ''));
  ++this$static._stepsDone;
  this$static._stepsDone == this$static._contributionsSize && $done(this$static);
}

function $imageCreated_0(this$static, image){
  var compositeContribution;
  compositeContribution = this$static._compositeContribution;
  this$static._compositeContribution = null;
  this$static._listener.imageCreated_0(this$static._tileId, image, this$static._imageId, compositeContribution);
  $cleanUp(this$static);
}

function $imageCreationCanceled(this$static, index_0){
  $set(this$static._results, index_0, new CompositeTileImageProvider$ChildResult_0(false, true, null, '', null, ''));
  this$static._anyCancelation = true;
  ++this$static._stepsDone;
  this$static._stepsDone == this$static._contributionsSize && $done(this$static);
}

function $imageCreationError(this$static, error, index_0){
  $set(this$static._results, index_0, new CompositeTileImageProvider$ChildResult_0(true, false, null, '', null, error));
  this$static._anyError = true;
  ++this$static._stepsDone;
  this$static._stepsDone == this$static._contributionsSize && $done(this$static);
}

function $mixResult(this$static){
  var alpha_0, canvas, destRect, i_0, image, imageId, imageSector, result, srcRect, visibleContributionSector;
  if (this$static._canceled) {
    $cleanUp(this$static);
    return;
  }
  canvas = new Canvas_WebGL_0;
  $initialize_2(canvas, this$static._width, this$static._height);
  imageId = new StringBuilder_WebGL_0;
  for (i_0 = 0; i_0 < this$static._contributionsSize; i_0++) {
    result = dynamicCast($get_2(this$static._results, i_0), Q$CompositeTileImageProvider$ChildResult);
    $addString(imageId, result._imageId);
    imageId._string += '|';
    image = result._image;
    alpha_0 = result._contribution._alpha;
    if (result._contribution._isFullCoverage) {
      if (result._contribution._alpha >= 0.99) {
        $drawImage(canvas, image, this$static._width, this$static._height);
      }
       else {
        imageId._string += alpha_0;
        imageId._string += '|';
        $drawImage_0(canvas, image, this$static._width, this$static._height, alpha_0);
      }
    }
     else {
      imageSector = result._contribution._sector;
      visibleContributionSector = $intersection(imageSector, this$static._tileSector);
      $addString(imageId, $id_0(visibleContributionSector));
      imageId._string += '|';
      srcRect = calculateInnerRectangleFromSector($getWidth(image), $getHeight(image), imageSector, visibleContributionSector);
      destRect = calculateInnerRectangleFromSector(this$static._width, this$static._height, this$static._tileSector, visibleContributionSector);
      $addString(imageId, $id(destRect));
      imageId._string += '|';
      $drawImage_1(canvas, image, srcRect._x, srcRect._y, srcRect._width, srcRect._height, destRect._x, destRect._y, destRect._width, destRect._height, alpha_0);
    }
  }
  this$static._imageId = imageId._string;
  $createImage(canvas, new CompositeTileImageProvider$ComposerImageListener_0(this$static));
}

function CompositeTileImageProvider$Composer_0(width_0, height, compositeTileImageProvider, tileId, tileSector, listener, deleteListener, compositeContribution, frameTasksExecutor){
  var i_0;
  RCObject_0.call(this);
  this._results = new ArrayList_0;
  this._width = width_0;
  this._height = height;
  this._compositeTileImageProvider = compositeTileImageProvider;
  this._tileId = tileId;
  this._listener = listener;
  this._deleteListener = deleteListener;
  this._compositeContribution = compositeContribution;
  this._contributionsSize = compositeContribution._contributions.size_0;
  this._frameTasksExecutor = frameTasksExecutor;
  this._stepsDone = 0;
  this._anyError = false;
  this._anyCancelation = false;
  this._canceled = false;
  this._tileSector = new Sector_1(tileSector);
  ++this._compositeTileImageProvider._referenceCounter;
  for (i_0 = 0; i_0 < this._contributionsSize; i_0++) {
    $add_5(this._results, null);
  }
}

defineSeed(431, 413, makeCastMap([Q$CompositeTileImageProvider$Composer, Q$RCObject]), CompositeTileImageProvider$Composer_0);
_.dispose = function dispose_24(){
  var i_0, result;
  for (i_0 = 0; i_0 < this._contributionsSize; i_0++) {
    result = dynamicCast($get_2(this._results, i_0), Q$CompositeTileImageProvider$ChildResult);
    !!result && (!!result._image && undefined , releaseContribution(result._contribution));
  }
  releaseContribution(this._compositeContribution);
  $_release(this._compositeTileImageProvider);
  $dispose_1(this);
}
;
_._anyCancelation = false;
_._anyError = false;
_._canceled = false;
_._contributionsSize = 0;
_._deleteListener = false;
_._height = 0;
_._stepsDone = 0;
_._width = 0;
defineSeed(433, 1, makeCastMap([Q$FrameTask]));
_.dispose = function dispose_25(){
}
;
function CompositeTileImageProvider$ComposerFrameTask_0(composer){
  this._composer = composer;
  ++this._composer._referenceCounter;
}

defineSeed(432, 433, makeCastMap([Q$FrameTask]), CompositeTileImageProvider$ComposerFrameTask_0);
_.dispose = function dispose_26(){
  $_release(this._composer);
}
;
_.execute_3 = function execute_13(rc){
  $mixResult(this._composer);
}
;
_.isCanceled_0 = function isCanceled_0(rc){
  return false;
}
;
function CompositeTileImageProvider$ComposerImageListener_0(composer){
  this._composer = composer;
  ++this._composer._referenceCounter;
}

defineSeed(434, 410, {}, CompositeTileImageProvider$ComposerImageListener_0);
_.dispose = function dispose_27(){
  $_release(this._composer);
}
;
_.imageCreated = function imageCreated_1(image){
  $imageCreated_0(this._composer, image);
}
;
function $applyTaitBryanAngles(this$static, heading, pitch, roll){
  var hm, isHeadingZero, isPitchZero, isRollZero, pm, rm, u, up, uppp, v, vp, vpp, w, wpp, wppp;
  u = this$static._x;
  v = this$static._y;
  w = this$static._z;
  isHeadingZero = heading._degrees == 0;
  hm = isHeadingZero?new MutableMatrix44D_3:createGeneralRotationMatrix(heading, w, ($clinit_Vector3D() , zero));
  up = isHeadingZero?u:new Vector3D_0(u._x * hm._m00 + u._y * hm._m01 + u._z * hm._m02 + hm._m03, u._x * hm._m10 + u._y * hm._m11 + u._z * hm._m12 + hm._m13, u._x * hm._m20 + u._y * hm._m21 + u._z * hm._m22 + hm._m23);
  vp = isHeadingZero?v:new Vector3D_0(v._x * hm._m00 + v._y * hm._m01 + v._z * hm._m02 + hm._m03, v._x * hm._m10 + v._y * hm._m11 + v._z * hm._m12 + hm._m13, v._x * hm._m20 + v._y * hm._m21 + v._z * hm._m22 + hm._m23);
  isPitchZero = pitch._degrees == 0;
  pm = isPitchZero?new MutableMatrix44D_3:createGeneralRotationMatrix(pitch, up, ($clinit_Vector3D() , zero));
  vpp = isPitchZero?vp:new Vector3D_0(vp._x * pm._m00 + vp._y * pm._m01 + vp._z * pm._m02 + pm._m03, vp._x * pm._m10 + vp._y * pm._m11 + vp._z * pm._m12 + pm._m13, vp._x * pm._m20 + vp._y * pm._m21 + vp._z * pm._m22 + pm._m23);
  wpp = isPitchZero?w:new Vector3D_0(w._x * pm._m00 + w._y * pm._m01 + w._z * pm._m02 + pm._m03, w._x * pm._m10 + w._y * pm._m11 + w._z * pm._m12 + pm._m13, w._x * pm._m20 + w._y * pm._m21 + w._z * pm._m22 + pm._m23);
  isRollZero = roll._degrees == 0;
  rm = isRollZero?new MutableMatrix44D_3:createGeneralRotationMatrix(roll, vpp, ($clinit_Vector3D() , zero));
  uppp = isRollZero?up:new Vector3D_0(up._x * rm._m00 + up._y * rm._m01 + up._z * rm._m02 + rm._m03, up._x * rm._m10 + up._y * rm._m11 + up._z * rm._m12 + rm._m13, up._x * rm._m20 + up._y * rm._m21 + up._z * rm._m22 + rm._m23);
  wppp = isRollZero?wpp:new Vector3D_0(wpp._x * rm._m00 + wpp._y * rm._m01 + wpp._z * rm._m02 + rm._m03, wpp._x * rm._m10 + wpp._y * rm._m11 + wpp._z * rm._m12 + rm._m13, wpp._x * rm._m20 + wpp._y * rm._m21 + wpp._z * rm._m22 + rm._m23);
  return new CoordinateSystem_1(uppp, vpp, wppp, this$static._origin);
}

function $getTaitBryanAngles(this$static, global){
  var heading, heading0, heading1, pitch, pitch0, pitch1, roll, roll0, u, up, v, vp, vppp, w, wpp, wppp, x_0;
  u = global._x;
  v = global._y;
  w = global._z;
  vppp = this$static._y;
  wppp = this$static._z;
  x_0 = vppp._x * w._x + vppp._y * w._y + vppp._z * w._z;
  if (x_0 < -0.99999 && x_0 > -1.000001) {
    pitch = new Angle_0(-90, -1.5707963267948966);
    roll = new Angle_0(0, 0);
    heading = $signedAngleBetween(v, wppp, w);
    return new TaitBryanAngles_0(heading, pitch, roll);
  }
   else if (x_0 > 0.99999 && x_0 < 1.000001) {
    pitch0 = new Angle_0(90, 1.5707963267948966);
    roll = new Angle_0(0, 0);
    heading0 = $sub($signedAngleBetween(v, wppp, w), new Angle_0(180, 3.141592653589793));
    return new TaitBryanAngles_0(heading0, pitch0, roll);
  }
  up = new Vector3D_0(vppp._y * w._z - vppp._z * w._y, vppp._z * w._x - vppp._x * w._z, vppp._x * w._y - vppp._y * w._x);
  vp = new Vector3D_0(w._y * up._z - w._z * up._y, w._z * up._x - w._x * up._z, w._x * up._y - w._y * up._x);
  wpp = new Vector3D_0(up._y * vppp._z - up._z * vppp._y, up._z * vppp._x - up._x * vppp._z, up._x * vppp._y - up._y * vppp._x);
  heading1 = $signedAngleBetween(u, up, w);
  pitch1 = $signedAngleBetween(vp, vppp, up);
  roll0 = $signedAngleBetween(wpp, wppp, vppp);
  return new TaitBryanAngles_0(heading1, pitch1, roll0);
}

function CoordinateSystem_0(viewDirection, up, origin){
  this._x = new Vector3D_1($normalized_0(new Vector3D_0(viewDirection._y * up._z - viewDirection._z * up._y, viewDirection._z * up._x - viewDirection._x * up._z, viewDirection._x * up._y - viewDirection._y * up._x)));
  this._y = new Vector3D_1($normalized_0(viewDirection));
  this._z = new Vector3D_1($normalized_0(up));
  this._origin = new Vector3D_1(origin);
  if (!checkConsistency(this._x, this._y, this._z)) {
    $logError(_instance_3, 'Inconsistent CoordinateSystem created.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    throw new RuntimeException_1('Inconsistent CoordinateSystem created.');
  }
}

function CoordinateSystem_1(x_0, y_0, z_0, origin){
  this._x = new Vector3D_1($normalized_0(x_0));
  this._y = new Vector3D_1($normalized_0(y_0));
  this._z = new Vector3D_1($normalized_0(z_0));
  this._origin = new Vector3D_1(origin);
  if (!checkConsistency(x_0, y_0, z_0)) {
    $logError(_instance_3, 'Inconsistent CoordinateSystem created.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    throw new RuntimeException_1('Inconsistent CoordinateSystem created.');
  }
}

function checkConsistency(x_0, y_0, z_0){
  if (x_0._x != x_0._x || x_0._y != x_0._y || x_0._z != x_0._z || y_0._x != y_0._x || y_0._y != y_0._y || y_0._z != y_0._z || z_0._x != z_0._x || z_0._y != z_0._y || z_0._z != z_0._z) {
    return false;
  }
  return $abs(x_0._x * y_0._x + x_0._y * y_0._y + x_0._z * y_0._z) < 1.0E-5 && $abs(x_0._x * z_0._x + x_0._y * z_0._y + x_0._z * z_0._z) < 1.0E-5 && $abs(y_0._x * z_0._x + y_0._y * z_0._y + y_0._z * z_0._z) < 1.0E-5;
}

defineSeed(435, 1, {}, CoordinateSystem_0, CoordinateSystem_1);
function $imageCreated_1(this$static, image, imageName){
  $setDefaultBackgroundImage(this$static._defaultTileTesturizer, image);
  $setDefaultBackgroundImageName(this$static._defaultTileTesturizer, imageName);
  this$static._defaultTileTesturizer._defaultBackgroundImageLoaded = true;
  $logInfo(_instance_3, 'Default Background Image loaded...', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
}

function DTT_IImageBuilderListener_0(defaultTileTesturizer){
  this._defaultTileTesturizer = defaultTileTesturizer;
}

defineSeed(436, 1, {}, DTT_IImageBuilderListener_0);
defineSeed(438, 1, {});
function $createTextCoords(this$static){
  return $createTextCoords_0((new Vector2S_0(this$static._resolution._x, this$static._resolution._y) , this$static._tile));
}

function $getScale(this$static){
  return new Vector2F_0(this$static._scaleU, this$static._scaleV);
}

function $getTranslation(this$static){
  return new Vector2F_0(this$static._translationU, this$static._translationV);
}

function $initialize_0(this$static){
  var lowerTextCoordUV, tileSector, upperTextCoordUV;
  if (this$static._tile != this$static._ancestor) {
    tileSector = this$static._tile._sector;
    lowerTextCoordUV = $getTextCoord(this$static._ancestor, tileSector._lower);
    upperTextCoordUV = $getTextCoord(this$static._ancestor, tileSector._upper);
    this$static._translationU = lowerTextCoordUV._x;
    this$static._translationV = upperTextCoordUV._y;
    this$static._scaleU = upperTextCoordUV._x - lowerTextCoordUV._x;
    this$static._scaleV = lowerTextCoordUV._y - upperTextCoordUV._y;
  }
}

function DTT_LTMInitializer_0(resolution, tile, ancestor){
  this._resolution = resolution;
  this._tile = tile;
  this._ancestor = ancestor;
  this._translationU = 0;
  this._translationV = 0;
  this._scaleU = 1;
  this._scaleV = 1;
}

defineSeed(437, 438, {}, DTT_LTMInitializer_0);
_._scaleU = 0;
_._scaleV = 0;
_._translationU = 0;
_._translationV = 0;
function DTT_NotFullProviderImageListener_0(builder, imageId){
  this._builder = builder;
  this._imageId = imageId;
  ++this._builder._referenceCounter;
}

defineSeed(439, 410, {}, DTT_NotFullProviderImageListener_0);
_.dispose = function dispose_28(){
  !!this._builder && $_release(this._builder);
}
;
_.imageCreated = function imageCreated_2(image){
  $imageCreated_2(this._builder, image, this._imageId, ($clinit_TileImageContribution() , ++FULL_COVERAGE_OPAQUE._referenceCounter , $clinit_TileImageContribution() , FULL_COVERAGE_OPAQUE));
}
;
function DTT_TileImageListener_0(builder, tile, tileTextureResolution, backgroundTileImage, backgroundTileImageName){
  this._builder = builder;
  this._tileSector = new Sector_1(tile._sector);
  this._tileTextureResolution = tileTextureResolution;
  this._backgroundTileImage = backgroundTileImage;
  this._backgroundTileImageName = backgroundTileImageName;
  ++this._builder._referenceCounter;
}

defineSeed(440, 430, {}, DTT_TileImageListener_0);
_.dispose = function dispose_29(){
  !!this._builder && $_release(this._builder);
}
;
_.imageCreated_0 = function imageCreated_3(tileId, image, imageId, contribution){
  var alpha_0, auxImageId, canvas, destRect, height, imageSector, srcRect, visibleContributionSector, width_0;
  if (contribution._isFullCoverage && !contribution._isTransparent && contribution._alpha >= 0.99) {
    $imageCreated_2(this._builder, image, imageId, contribution);
  }
   else {
    auxImageId = new StringBuilder_WebGL_0;
    canvas = new Canvas_WebGL_0;
    width_0 = this._tileTextureResolution._x;
    height = this._tileTextureResolution._y;
    $initialize_2(canvas, width_0, height);
    if (this._backgroundTileImage) {
      $addString(auxImageId, this._backgroundTileImageName);
      auxImageId._string += '|';
      $drawImage(canvas, this._backgroundTileImage, width_0, height);
    }
    auxImageId._string += imageId;
    auxImageId._string += '|';
    alpha_0 = contribution._alpha;
    if (contribution._isFullCoverage) {
      auxImageId._string += alpha_0;
      auxImageId._string += '|';
      canvas._canvasWidth > 0 && canvas._canvasHeight > 0 || $logError(_instance_3, 'Canvas is not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
      $_drawImage(canvas, image, 0, 0, width_0, height, alpha_0);
    }
     else {
      imageSector = contribution._sector;
      visibleContributionSector = $intersection(imageSector, this._tileSector);
      $addString(auxImageId, $id_0(visibleContributionSector));
      auxImageId._string += '|';
      srcRect = calculateInnerRectangleFromSector($getWidth(image), $getHeight(image), imageSector, visibleContributionSector);
      destRect = calculateInnerRectangleFromSector(width_0, height, this._tileSector, visibleContributionSector);
      $addString(auxImageId, $id(destRect));
      auxImageId._string += '|';
      $drawImage_1(canvas, image, srcRect._x, srcRect._y, srcRect._width, srcRect._height, destRect._x, destRect._y, destRect._width, destRect._height, alpha_0);
    }
    $createImage(canvas, new DTT_NotFullProviderImageListener_0(this._builder, auxImageId._string));
    $clinit_TileImageContribution();
    !!contribution && $_release(contribution);
  }
}
;
_.imageCreationCanceled = function imageCreationCanceled_0(tileId){
}
;
_.imageCreationError = function imageCreationError_0(tileId, error){
  $logError(_instance_3, '%s', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [error]));
}
;
function $cancel_1(this$static, cleanTile){
  this$static._texturedMesh = null;
  cleanTile && (this$static._tile = null);
  if (!this$static._canceled) {
    this$static._canceled = true;
    this$static._tileImageProvider.cancel_1(this$static._tileId);
  }
}

function $imageCreated_2(this$static, image, imageId, contribution){
  contribution._isFullCoverage && !contribution._isTransparent && contribution._alpha >= 0.99 || $logWarning(_instance_3, "Contribution isn't full covearge and opaque before to upload texture", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  !this$static._canceled && !!this$static._tile && !!this$static._texturedMesh && $uploadTexture(this$static, image, imageId) && $setTextureSolved(this$static._tile, true);
  $clinit_TileImageContribution();
  !!contribution && $_release(contribution);
}

function $start(this$static){
  var contribution;
  if (!this$static._canceled) {
    contribution = this$static._tileImageProvider.contribution(this$static._tile);
    !contribution?!!this$static._tile && $imageCreated_2(this$static, new Image_WebGL_0(this$static._backgroundTileImage._imgObject), this$static._backgroundTileImageName, ($clinit_TileImageContribution() , ++FULL_COVERAGE_OPAQUE._referenceCounter , $clinit_TileImageContribution() , FULL_COVERAGE_OPAQUE)):this$static._tileImageProvider.create(this$static._tile, contribution, this$static._tileTextureResolution, this$static._tileDownloadPriority, this$static._logTilesPetitions, new DTT_TileImageListener_0(this$static, this$static._tile, this$static._tileTextureResolution, this$static._backgroundTileImage, this$static._backgroundTileImageName), true, this$static._frameTasksExecutor);
  }
}

function $uploadTexture(this$static, image, imageId){
  var glTextureId;
  glTextureId = $getTextureIDReference(this$static._texturesHandler, image, _rgba, imageId, this$static._generateMipmap);
  if (!glTextureId) {
    return false;
  }
  $setGLTextureIdForLevel(this$static._texturedMesh, 0, glTextureId) || !!glTextureId && $releaseGLTextureId_1(glTextureId._texHandler, glTextureId._id);
  return true;
}

function DTT_TileTextureBuilder_0(rc, layerTilesRenderParameters, tileImageProvider, tile, tessellatorMesh, tileDownloadPriority, logTilesPetitions, frameTasksExecutor, backgroundTileImage, backgroundTileImageName){
  RCObject_0.call(this);
  this._tileImageProvider = tileImageProvider;
  this._texturesHandler = rc._texturesHandler;
  this._tileTextureResolution = layerTilesRenderParameters._tileTextureResolution;
  this._tile = tile;
  this._tileId = tile._id;
  this._texturedMesh = null;
  this._canceled = false;
  this._tileDownloadPriority = tileDownloadPriority;
  this._logTilesPetitions = logTilesPetitions;
  this._frameTasksExecutor = frameTasksExecutor;
  this._backgroundTileImage = backgroundTileImage;
  this._backgroundTileImageName = backgroundTileImageName;
  this._ownedTexCoords = true;
  this._transparent = false;
  this._generateMipmap = true;
  ++this._tileImageProvider._referenceCounter;
  this._texturedMesh = createMesh(tile, tessellatorMesh, layerTilesRenderParameters._tileMeshResolution, this._texturesHandler, backgroundTileImage, backgroundTileImageName, this._ownedTexCoords, this._transparent, this._generateMipmap);
}

function createMesh(tile, tessellatorMesh, tileMeshResolution, texturesHandler, backgroundTileImage, backgroundTileImageName, ownedTexCoords, transparent, generateMipmap){
  var ancestor, fallbackSolved, glTextureId, glTextureIdRetainedCopy, mapping, mappings, mesh;
  mappings = new ArrayList_0;
  ancestor = tile;
  fallbackSolved = false;
  while (!!ancestor && !fallbackSolved) {
    mapping = new LazyTextureMapping_0(new DTT_LTMInitializer_0(tileMeshResolution, tile, ancestor), ownedTexCoords, transparent);
    if (ancestor != tile) {
      glTextureId = (mesh = ancestor._texturizedMesh , !mesh?null:$getTopLevelTextureId(mesh));
      if (glTextureId) {
        glTextureIdRetainedCopy = ($retainGLTextureId(glTextureId._texHandler, glTextureId._id) , new TextureIDReference_0(glTextureId._id, glTextureId._isPremultiplied, glTextureId._texHandler));
        $releaseGLTextureId(mapping);
        mapping._glTextureId = glTextureIdRetainedCopy;
        fallbackSolved = true;
      }
    }
    setCheck(mappings.array, mappings.size_0++, mapping);
    ancestor = ancestor._parent;
  }
  if (!fallbackSolved && !!backgroundTileImage) {
    mapping = new LazyTextureMapping_0(new DTT_LTMInitializer_0(tileMeshResolution, tile, tile), true, false);
    glTextureId = $getTextureIDReference(texturesHandler, backgroundTileImage, _rgba, backgroundTileImageName, generateMipmap);
    $releaseGLTextureId(mapping);
    mapping._glTextureId = glTextureId;
    setCheck(mappings.array, mappings.size_0++, mapping);
  }
  return new LeveledTexturedMesh_0(tessellatorMesh, mappings);
}

defineSeed(441, 413, makeCastMap([Q$RCObject]), DTT_TileTextureBuilder_0);
_.dispose = function dispose_30(){
  $_release(this._tileImageProvider);
  $dispose_1(this);
}
;
_._canceled = false;
_._generateMipmap = false;
_._logTilesPetitions = false;
_._ownedTexCoords = false;
_._tileDownloadPriority = P0_longLit;
_._transparent = false;
function $dispose_3(this$static){
  !!this$static._builder && $_release(this$static._builder);
}

function DTT_TileTextureBuilderHolder_0(builder){
  this._builder = builder;
}

defineSeed(442, 1, {}, DTT_TileTextureBuilderHolder_0);
function DTT_TileTextureBuilderStartTask_0(builder){
  this._builder = builder;
  ++this._builder._referenceCounter;
}

defineSeed(443, 433, makeCastMap([Q$FrameTask]), DTT_TileTextureBuilderStartTask_0);
_.dispose = function dispose_31(){
  $_release(this._builder);
}
;
_.execute_3 = function execute_14(rc){
  $start(this._builder);
}
;
_.isCanceled_0 = function isCanceled_1(rc){
  return this._builder._canceled;
}
;
defineSeed(445, 1, {});
function $onLayerTilesRenderParametersChanged(this$static, ltrp){
  this$static._tileLODTester.onLayerTilesRenderParametersChanged(ltrp);
}

function $onTileHasChangedMesh(this$static, tile){
  this$static._tileLODTester.onTileHasChangedMesh(tile);
}

function DecoratorTileLODTester_0(tileLODTester){
  this._tileLODTester = tileLODTester;
  if (!this._tileLODTester) {
    throw new RuntimeException_1('NULL NOT ALLOWED');
  }
}

defineSeed(444, 445, {});
_.onLayerTilesRenderParametersChanged = function onLayerTilesRenderParametersChanged(ltrp){
  $onLayerTilesRenderParametersChanged(this, ltrp);
}
;
_.onTileHasChangedMesh = function onTileHasChangedMesh(tile){
  $onTileHasChangedMesh(this, tile);
}
;
_.renderStarted = function renderStarted(){
  this._tileLODTester.renderStarted();
}
;
defineSeed(447, 1, {});
function DecoratorTileVisibilityTester_0(tileVisibilityTester){
  this._tileVisibilityTester = tileVisibilityTester;
  if (!this._tileVisibilityTester) {
    throw new RuntimeException_1('NULL NOT ALLOWED');
  }
}

defineSeed(446, 447, {});
function $buildOnCanvas(this$static, canvas){
  var col, height, row, width_0, x_0, x2, xInterval, y_0, y2, yInterval;
  width_0 = canvas._canvasWidth;
  height = canvas._canvasHeight;
  $setFillColor(canvas, this$static._backgroundColor);
  $checkInitialized(canvas);
  $_fillRectangle(canvas, 0, 0, width_0, height);
  $setFillColor(canvas, this$static._boxColor);
  xInterval = width_0 / this$static._splits;
  yInterval = height / this$static._splits;
  for (col = 0; col < this$static._splits; col += 2) {
    x_0 = col * xInterval;
    x2 = (col + 1) * xInterval;
    for (row = 0; row < this$static._splits; row += 2) {
      y_0 = row * yInterval;
      y2 = (row + 1) * yInterval;
      $checkInitialized(canvas);
      $roundRect(canvas, x_0 + 2, y_0 + 2, xInterval - 4, yInterval - 4, 4, true, false);
      $checkInitialized(canvas);
      $roundRect(canvas, x2 + 2, y2 + 2, xInterval - 4, yInterval - 4, 4, true, false);
    }
  }
}

function DefaultChessCanvasImageBuilder_0(backgroundColor, boxColor){
  this._width = 256;
  this._height = 256;
  this._canvas = null;
  this._canvasWidth = 0;
  this._canvasHeight = 0;
  this._backgroundColor = new Color_1(backgroundColor);
  this._boxColor = new Color_1(boxColor);
  this._splits = 4;
}

defineSeed(448, 408, {}, DefaultChessCanvasImageBuilder_0);
_._splits = 0;
function $notifyChangedInfo(this$static, info){
  !!this$static._changedInfoListener && this$static._enable && this$static._changedInfoListener.changedRendererInfo(this$static._rendererIdentifier, info);
}

function DefaultRenderer_0(){
  this._info = new ArrayList_0;
  this._enable = true;
}

defineSeed(449, 1, makeCastMap([Q$Renderer]));
_.getPlanetRenderer = function getPlanetRenderer_0(){
  return null;
}
;
_.getRenderState_0 = function getRenderState_1(rc){
  return $clinit_RenderState() , $clinit_RenderState() , READY;
}
;
_.getSurfaceElevationProvider = function getSurfaceElevationProvider_0(){
  return null;
}
;
_.initialize_0 = function initialize_6(context){
  this._context = context;
  this.onChangedContext();
}
;
_.isEnable = function isEnable_0(){
  return this._enable;
}
;
_.isPlanetRenderer = function isPlanetRenderer_0(){
  return false;
}
;
_.onChangedContext = function onChangedContext(){
}
;
_.onTouchEvent_0 = function onTouchEvent_4(ec, touchEvent){
  return false;
}
;
_.setChangedRendererInfoListener = function setChangedRendererInfoListener_0(changedInfoListener, rendererIdentifier){
  if (this._changedInfoListener) {
    $logError(_instance_3, 'Changed Renderer Info Listener of DefaultRenderer already set', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  }
   else {
    this._changedInfoListener = changedInfoListener;
    this._rendererIdentifier = rendererIdentifier;
    $notifyChangedInfo(this, this._info);
  }
}
;
_.start_2 = function start_7(rc){
}
;
_.stop_1 = function stop_5(rc){
}
;
_._changedInfoListener = null;
_._enable = false;
_._rendererIdentifier = 0;
defineSeed(451, 1, {});
function $ancestorTexturedSolvedChanged(tile, ancestorTile, textureSolved){
  var ancestorMesh, glTextureId, glTextureIdRetainedCopy, level, tileMesh;
  if (!textureSolved) {
    return;
  }
  if (tile._textureSolved) {
    return;
  }
  ancestorMesh = $getMesh(ancestorTile);
  if (!ancestorMesh) {
    return;
  }
  glTextureId = $getTopLevelTextureId(ancestorMesh);
  if (!glTextureId) {
    return;
  }
  tileMesh = $getMesh(tile);
  if (!tileMesh) {
    return;
  }
  glTextureIdRetainedCopy = ($retainGLTextureId(glTextureId._texHandler, glTextureId._id) , new TextureIDReference_0(glTextureId._id, glTextureId._isPremultiplied, glTextureId._texHandler));
  level = tile._level - ancestorTile._level;
  $setGLTextureIdForLevel(tileMesh, level, glTextureIdRetainedCopy) || !!glTextureIdRetainedCopy && $releaseGLTextureId_1(glTextureIdRetainedCopy._texHandler, glTextureIdRetainedCopy._id);
}

function $getMesh(tile){
  var tileBuilderHolder;
  tileBuilderHolder = tile._texturizerData;
  return !tileBuilderHolder?null:tileBuilderHolder._builder._texturedMesh;
}

function $getRenderState(this$static, layerSet){
  if (this$static._errors.size_0 > 0) {
    return $clinit_RenderState() , new RenderState_0(this$static._errors);
  }
  if (!this$static._defaultBackgroundImageLoaded) {
    return $clinit_RenderState() , $clinit_RenderState() , BUSY;
  }
  if (layerSet) {
    return $getRenderState_0(layerSet);
  }
  return $clinit_RenderState() , $clinit_RenderState() , READY;
}

function $initialize_1(this$static, context){
  $logInfo(_instance_3, 'Initializing texturizer...', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  $build(this$static._defaultBackgroundImageBuilder, context, new DTT_IImageBuilderListener_0(this$static));
}

function $onTerrainTouchEvent(position, tile, layerSet){
  return !!layerSet && $onTerrainTouchEvent_0(layerSet, position, tile);
}

function $setDefaultBackgroundImage(this$static, defaultBackgroundImage){
  this$static._defaultBackgroundImage = defaultBackgroundImage;
}

function $setDefaultBackgroundImageName(this$static, defaultBackgroundImageName){
  this$static._defaultBackgroundImageName = defaultBackgroundImageName;
}

function $texturize(this$static, rc, prc, tile, tessellatorMesh){
  var builder, builderHolder, texturizedMesh, tileImageProvider, tileTexturePriority;
  builderHolder = tile._texturizerData;
  tileImageProvider = $getTileImageProvider(prc._layerSet, rc, prc._layerTilesRenderParameters);
  if (!tileImageProvider) {
    $setTextureSolved(tile, true);
    tile._texturizerDirty = false;
    return null;
  }
  if (!builderHolder) {
    tileTexturePriority = prc._tilesRenderParameters._incrementalTileQuality?sub_0(add_1(prc._tileDownloadPriority, fromInt(prc._layerTilesRenderParameters._maxLevel)), fromInt(tile._level)):add_1(prc._tileDownloadPriority, fromInt(tile._level));
    builder = new DTT_TileTextureBuilder_0(rc, prc._layerTilesRenderParameters, tileImageProvider, tile, tessellatorMesh, tileTexturePriority, prc._logTilesPetitions, rc._frameTasksExecutor, this$static._defaultBackgroundImage, this$static._defaultBackgroundImageName);
    builderHolder = new DTT_TileTextureBuilderHolder_0(builder);
    $setTexturizerData(tile, builderHolder);
  }
   else {
    builder = builderHolder._builder;
  }
  texturizedMesh = builder._texturedMesh;
  $addPreRenderTask(rc._frameTasksExecutor, new DTT_TileTextureBuilderStartTask_0(builder));
  tile._texturizerDirty = false;
  return texturizedMesh;
}

function $tileMeshToBeDeleted(tile){
  var builder, builderHolder;
  builderHolder = tile._texturizerData;
  if (builderHolder) {
    builder = builderHolder._builder;
    $cancel_1(builder, false);
  }
}

function $tileToBeDeleted(tile){
  var builder, builderHolder;
  builderHolder = tile._texturizerData;
  if (builderHolder) {
    builder = builderHolder._builder;
    $cancel_1(builder, true);
  }
}

function DefaultTileTexturizer_0(defaultBackgroundImageBuilder){
  this._errors = new ArrayList_0;
  this._defaultBackgroundImageBuilder = defaultBackgroundImageBuilder;
  this._defaultBackgroundImageLoaded = false;
  $logInfo(_instance_3, 'Create texturizer...', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
}

defineSeed(450, 451, {}, DefaultTileTexturizer_0);
_._defaultBackgroundImageLoaded = false;
function DirectMesh_0(primitive, center, vertices){
  DirectMesh_2.call(this, primitive, center, vertices, 1, 1, null, null, true);
}

function DirectMesh_1(primitive, center, vertices, lineWidth, pointSize, flatColor, colors, depthTest){
  DirectMesh_2.call(this, primitive, center, vertices, lineWidth, pointSize, flatColor, colors, depthTest);
}

function DirectMesh_2(primitive, center, vertices, lineWidth, pointSize, flatColor, colors, depthTest){
  AbstractMesh_0.call(this, primitive, center, vertices, lineWidth, pointSize, flatColor, colors, depthTest, null, false, 0, 0);
  this._renderVerticesCount = ~~(vertices._buffer.length / 3);
}

defineSeed(452, 371, makeCastMap([Q$Mesh]), DirectMesh_0, DirectMesh_1);
_.dispose = function dispose_32(){
  $dispose_0(this);
}
;
_.rawRender_0 = function rawRender_2(rc){
  var gl;
  gl = rc._gl;
  $drawArrays(gl, this._primitive, this._renderVerticesCount, this._glState, rc._gpuProgramManager);
}
;
_._renderVerticesCount = 0;
function $setLightDirection(this$static, lightDir){
  var dirN;
  dirN = $normalized_0(lightDir);
  $changeValue_1(this$static._lightDirectionUniformValue, dirN._x, dirN._y, dirN._z);
}

function DirectionLightGLFeature_0(diffuseLightDirection, diffuseLightColor, ambientLightColor){
  var dirN;
  GLFeature_0.call(this, ($clinit_GLFeatureGroupName() , LIGHTING_GROUP), 11);
  $addUniformValue(this._values, ($clinit_GPUUniformKey() , AMBIENT_LIGHT_COLOR), new GPUUniformValueVec3Float_0(ambientLightColor));
  dirN = $normalized_0(diffuseLightDirection);
  this._lightDirectionUniformValue = new GPUUniformValueVec3FloatMutable_0(dirN._x, dirN._y, dirN._z);
  $addUniformValue(this._values, DIFFUSE_LIGHT_DIRECTION, this._lightDirectionUniformValue);
  $addUniformValue(this._values, DIFFUSE_LIGHT_COLOR, new GPUUniformValueVec3Float_0(diffuseLightColor));
}

defineSeed(453, 419, makeCastMap([Q$DirectionLightGLFeature, Q$GLFeature, Q$RCObject]), DirectionLightGLFeature_0);
_.applyOnGlobalGLState = function applyOnGlobalGLState_0(state){
}
;
_.dispose = function dispose_33(){
  !!this._values && $dispose_6(this._values);
  $dispose_1(this);
}
;
function DoubleTapRotationEffect_0(duration, axis_0, angle, distance){
  EffectWithDuration_0.call(this, duration);
  this._axis = new Vector3D_1(axis_0);
  this._angle = new Angle_1(angle);
  this._distance = distance;
}

defineSeed(454, 403, {}, DoubleTapRotationEffect_0);
_.cancel_0 = function cancel_5(when){
}
;
_.doStep = function doStep_2(rc, when){
  var alpha_0, camera, step;
  alpha_0 = $getAlpha(this, when);
  camera = rc._nextCamera;
  step = alpha_0 - this._lastAlpha;
  $rotateWithAxis(camera, this._axis, $times(this._angle, step));
  $moveForward(camera, this._distance * step);
  this._lastAlpha = alpha_0;
}
;
_.start_1 = function start_8(rc, when){
  this._started = when._milliseconds;
  this._lastAlpha = 0;
}
;
_.stop_0 = function stop_6(rc, when){
  var camera, step;
  camera = rc._nextCamera;
  step = 1 - this._lastAlpha;
  $rotateWithAxis(camera, this._axis, $times(this._angle, step));
  $moveForward(camera, this._distance * step);
}
;
_._distance = 0;
_._lastAlpha = 0;
defineSeed(455, 389, {});
_.doStep = function doStep_3(rc, when){
  this._force *= this._friction;
}
;
_.isDone = function isDone_1(rc, when){
  return $abs(this._force) < 0.005;
}
;
_._force = 0;
_._friction = 0;
function $cancelAllEffectsFor(this$static, target){
  var effectRun, effectsToCancelSize, i_0, iterator, now_0;
  now_0 = new TimeInterval_0(fromDouble(currentTimeMillis0()));
  $clear(this$static._effectsToCancel);
  iterator = new AbstractList$IteratorImpl_0(this$static._effectsRuns);
  while (iterator.i < iterator.this$0_0.size_1()) {
    effectRun = dynamicCast($next_2(iterator), Q$EffectsScheduler$EffectRun);
    if (effectRun._target == target) {
      effectRun._started?$add_5(this$static._effectsToCancel, effectRun):!!effectRun._effect && effectRun._effect.dispose();
      $remove_6(iterator);
    }
  }
  effectsToCancelSize = this$static._effectsToCancel.size_0;
  for (i_0 = 0; i_0 < effectsToCancelSize; i_0++) {
    effectRun = dynamicCast($get_2(this$static._effectsToCancel, i_0), Q$EffectsScheduler$EffectRun);
    effectRun._effect.cancel_0(now_0);
    !!effectRun._effect && effectRun._effect.dispose();
  }
}

function $doOneCyle(this$static, rc){
  var effect, effectRun, effectsRunsSize, i_0, now_0;
  if (this$static._effectsRuns.size_0 != 0) {
    now_0 = new TimeInterval_0(fromDouble(currentTimeMillis0()));
    $processFinishedEffects(this$static, rc, now_0);
    effectsRunsSize = this$static._effectsRuns.size_0;
    for (i_0 = 0; i_0 < effectsRunsSize; i_0++) {
      effectRun = dynamicCast($get_2(this$static._effectsRuns, i_0), Q$EffectsScheduler$EffectRun);
      effect = effectRun._effect;
      if (!effectRun._started) {
        effect.start_1(rc, now_0);
        effectRun._started = true;
      }
      effect.doStep(rc, now_0);
    }
  }
}

function $processFinishedEffects(this$static, rc, when){
  var effectRun, effectsToStopSize, i_0, iterator;
  $clear(this$static._effectsToStop);
  iterator = new AbstractList$IteratorImpl_0(this$static._effectsRuns);
  while (iterator.i < iterator.this$0_0.size_1()) {
    effectRun = dynamicCast($next_2(iterator), Q$EffectsScheduler$EffectRun);
    if (effectRun._started) {
      if (effectRun._effect.isDone(rc, when)) {
        $remove_6(iterator);
        $add_5(this$static._effectsToStop, effectRun);
      }
    }
  }
  effectsToStopSize = this$static._effectsToStop.size_0;
  for (i_0 = 0; i_0 < effectsToStopSize; i_0++) {
    effectRun = dynamicCast($get_2(this$static._effectsToStop, i_0), Q$EffectsScheduler$EffectRun);
    effectRun._effect.stop_0(rc, when);
    !!effectRun._effect && effectRun._effect.dispose();
  }
}

function $startEffect(this$static, effect, target){
  $add_5(this$static._effectsRuns, new EffectsScheduler$EffectRun_0(effect, target));
}

function EffectsScheduler_0(){
  this._effectsRuns = new ArrayList_0;
  this._effectsToStop = new ArrayList_0;
  this._effectsToCancel = new ArrayList_0;
  this._effectsRuns = new ArrayList_0;
}

defineSeed(456, 1, {}, EffectsScheduler_0);
function EffectsScheduler$EffectRun_0(effect, target){
  this._effect = effect;
  this._target = target;
  this._started = false;
}

defineSeed(457, 1, makeCastMap([Q$EffectsScheduler$EffectRun]), EffectsScheduler$EffectRun_0);
_._started = false;
defineSeed(458, 1, {});
_._enabled = false;
function $getMeanRadius(this$static){
  return (this$static._radii._x + this$static._radii._y + this$static._radii._y) / 3;
}

function $intersectionsDistances(this$static, originX, originY, originZ, directionX, directionY, directionZ){
  var a, b, c, discriminant, intersections, root1, root2, t;
  intersections = new ArrayList_0;
  a = directionX * directionX * this$static._oneOverRadiiSquared._x + directionY * directionY * this$static._oneOverRadiiSquared._y + directionZ * directionZ * this$static._oneOverRadiiSquared._z;
  b = 2 * (originX * directionX * this$static._oneOverRadiiSquared._x + originY * directionY * this$static._oneOverRadiiSquared._y + originZ * directionZ * this$static._oneOverRadiiSquared._z);
  c = originX * originX * this$static._oneOverRadiiSquared._x + originY * originY * this$static._oneOverRadiiSquared._y + originZ * originZ * this$static._oneOverRadiiSquared._z - 1;
  discriminant = b * b - 4 * a * c;
  if (discriminant < 0) {
    return intersections;
  }
   else if (discriminant == 0) {
    $add_5(intersections, ($clinit_Double() , new Double_0(-0.5 * b / a)));
    return intersections;
  }
  t = -0.5 * (b + (b > 0?1:-1) * sqrt_0(discriminant));
  root1 = t / a;
  root2 = c / t;
  if (root1 < root2) {
    $add_5(intersections, ($clinit_Double() , new Double_0(root1)));
    $add_5(intersections, new Double_0(root2));
  }
   else {
    $add_5(intersections, ($clinit_Double() , new Double_0(root2)));
    $add_5(intersections, new Double_0(root1));
  }
  return intersections;
}

function Ellipsoid_0(center, radii){
  new Vector3D_1(center);
  this._radii = new Vector3D_1(radii);
  this._radiiSquared = new Vector3D_1(new Vector3D_0(radii._x * radii._x, radii._y * radii._y, radii._z * radii._z));
  this._radiiToTheFourth = new Vector3D_1(new Vector3D_0(this._radiiSquared._x * this._radiiSquared._x, this._radiiSquared._y * this._radiiSquared._y, this._radiiSquared._z * this._radiiSquared._z));
  this._oneOverRadiiSquared = new Vector3D_1(new Vector3D_0(1 / (radii._x * radii._x), 1 / (radii._y * radii._y), 1 / (radii._z * radii._z)));
}

defineSeed(459, 1, {}, Ellipsoid_0);
function $closestIntersection(this$static, pos, ray){
  var distances;
  if (pos._x != pos._x || pos._y != pos._y || pos._z != pos._z || ray._x != ray._x || ray._y != ray._y || ray._z != ray._z) {
    return $clinit_Vector3D() , new Vector3D_0(NaN, NaN, NaN);
  }
  distances = this$static.intersectionsDistances(pos._x, pos._y, pos._z, ray._x, ray._y, ray._z);
  if (distances.size_0 == 0) {
    return $clinit_Vector3D() , new Vector3D_0(NaN, NaN, NaN);
  }
  return $add_21(pos, $times_2(ray, (checkIndex(0, distances.size_0) , dynamicCast(distances.array[0], Q$Double)).value_0));
}

function $getCoordinateSystemAt(this$static, geo){
  var origin, x_0, y_0, z_0;
  origin = this$static.toCartesian_2(geo);
  z_0 = this$static.centricSurfaceNormal(origin);
  y_0 = $projectionInPlane(this$static.getNorth(), z_0);
  x_0 = new Vector3D_0(y_0._y * z_0._z - y_0._z * z_0._y, y_0._z * z_0._x - y_0._x * z_0._z, y_0._x * z_0._y - y_0._y * z_0._x);
  return new CoordinateSystem_1(x_0, y_0, z_0, origin);
}

defineSeed(461, 1, {});
function $closestPointToSphere(this$static, pos, ray){
  var D, O2, OU, R0, U2, a_, b, b_, c, c_, co2, rad, rad_, result, t;
  t = 0;
  R0 = $getMeanRadius(this$static._ellipsoid);
  U2 = ray._x * ray._x + ray._y * ray._y + ray._z * ray._z;
  O2 = pos._x * pos._x + pos._y * pos._y + pos._z * pos._z;
  OU = pos._x * ray._x + pos._y * ray._y + pos._z * ray._z;
  b = 2 * OU;
  c = O2 - R0 * R0;
  rad = b * b - 4 * U2 * c;
  if (rad > 0) {
    t = (-b - sqrt_0(rad)) / (2 * U2);
    t < 1 && (t = (-b + sqrt_0(rad)) / (2 * U2));
    t < 1 && (rad = -12345);
  }
  if (rad < 0) {
    D = sqrt_0(O2);
    co2 = R0 * R0 / (D * D);
    a_ = OU * OU - co2 * O2 * U2;
    b_ = 2 * OU * O2 - co2 * 2 * OU * O2;
    c_ = O2 * O2 - co2 * O2 * O2;
    rad_ = b_ * b_ - 4 * a_ * c_;
    t = (-b_ - sqrt_0(rad_)) / (2 * a_);
  }
  result = $add_21(pos, new Vector3D_0(ray._x * t, ray._y * t, ray._z * t));
  return result;
}

function $getMidPoint(this$static, P0, P1){
  var midPoint, normal, theta, v0, v1;
  v0 = $toCartesian(this$static, P0._latitude, P0._longitude, 0);
  v1 = $toCartesian(this$static, P1._latitude, P1._longitude, 0);
  normal = $normalized_0(new Vector3D_0(v0._y * v1._z - v0._z * v1._y, v0._z * v1._x - v0._x * v1._z, v0._x * v1._y - v0._y * v1._x));
  theta = fromRadians(angleInRadiansBetween_0(v0, v1));
  midPoint = $scaleToGeocentricSurface(this$static, $rotateAroundAxis_0(v0, normal, $times(theta, 0.5)));
  return $toGeodetic2D(this$static, midPoint);
}

function $scaleToGeocentricSurface(this$static, position){
  var beta_0, oneOverRadiiSquared;
  oneOverRadiiSquared = this$static._ellipsoid._oneOverRadiiSquared;
  beta_0 = 1 / sqrt_0(position._x * position._x * oneOverRadiiSquared._x + position._y * position._y * oneOverRadiiSquared._y + position._z * position._z * oneOverRadiiSquared._z);
  return new Vector3D_0(position._x * beta_0, position._y * beta_0, position._z * beta_0);
}

function $scaleToGeodeticSurface(this$static, position){
  var alpha_0, beta_0, dSdA, da, da2, da3, db, db2, db3, dc, dc2, dc3, n, oneOverRadiiSquared, radiiSquared, radiiToTheFourth, s, x2, y2, z2;
  oneOverRadiiSquared = this$static._ellipsoid._oneOverRadiiSquared;
  radiiSquared = this$static._ellipsoid._radiiSquared;
  radiiToTheFourth = this$static._ellipsoid._radiiToTheFourth;
  beta_0 = 1 / sqrt_0(position._x * position._x * oneOverRadiiSquared._x + position._y * position._y * oneOverRadiiSquared._y + position._z * position._z * oneOverRadiiSquared._z);
  n = $length_1(new Vector3D_0(beta_0 * position._x * oneOverRadiiSquared._x, beta_0 * position._y * oneOverRadiiSquared._y, beta_0 * position._z * oneOverRadiiSquared._z));
  alpha_0 = (1 - beta_0) * (sqrt_0(position._x * position._x + position._y * position._y + position._z * position._z) / n);
  x2 = position._x * position._x;
  y2 = position._y * position._y;
  z2 = position._z * position._z;
  s = 0;
  dSdA = 1;
  do {
    alpha_0 -= s / dSdA;
    da = 1 + alpha_0 * oneOverRadiiSquared._x;
    db = 1 + alpha_0 * oneOverRadiiSquared._y;
    dc = 1 + alpha_0 * oneOverRadiiSquared._z;
    da2 = da * da;
    db2 = db * db;
    dc2 = dc * dc;
    da3 = da * da2;
    db3 = db * db2;
    dc3 = dc * dc2;
    s = x2 / (radiiSquared._x * da2) + y2 / (radiiSquared._y * db2) + z2 / (radiiSquared._z * dc2) - 1;
    dSdA = -2 * (x2 / (radiiToTheFourth._x * da3) + y2 / (radiiToTheFourth._y * db3) + z2 / (radiiToTheFourth._z * dc3));
  }
   while ((s <= 0?0 - s:s) > 1.0E-10);
  return new Vector3D_0(position._x / da, position._y / db, position._z / dc);
}

function $toCartesian(this$static, latitude, longitude, height){
  var gamma_0, k, n, rSurface, cosLatitude;
  n = (cosLatitude = cos_0(latitude._radians) , new Vector3D_0(cosLatitude * cos_0(longitude._radians), cosLatitude * sin_0(longitude._radians), sin_0(latitude._radians)));
  k = $times_3(this$static._ellipsoid._radiiSquared, n);
  gamma_0 = sqrt_0(k._x * n._x + k._y * n._y + k._z * n._z);
  rSurface = new Vector3D_0(k._x / gamma_0, k._y / gamma_0, k._z / gamma_0);
  return $add_21(rSurface, new Vector3D_0(n._x * height, n._y * height, n._z * height));
}

function $toCartesian_0(this$static, geodetic){
  return $toCartesian(this$static, geodetic._latitude, geodetic._longitude, 0);
}

function $toGeodetic2D(this$static, positionOnEllipsoidalPlanet){
  var n;
  n = $normalized_0($times_3(positionOnEllipsoidalPlanet, this$static._ellipsoid._oneOverRadiiSquared));
  return new Geodetic2D_0(fromRadians(asin_0(n._z)), fromRadians(atan2_0(n._y, n._x)));
}

function $toGeodetic3D(this$static, position){
  var h_0, height, p;
  p = $scaleToGeodeticSurface(this$static, position);
  h_0 = new Vector3D_0(position._x - p._x, position._y - p._y, position._z - p._z);
  height = h_0._x * position._x + h_0._y * position._y + h_0._z * position._z < 0?-sqrt_0(h_0._x * h_0._x + h_0._y * h_0._y + h_0._z * h_0._z):sqrt_0(h_0._x * h_0._x + h_0._y * h_0._y + h_0._z * h_0._z);
  return new Geodetic3D_1($toGeodetic2D(this$static, p), height);
}

function EllipsoidalPlanet_0(ellipsoid){
  this._origin = new MutableVector3D_0;
  this._initialPoint = new MutableVector3D_0;
  this._centerPoint = new MutableVector3D_0;
  this._centerRay = new MutableVector3D_0;
  this._initialPoint0 = new MutableVector3D_0;
  this._initialPoint1 = new MutableVector3D_0;
  this._lastDragAxis = new MutableVector3D_0;
  this._ellipsoid = ellipsoid;
}

defineSeed(460, 461, {}, EllipsoidalPlanet_0);
_.applyCameraConstrainers = function applyCameraConstrainers(previousCamera, nextCamera){
}
;
_.beginDoubleDrag = function beginDoubleDrag(origin, centerRay, initialRay0, initialRay1){
  var g, g0, g1;
  this._origin = new MutableVector3D_1(origin._x, origin._y, origin._z);
  this._centerRay = new MutableVector3D_1(centerRay._x, centerRay._y, centerRay._z);
  this._initialPoint0 = $asMutableVector3D($closestIntersection(this, origin, initialRay0));
  this._initialPoint1 = $asMutableVector3D($closestIntersection(this, origin, initialRay1));
  this._angleBetweenInitialPoints = $angleBetween(this._initialPoint0, this._initialPoint1)._degrees;
  this._centerPoint = $asMutableVector3D($closestIntersection(this, origin, centerRay));
  this._angleBetweenInitialRays = fromRadians(angleInRadiansBetween_0(initialRay0, initialRay1))._degrees;
  g0 = $toGeodetic2D(this, $asVector3D(this._initialPoint0));
  g1 = $toGeodetic2D(this, $asVector3D(this._initialPoint1));
  g = $getMidPoint(this, g0, g1);
  this._initialPoint = $asMutableVector3D($toCartesian(this, g._latitude, g._longitude, 0));
}
;
_.beginSingleDrag = function beginSingleDrag(origin, initialRay){
  $copyFrom_2(this._origin, origin);
  $copyFrom_2(this._initialPoint, $closestIntersection(this, origin, initialRay));
  this._validSingleDrag = false;
}
;
_.centricSurfaceNormal = function centricSurfaceNormal(positionOnEllipsoidalPlanet){
  return $normalized_0(positionOnEllipsoidalPlanet);
}
;
_.createDoubleTapEffect = function createDoubleTapEffect(origin, centerRay, tapRay){
  var angle, axis_0, centerPoint, distance, height, initialPoint;
  initialPoint = $closestIntersection(this, origin, tapRay);
  if (initialPoint._x != initialPoint._x || initialPoint._y != initialPoint._y || initialPoint._z != initialPoint._z)
    return null;
  centerPoint = $closestIntersection(this, origin, centerRay);
  axis_0 = new Vector3D_0(initialPoint._y * centerPoint._z - initialPoint._z * centerPoint._y, initialPoint._z * centerPoint._x - initialPoint._x * centerPoint._z, initialPoint._x * centerPoint._y - initialPoint._y * centerPoint._x);
  angle = fromRadians(-asin_0(sqrt_0(axis_0._x * axis_0._x + axis_0._y * axis_0._y + axis_0._z * axis_0._z) / sqrt_0(initialPoint._x * initialPoint._x + initialPoint._y * initialPoint._y + initialPoint._z * initialPoint._z) / sqrt_0(centerPoint._x * centerPoint._x + centerPoint._y * centerPoint._y + centerPoint._z * centerPoint._z)));
  height = $toGeodetic3D(this, origin)._height;
  distance = height * 0.6;
  return new DoubleTapRotationEffect_0(new TimeInterval_0(P2ee_longLit), axis_0, angle, distance);
}
;
_.createEffectFromLastSingleDrag = function createEffectFromLastSingleDrag(){
  if (!this._validSingleDrag || $isNan(this._lastDragAxis))
    return null;
  return new RotateWithAxisEffect_0($asVector3D(this._lastDragAxis), fromRadians(this._lastDragRadiansStep));
}
;
_.distanceToHorizon = function distanceToHorizon(position){
  var D, R;
  R = $minAxis(this._ellipsoid._radii);
  D = sqrt_0(position._x * position._x + position._y * position._y + position._z * position._z);
  return Math.sqrt(D * D - R * R);
}
;
_.doubleDrag = function doubleDrag(finalRay0, finalRay1){
  var P0, P1, angle, angle0, angle1, angle_n, angle_n1, centerPoint2, d, dAccum, distance, factor, finalPoint, finalRaysAngle, g, initialPoint, matrix, normal, p0, point0, point1, positionCamera, precision, ray0, ray1, rotation, rotationAxis, rotationDelta, sign, translation, translation2, v0, v1, viewDirection;
  if ($isNan(this._initialPoint0) || $isNan(this._initialPoint1))
    return new MutableMatrix44D_3;
  positionCamera = this._origin;
  finalRaysAngle = fromRadians(angleInRadiansBetween_0(finalRay0, finalRay1))._degrees;
  factor = finalRaysAngle / this._angleBetweenInitialRays;
  dAccum = 0;
  distance = $length($sub_0(this._origin, this._centerPoint));
  d = distance * (factor - 1) / factor;
  translation = createTranslationMatrix($times_2($normalized_0($asVector3D(this._centerRay)), d));
  positionCamera = new MutableVector3D_1(positionCamera._x * translation._m00 + positionCamera._y * translation._m01 + positionCamera._z * translation._m02 + translation._m03, positionCamera._x * translation._m10 + positionCamera._y * translation._m11 + positionCamera._z * translation._m12 + translation._m13, positionCamera._x * translation._m20 + positionCamera._y * translation._m21 + positionCamera._z * translation._m22 + translation._m23);
  dAccum += d;
  point0 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), finalRay0);
  point1 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), finalRay1);
  angle0 = fromRadians(angleInRadiansBetween_0(point0, point1))._degrees;
  if (angle0 != angle0)
    return new MutableMatrix44D_3;
  d = (distance - d) * 0.3 <= 0?0 - (distance - d) * 0.3:(distance - d) * 0.3;
  angle0 < this._angleBetweenInitialPoints && (d *= -1);
  $copyValue(translation, createTranslationMatrix($times_2($normalized_0($asVector3D(this._centerRay)), d)));
  positionCamera = new MutableVector3D_1(positionCamera._x * translation._m00 + positionCamera._y * translation._m01 + positionCamera._z * translation._m02 + translation._m03, positionCamera._x * translation._m10 + positionCamera._y * translation._m11 + positionCamera._z * translation._m12 + translation._m13, positionCamera._x * translation._m20 + positionCamera._y * translation._m21 + positionCamera._z * translation._m22 + translation._m23);
  dAccum += d;
  point0 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), finalRay0);
  point1 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), finalRay1);
  angle1 = fromRadians(angleInRadiansBetween_0(point0, point1))._degrees;
  if (angle1 != angle1)
    return new MutableMatrix44D_3;
  precision = pow_0(10, log10(distance) - 8);
  angle_n1 = angle0;
  angle_n = angle1;
  while ($abs(angle_n - this._angleBetweenInitialPoints) > precision) {
    (angle_n1 - angle_n) / (angle_n - this._angleBetweenInitialPoints) < 0 && (d *= -0.5);
    $copyValue(translation, createTranslationMatrix($times_2($normalized_0($asVector3D(this._centerRay)), d)));
    positionCamera = new MutableVector3D_1(positionCamera._x * translation._m00 + positionCamera._y * translation._m01 + positionCamera._z * translation._m02 + translation._m03, positionCamera._x * translation._m10 + positionCamera._y * translation._m11 + positionCamera._z * translation._m12 + translation._m13, positionCamera._x * translation._m20 + positionCamera._y * translation._m21 + positionCamera._z * translation._m22 + translation._m23);
    dAccum += d;
    angle_n1 = angle_n;
    point0 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), finalRay0);
    point1 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), finalRay1);
    angle_n = fromRadians(angleInRadiansBetween_0(point0, point1))._degrees;
    if (angle_n != angle_n)
      return new MutableMatrix44D_3;
  }
  matrix = new MutableMatrix44D_1(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  positionCamera = this._origin;
  viewDirection = this._centerRay;
  ray0 = new MutableVector3D_1(finalRay0._x, finalRay0._y, finalRay0._z);
  ray1 = new MutableVector3D_1(finalRay1._x, finalRay1._y, finalRay1._z);
  initialPoint = $asVector3D(this._initialPoint);
  rotationAxis = $cross_0(initialPoint, $asVector3D(this._centerPoint));
  rotationDelta = fromRadians(-acos_0($dot($normalized(this._initialPoint), $normalized(this._centerPoint))));
  if (rotationDelta._degrees != rotationDelta._degrees)
    return new MutableMatrix44D_3;
  rotation = createRotationMatrix(rotationDelta, rotationAxis);
  positionCamera = new MutableVector3D_1(positionCamera._x * rotation._m00 + positionCamera._y * rotation._m01 + positionCamera._z * rotation._m02 + rotation._m03, positionCamera._x * rotation._m10 + positionCamera._y * rotation._m11 + positionCamera._z * rotation._m12 + rotation._m13, positionCamera._x * rotation._m20 + positionCamera._y * rotation._m21 + positionCamera._z * rotation._m22 + rotation._m23);
  viewDirection = new MutableVector3D_1(viewDirection._x * rotation._m00 + viewDirection._y * rotation._m01 + viewDirection._z * rotation._m02, viewDirection._x * rotation._m10 + viewDirection._y * rotation._m11 + viewDirection._z * rotation._m12, viewDirection._x * rotation._m20 + viewDirection._y * rotation._m21 + viewDirection._z * rotation._m22);
  ray0 = new MutableVector3D_1(ray0._x * rotation._m00 + ray0._y * rotation._m01 + ray0._z * rotation._m02, ray0._x * rotation._m10 + ray0._y * rotation._m11 + ray0._z * rotation._m12, ray0._x * rotation._m20 + ray0._y * rotation._m21 + ray0._z * rotation._m22);
  ray1 = new MutableVector3D_1(ray1._x * rotation._m00 + ray1._y * rotation._m01 + ray1._z * rotation._m02, ray1._x * rotation._m10 + ray1._y * rotation._m11 + ray1._z * rotation._m12, ray1._x * rotation._m20 + ray1._y * rotation._m21 + ray1._z * rotation._m22);
  $copyValueOfMultiplication(matrix, rotation, matrix);
  translation2 = createTranslationMatrix($times_2($normalized_0(new Vector3D_0(viewDirection._x, viewDirection._y, viewDirection._z)), dAccum));
  positionCamera = new MutableVector3D_1(positionCamera._x * translation2._m00 + positionCamera._y * translation2._m01 + positionCamera._z * translation2._m02 + translation2._m03, positionCamera._x * translation2._m10 + positionCamera._y * translation2._m11 + positionCamera._z * translation2._m12 + translation2._m13, positionCamera._x * translation2._m20 + positionCamera._y * translation2._m21 + positionCamera._z * translation2._m22 + translation2._m23);
  $copyValueOfMultiplication(matrix, translation2, matrix);
  centerPoint2 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), new Vector3D_0(viewDirection._x, viewDirection._y, viewDirection._z));
  P0 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), new Vector3D_0(ray0._x, ray0._y, ray0._z));
  P1 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), new Vector3D_0(ray1._x, ray1._y, ray1._z));
  g = $getMidPoint(this, $toGeodetic2D(this, P0), $toGeodetic2D(this, P1));
  finalPoint = $toCartesian(this, g._latitude, g._longitude, 0);
  rotationAxis = new Vector3D_0(centerPoint2._y * finalPoint._z - centerPoint2._z * finalPoint._y, centerPoint2._z * finalPoint._x - centerPoint2._x * finalPoint._z, centerPoint2._x * finalPoint._y - centerPoint2._y * finalPoint._x);
  rotationDelta = fromRadians(-acos_0($dot_0($normalized_0(centerPoint2), $normalized_0(finalPoint))));
  if (rotationDelta._degrees != rotationDelta._degrees)
    return new MutableMatrix44D_3;
  rotation = createRotationMatrix(rotationDelta, rotationAxis);
  positionCamera = new MutableVector3D_1(positionCamera._x * rotation._m00 + positionCamera._y * rotation._m01 + positionCamera._z * rotation._m02 + rotation._m03, positionCamera._x * rotation._m10 + positionCamera._y * rotation._m11 + positionCamera._z * rotation._m12 + rotation._m13, positionCamera._x * rotation._m20 + positionCamera._y * rotation._m21 + positionCamera._z * rotation._m22 + rotation._m23);
  new MutableVector3D_1(viewDirection._x * rotation._m00 + viewDirection._y * rotation._m01 + viewDirection._z * rotation._m02, viewDirection._x * rotation._m10 + viewDirection._y * rotation._m11 + viewDirection._z * rotation._m12, viewDirection._x * rotation._m20 + viewDirection._y * rotation._m21 + viewDirection._z * rotation._m22);
  ray0 = new MutableVector3D_1(ray0._x * rotation._m00 + ray0._y * rotation._m01 + ray0._z * rotation._m02, ray0._x * rotation._m10 + ray0._y * rotation._m11 + ray0._z * rotation._m12, ray0._x * rotation._m20 + ray0._y * rotation._m21 + ray0._z * rotation._m22);
  new MutableVector3D_1(ray1._x * rotation._m00 + ray1._y * rotation._m01 + ray1._z * rotation._m02, ray1._x * rotation._m10 + ray1._y * rotation._m11 + ray1._z * rotation._m12, ray1._x * rotation._m20 + ray1._y * rotation._m21 + ray1._z * rotation._m22);
  $copyValueOfMultiplication(matrix, rotation, matrix);
  normal = $normalized_0($times_3(centerPoint2, this._ellipsoid._oneOverRadiiSquared));
  v0 = $projectionInPlane($sub_2($asVector3D(this._initialPoint0), centerPoint2), normal);
  p0 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), new Vector3D_0(ray0._x, ray0._y, ray0._z));
  v1 = $projectionInPlane(new Vector3D_0(p0._x - centerPoint2._x, p0._y - centerPoint2._y, p0._z - centerPoint2._z), normal);
  angle = fromRadians(angleInRadiansBetween_0(v0, v1))._degrees;
  sign = $dot_0(new Vector3D_0(v1._y * v0._z - v1._z * v0._y, v1._z * v0._x - v1._x * v0._z, v1._x * v0._y - v1._y * v0._x), normal);
  sign < 0 && (angle = -angle);
  rotation = createGeneralRotationMatrix(new Angle_0(angle, angle / 180 * 3.141592653589793), normal, centerPoint2);
  $copyValueOfMultiplication(matrix, rotation, matrix);
  return matrix;
}
;
_.drag = function drag(origin, destination){
  var P0, P1, angle, axis_0, rotatedP0, rotation, traslation;
  P0 = $toCartesian(this, origin._latitude, origin._longitude, origin._height);
  P1 = $toCartesian(this, destination._latitude, destination._longitude, destination._height);
  axis_0 = new Vector3D_0(P0._y * P1._z - P0._z * P1._y, P0._z * P1._x - P0._x * P1._z, P0._x * P1._y - P0._y * P1._x);
  if (sqrt_0(axis_0._x * axis_0._x + axis_0._y * axis_0._y + axis_0._z * axis_0._z) < 0.001)
    return new MutableMatrix44D_3;
  angle = fromRadians(angleInRadiansBetween_0(P0, P1));
  rotation = createRotationMatrix(angle, axis_0);
  rotatedP0 = new Vector3D_0(P0._x * rotation._m00 + P0._y * rotation._m01 + P0._z * rotation._m02 + rotation._m03, P0._x * rotation._m10 + P0._y * rotation._m11 + P0._z * rotation._m12 + rotation._m13, P0._x * rotation._m20 + P0._y * rotation._m21 + P0._z * rotation._m22 + rotation._m23);
  traslation = createTranslationMatrix(new Vector3D_0(P1._x - rotatedP0._x, P1._y - rotatedP0._y, P1._z - rotatedP0._z));
  return $multiply(traslation, rotation);
}
;
_.geodeticSurfaceNormal = function geodeticSurfaceNormal(positionOnEllipsoidalPlanet){
  return $asVector3D($normalized($times_1(positionOnEllipsoidalPlanet, this._ellipsoid._oneOverRadiiSquared)));
}
;
_.getDefaultCameraPosition = function getDefaultCameraPosition(rendereSector){
  var ane, asw, height;
  asw = $toCartesian_0(this, rendereSector._lower);
  ane = $toCartesian_0(this, rendereSector._upper);
  height = $length_1(new Vector3D_0(asw._x - ane._x, asw._y - ane._y, asw._z - ane._z)) * 1.9;
  return new Geodetic3D_1(rendereSector._center, height);
}
;
_.getNorth = function getNorth(){
  return $clinit_Vector3D() , new Vector3D_0(0, 0, 1);
}
;
_.getRadii = function getRadii(){
  return this._ellipsoid._radii;
}
;
_.intersectionsDistances = function intersectionsDistances(originX, originY, originZ, directionX, directionY, directionZ){
  return $intersectionsDistances(this._ellipsoid, originX, originY, originZ, directionX, directionY, directionZ);
}
;
_.isFlat = function isFlat(){
  return false;
}
;
_.singleDrag = function singleDrag(finalRay){
  var finalPoint, origin, radians, rotationAxis, rotationDelta, sinus;
  if ($isNan(this._initialPoint))
    return new MutableMatrix44D_3;
  origin = $asVector3D(this._origin);
  finalPoint = $asMutableVector3D($closestIntersection(this, origin, finalRay));
  if (finalPoint._x != finalPoint._x || finalPoint._y != finalPoint._y || finalPoint._z != finalPoint._z) {
    $copyFrom_2(finalPoint, $closestPointToSphere(this, origin, finalRay));
    if (finalPoint._x != finalPoint._x || finalPoint._y != finalPoint._y || finalPoint._z != finalPoint._z) {
      $logWarning(_instance_3, 'EllipsoidalPlanet::singleDrag-> finalPoint is NaN', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
      return new MutableMatrix44D_3;
    }
  }
  rotationAxis = $asVector3D($cross(this._initialPoint, finalPoint));
  sinus = sqrt_0(rotationAxis._x * rotationAxis._x + rotationAxis._y * rotationAxis._y + rotationAxis._z * rotationAxis._z) / $length(this._initialPoint) / sqrt_0(finalPoint._x * finalPoint._x + finalPoint._y * finalPoint._y + finalPoint._z * finalPoint._z);
  rotationDelta = fromRadians(-asin_0(sinus));
  if (rotationDelta._degrees != rotationDelta._degrees)
    return new MutableMatrix44D_3;
  $copyFrom_2(this._lastDragAxis, rotationAxis);
  radians = rotationDelta._radians;
  this._lastDragRadiansStep = radians - this._lastDragRadians;
  this._lastDragRadians = radians;
  this._validSingleDrag = true;
  return createRotationMatrix(rotationDelta, rotationAxis);
}
;
_.toCartesian = function toCartesian(latitude, longitude, height){
  return $toCartesian(this, latitude, longitude, height);
}
;
_.toCartesian_0 = function toCartesian_0(geodetic){
  return $toCartesian_0(this, geodetic);
}
;
_.toCartesian_1 = function toCartesian_1(geodetic, height){
  return $toCartesian(this, geodetic._latitude, geodetic._longitude, height);
}
;
_.toCartesian_2 = function toCartesian_2(geodetic){
  return $toCartesian(this, geodetic._latitude, geodetic._longitude, geodetic._height);
}
;
_.toGeodetic3D = function toGeodetic3D(position){
  return $toGeodetic3D(this, position);
}
;
_._angleBetweenInitialPoints = 0;
_._angleBetweenInitialRays = 0;
_._lastDragRadians = 0;
_._lastDragRadiansStep = 0;
_._validSingleDrag = false;
function FlatColorGLFeature_0(color_0, blend, sFactor, dFactor){
  GLColorGroupFeature_0.call(this, 8, 2, blend, sFactor, dFactor);
  $addUniformValue(this._values, ($clinit_GPUUniformKey() , FLAT_COLOR), new GPUUniformValueVec4Float_0(color_0._red, color_0._green, color_0._blue, color_0._alpha));
}

defineSeed(462, 417, makeCastMap([Q$GLFeature, Q$PriorityGLFeature, Q$RCObject]), FlatColorGLFeature_0);
_.applyOnGlobalGLState = function applyOnGlobalGLState_1(state){
  $blendingOnGlobalGLState(this, state);
}
;
_.dispose = function dispose_34(){
  !!this._values && $dispose_6(this._values);
  $dispose_1(this);
}
;
function $dispose_4(this$static){
  this$static._ownedMesh && !!this$static._mesh && this$static._mesh.dispose();
  $_release(this$static._glState);
}

function FlatColorMesh_0(mesh, color_0){
  Mesh_0.call(this);
  this._mesh = mesh;
  this._ownedMesh = false;
  this._flatColor = color_0;
  this._glState = new GLState_0;
  $addGLFeature(this._glState, new FlatColorGLFeature_0(this._flatColor, this._flatColor._alpha < 1, _srcAlpha, _oneMinusSrcAlpha), false);
}

defineSeed(463, 369, makeCastMap([Q$Mesh]), FlatColorMesh_0);
_.dispose = function dispose_35(){
  $dispose_4(this);
}
;
_.getBoundingVolume = function getBoundingVolume_2(){
  return !this._mesh?null:this._mesh.getBoundingVolume();
}
;
_.rawRender = function rawRender_3(rc, parentState){
  $setParent_1(this._glState, parentState);
  $render(this._mesh, rc, this._glState);
}
;
_._ownedMesh = false;
function $create_0(this$static){
  return new FloatBuffer_WebGL_2(this$static._values._array, this$static._values._size);
}

function $getVector2D(this$static, i_0){
  var pos;
  pos = i_0 * 2;
  return new Vector2D_0($get_4(this$static._values, pos), $get_4(this$static._values, pos + 1));
}

function FloatBufferBuilder_0(){
  this._values = new FloatBufferBuilder$FloatArrayList_0;
}

defineSeed(464, 1, {});
function $ensureCapacity(this$static, mincap){
  var newcap, olddata;
  if (mincap > this$static._array.length) {
    newcap = (~~(this$static._array.length * 3) >> 1) + 1;
    olddata = this$static._array;
    this$static._array = initDim(_3F_classLit, makeCastMap([Q$Serializable]), -1, newcap < mincap?mincap:newcap, 1);
    arraycopy(olddata, 0, this$static._array, 0, this$static._size);
  }
}

function $get_4(this$static, index_0){
  return this$static._array[index_0];
}

function $push_back(this$static, element){
  $ensureCapacity(this$static, this$static._size + 1);
  this$static._array[this$static._size++] = element;
}

function FloatBufferBuilder$FloatArrayList_0(){
  this._array = initDim(_3F_classLit, makeCastMap([Q$Serializable]), -1, 1024, 1);
  this._size = 0;
}

defineSeed(465, 1, {}, FloatBufferBuilder$FloatArrayList_0);
_._size = 0;
function $add_10(this$static, x_0, y_0){
  $push_back(this$static._values, x_0);
  $push_back(this$static._values, y_0);
}

function FloatBufferBuilderFromCartesian2D_0(){
  FloatBufferBuilder_0.call(this);
}

defineSeed(466, 464, {}, FloatBufferBuilderFromCartesian2D_0);
function $add_11(this$static, x_0, y_0){
  this$static._centerStrategy == 1 && this$static._values._size == 0 && $setCenter_0(this$static, x_0, y_0, 0);
  if (this$static._centerStrategy == 0) {
    $push_back(this$static._values, x_0);
    $push_back(this$static._values, y_0);
    $push_back(this$static._values, 0);
  }
   else {
    $push_back(this$static._values, x_0 - this$static._cx);
    $push_back(this$static._values, y_0 - this$static._cy);
    $push_back(this$static._values, 0 - this$static._cz);
  }
}

function $setCenter_0(this$static, x_0, y_0, z_0){
  this$static._cx = x_0;
  this$static._cy = y_0;
  this$static._cz = z_0;
}

function FloatBufferBuilderFromCartesian3D_0(center){
  FloatBufferBuilder_0.call(this);
  this._centerStrategy = 0;
  $setCenter_0(this, center._x, center._y, center._z);
}

defineSeed(467, 464, {}, FloatBufferBuilderFromCartesian3D_0);
_._centerStrategy = 0;
_._cx = 0;
_._cy = 0;
_._cz = 0;
function $add_12(this$static, a){
  $push_back(this$static._values, 1);
  $push_back(this$static._values, 1);
  $push_back(this$static._values, 1);
  $push_back(this$static._values, a);
}

function FloatBufferBuilderFromColor_0(){
  FloatBufferBuilder_0.call(this);
}

defineSeed(468, 464, {}, FloatBufferBuilderFromColor_0);
function $add_13(this$static, latitude, longitude, height){
  var vector;
  vector = this$static._planet.toCartesian(latitude, longitude, height);
  this$static._centerStrategy == 1 && this$static._values._size == 0 && $setCenter_1(this$static, vector);
  if (this$static._centerStrategy == 0) {
    $push_back(this$static._values, vector._x);
    $push_back(this$static._values, vector._y);
    $push_back(this$static._values, vector._z);
  }
   else {
    $push_back(this$static._values, vector._x - this$static._cx);
    $push_back(this$static._values, vector._y - this$static._cy);
    $push_back(this$static._values, vector._z - this$static._cz);
  }
}

function $add_14(this$static, position){
  $add_13(this$static, position._latitude, position._longitude, 5);
}

function $setCenter_1(this$static, center){
  this$static._cx = center._x;
  this$static._cy = center._y;
  this$static._cz = center._z;
}

function FloatBufferBuilderFromGeodetic_0(planet, center){
  FloatBufferBuilder_0.call(this);
  this._planet = planet;
  this._centerStrategy = 2;
  $setCenter_1(this, this._planet.toCartesian_0(center));
}

function FloatBufferBuilderFromGeodetic_1(planet, center){
  FloatBufferBuilder_0.call(this);
  this._planet = planet;
  this._centerStrategy = 2;
  $setCenter_1(this, this._planet.toCartesian_2(center));
}

function FloatBufferBuilderFromGeodetic_2(planet, center){
  FloatBufferBuilder_0.call(this);
  this._planet = planet;
  this._centerStrategy = 1;
  $setCenter_1(this, center);
}

defineSeed(469, 464, {}, FloatBufferBuilderFromGeodetic_0, FloatBufferBuilderFromGeodetic_1, FloatBufferBuilderFromGeodetic_2);
_._centerStrategy = 0;
_._cx = 0;
_._cy = 0;
_._cz = 0;
function $addPreRenderTask(this$static, task){
  $addLast(this$static._tasks, task);
}

function $canExecutePreRenderStep(this$static, rc, executedCounter){
  var tasksCount;
  tasksCount = this$static._tasks.size_0;
  if (tasksCount <= this$static._minimumExecutionsPerFrame) {
    this$static._debug && this$static._stressed && $logWarning(rc._logger, 'FTE: Abandon STRESSED mode', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    this$static._stressed = false;
  }
  if (tasksCount == 0) {
    return false;
  }
  if (executedCounter < this$static._minimumExecutionsPerFrame) {
    return true;
  }
  if (tasksCount > this$static._maximumQueuedTasks) {
    this$static._debug && (this$static._stressed || $logWarning(rc._logger, 'FTE: Too many queued tasks (%d). Goes to STRESSED mode', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(this$static._tasks.size_0)])));
    this$static._stressed = true;
  }
  if (this$static._stressed) {
    return lt($elapsedTimeInMilliseconds(rc._frameStartTimer), this$static._maxTimePerFrameStressedMS);
  }
  if (executedCounter >= this$static._maximumExecutionsPerFrame) {
    return false;
  }
  return lt($elapsedTimeInMilliseconds(rc._frameStartTimer), this$static._maxTimePerFrameMS);
}

function $doPreRenderCycle(this$static, rc){
  var canceledCounter, executedCounter, i_0, isCanceled, task;
  if (this$static._tasks.size_0 == 0) {
    return;
  }
  canceledCounter = 0;
  i_0 = $listIterator(this$static._tasks, 0);
  while (i_0.currentNode != i_0.this$0.header) {
    task = dynamicCast($next_4(i_0), Q$FrameTask);
    isCanceled = task.isCanceled_0(rc);
    if (isCanceled) {
      !!task && task.dispose();
      $remove_10(i_0);
      ++canceledCounter;
    }
  }
  this$static._debug && canceledCounter > 0 && $logInfo(rc._logger, 'FTE: Removed %d tasks, active %d tasks.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(canceledCounter), valueOf_0(this$static._tasks.size_0)]));
  executedCounter = 0;
  while ($canExecutePreRenderStep(this$static, rc, executedCounter)) {
    task = dynamicCast($getFirst(this$static._tasks), Q$FrameTask);
    $removeFirst(this$static._tasks);
    task.execute_3(rc);
    !!task && task.dispose();
    ++executedCounter;
  }
  this$static._debug && $showDebugInfo(this$static, rc, executedCounter, canceledCounter);
}

function $showDebugInfo(this$static, rc, executedCounter, canceledCounter){
  var isb, msg, preRenderTasksSize;
  preRenderTasksSize = this$static._tasks.size_0;
  if (executedCounter > 0 || canceledCounter > 0 || preRenderTasksSize > 0) {
    isb = new StringBuilder_WebGL_0;
    isb._string += 'FTE: Tasks';
    if (canceledCounter > 0) {
      isb._string += ' canceled=';
      isb._string += canceledCounter;
    }
    if (executedCounter > 0) {
      isb._string += ' executed=';
      isb._string += executedCounter;
      isb._string += ' in ';
      $addLong(isb, $elapsedTimeInMilliseconds(rc._frameStartTimer));
      isb._string += 'ms';
    }
    isb._string += ' queued=';
    isb._string += toString_16(fromInt(preRenderTasksSize));
    this$static._stressed && (isb._string += ' *Stressed*' , isb);
    msg = isb._string;
    $logInfo(rc._logger, msg, initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  }
}

function FrameTasksExecutor_0(){
  this._tasks = new LinkedList_0;
  this._minimumExecutionsPerFrame = 1;
  this._maximumExecutionsPerFrame = 4;
  this._maximumQueuedTasks = 64;
  this._maxTimePerFrameMS = Pa_longLit;
  this._maxTimePerFrameStressedMS = P14_longLit;
  this._stressed = false;
  this._debug = false;
}

defineSeed(470, 1, {}, FrameTasksExecutor_0);
_._debug = false;
_._maxTimePerFrameMS = P0_longLit;
_._maxTimePerFrameStressedMS = P0_longLit;
_._maximumExecutionsPerFrame = 0;
_._maximumQueuedTasks = 0;
_._minimumExecutionsPerFrame = 0;
_._stressed = false;
function $computeBoundingVolume_1(this$static){
  var maxx, maxy, maxz, minx, miny, minz;
  minx = 10000000000;
  miny = 10000000000;
  minz = 10000000000;
  maxx = -10000000000;
  maxy = -10000000000;
  maxz = -10000000000;
  this$static._ltn._x < 10000000000 && (minx = this$static._ltn._x);
  this$static._ltn._x > -10000000000 && (maxx = this$static._ltn._x);
  this$static._ltn._y < 10000000000 && (miny = this$static._ltn._y);
  this$static._ltn._y > -10000000000 && (maxy = this$static._ltn._y);
  this$static._ltn._z < 10000000000 && (minz = this$static._ltn._z);
  this$static._ltn._z > -10000000000 && (maxz = this$static._ltn._z);
  this$static._rtn._x < minx && (minx = this$static._rtn._x);
  this$static._rtn._x > maxx && (maxx = this$static._rtn._x);
  this$static._rtn._y < miny && (miny = this$static._rtn._y);
  this$static._rtn._y > maxy && (maxy = this$static._rtn._y);
  this$static._rtn._z < minz && (minz = this$static._rtn._z);
  this$static._rtn._z > maxz && (maxz = this$static._rtn._z);
  this$static._lbn._x < minx && (minx = this$static._lbn._x);
  this$static._lbn._x > maxx && (maxx = this$static._lbn._x);
  this$static._lbn._y < miny && (miny = this$static._lbn._y);
  this$static._lbn._y > maxy && (maxy = this$static._lbn._y);
  this$static._lbn._z < minz && (minz = this$static._lbn._z);
  this$static._lbn._z > maxz && (maxz = this$static._lbn._z);
  this$static._rbn._x < minx && (minx = this$static._rbn._x);
  this$static._rbn._x > maxx && (maxx = this$static._rbn._x);
  this$static._rbn._y < miny && (miny = this$static._rbn._y);
  this$static._rbn._y > maxy && (maxy = this$static._rbn._y);
  this$static._rbn._z < minz && (minz = this$static._rbn._z);
  this$static._rbn._z > maxz && (maxz = this$static._rbn._z);
  this$static._ltf._x < minx && (minx = this$static._ltf._x);
  this$static._ltf._x > maxx && (maxx = this$static._ltf._x);
  this$static._ltf._y < miny && (miny = this$static._ltf._y);
  this$static._ltf._y > maxy && (maxy = this$static._ltf._y);
  this$static._ltf._z < minz && (minz = this$static._ltf._z);
  this$static._ltf._z > maxz && (maxz = this$static._ltf._z);
  this$static._rtf._x < minx && (minx = this$static._rtf._x);
  this$static._rtf._x > maxx && (maxx = this$static._rtf._x);
  this$static._rtf._y < miny && (miny = this$static._rtf._y);
  this$static._rtf._y > maxy && (maxy = this$static._rtf._y);
  this$static._rtf._z < minz && (minz = this$static._rtf._z);
  this$static._rtf._z > maxz && (maxz = this$static._rtf._z);
  this$static._lbf._x < minx && (minx = this$static._lbf._x);
  this$static._lbf._x > maxx && (maxx = this$static._lbf._x);
  this$static._lbf._y < miny && (miny = this$static._lbf._y);
  this$static._lbf._y > maxy && (maxy = this$static._lbf._y);
  this$static._lbf._z < minz && (minz = this$static._lbf._z);
  this$static._lbf._z > maxz && (maxz = this$static._lbf._z);
  this$static._rbf._x < minx && (minx = this$static._rbf._x);
  this$static._rbf._x > maxx && (maxx = this$static._rbf._x);
  this$static._rbf._y < miny && (miny = this$static._rbf._y);
  this$static._rbf._y > maxy && (maxy = this$static._rbf._y);
  this$static._rbf._z < minz && (minz = this$static._rbf._z);
  this$static._rbf._z > maxz && (maxz = this$static._rbf._z);
  return new Box_0(new Vector3D_0(minx, miny, minz), new Vector3D_0(maxx, maxy, maxz));
}

function $touchesWithBox(this$static, that){
  var corners;
  !this$static._boundingVolume && (this$static._boundingVolume = $computeBoundingVolume_1(this$static));
  if (!$touchesBox(this$static._boundingVolume, that)) {
    return false;
  }
  corners = $getCornersArray(that);
  return !($signedDistance_0(this$static._leftPlane, corners[0]) >= 0 && $signedDistance_0(this$static._leftPlane, corners[1]) >= 0 && $signedDistance_0(this$static._leftPlane, corners[2]) >= 0 && $signedDistance_0(this$static._leftPlane, corners[3]) >= 0 && $signedDistance_0(this$static._leftPlane, corners[4]) >= 0 && $signedDistance_0(this$static._leftPlane, corners[5]) >= 0 && $signedDistance_0(this$static._leftPlane, corners[6]) >= 0 && $signedDistance_0(this$static._leftPlane, corners[7]) >= 0) && !($signedDistance_0(this$static._bottomPlane, corners[0]) >= 0 && $signedDistance_0(this$static._bottomPlane, corners[1]) >= 0 && $signedDistance_0(this$static._bottomPlane, corners[2]) >= 0 && $signedDistance_0(this$static._bottomPlane, corners[3]) >= 0 && $signedDistance_0(this$static._bottomPlane, corners[4]) >= 0 && $signedDistance_0(this$static._bottomPlane, corners[5]) >= 0 && $signedDistance_0(this$static._bottomPlane, corners[6]) >= 0 && $signedDistance_0(this$static._bottomPlane, corners[7]) >= 0) && !($signedDistance_0(this$static._rightPlane, corners[0]) >= 0 && $signedDistance_0(this$static._rightPlane, corners[1]) >= 0 && $signedDistance_0(this$static._rightPlane, corners[2]) >= 0 && $signedDistance_0(this$static._rightPlane, corners[3]) >= 0 && $signedDistance_0(this$static._rightPlane, corners[4]) >= 0 && $signedDistance_0(this$static._rightPlane, corners[5]) >= 0 && $signedDistance_0(this$static._rightPlane, corners[6]) >= 0 && $signedDistance_0(this$static._rightPlane, corners[7]) >= 0) && !($signedDistance_0(this$static._topPlane, corners[0]) >= 0 && $signedDistance_0(this$static._topPlane, corners[1]) >= 0 && $signedDistance_0(this$static._topPlane, corners[2]) >= 0 && $signedDistance_0(this$static._topPlane, corners[3]) >= 0 && $signedDistance_0(this$static._topPlane, corners[4]) >= 0 && $signedDistance_0(this$static._topPlane, corners[5]) >= 0 && $signedDistance_0(this$static._topPlane, corners[6]) >= 0 && $signedDistance_0(this$static._topPlane, corners[7]) >= 0) && !($signedDistance_0(this$static._nearPlane, corners[0]) >= 0 && $signedDistance_0(this$static._nearPlane, corners[1]) >= 0 && $signedDistance_0(this$static._nearPlane, corners[2]) >= 0 && $signedDistance_0(this$static._nearPlane, corners[3]) >= 0 && $signedDistance_0(this$static._nearPlane, corners[4]) >= 0 && $signedDistance_0(this$static._nearPlane, corners[5]) >= 0 && $signedDistance_0(this$static._nearPlane, corners[6]) >= 0 && $signedDistance_0(this$static._nearPlane, corners[7]) >= 0) && !($signedDistance_0(this$static._farPlane, corners[0]) >= 0 && $signedDistance_0(this$static._farPlane, corners[1]) >= 0 && $signedDistance_0(this$static._farPlane, corners[2]) >= 0 && $signedDistance_0(this$static._farPlane, corners[3]) >= 0 && $signedDistance_0(this$static._farPlane, corners[4]) >= 0 && $signedDistance_0(this$static._farPlane, corners[5]) >= 0 && $signedDistance_0(this$static._farPlane, corners[6]) >= 0 && $signedDistance_0(this$static._farPlane, corners[7]) >= 0);
}

function $transformedBy_P(this$static, matrix){
  return new Frustum_0(this$static, matrix, $inversed(matrix));
}

function Frustum_0(that, matrix, inverse){
  this._ltn = new Vector3D_1($transformedBy_0(that._ltn, inverse));
  this._rtn = new Vector3D_1($transformedBy_0(that._rtn, inverse));
  this._lbn = new Vector3D_1($transformedBy_0(that._lbn, inverse));
  this._rbn = new Vector3D_1($transformedBy_0(that._rbn, inverse));
  this._ltf = new Vector3D_1($transformedBy_0(that._ltf, inverse));
  this._rtf = new Vector3D_1($transformedBy_0(that._rtf, inverse));
  this._lbf = new Vector3D_1($transformedBy_0(that._lbf, inverse));
  this._rbf = new Vector3D_1($transformedBy_0(that._rbf, inverse));
  this._leftPlane = $transformedByTranspose(that._leftPlane, matrix);
  this._rightPlane = $transformedByTranspose(that._rightPlane, matrix);
  this._bottomPlane = $transformedByTranspose(that._bottomPlane, matrix);
  this._topPlane = $transformedByTranspose(that._topPlane, matrix);
  this._nearPlane = $transformedByTranspose(that._nearPlane, matrix);
  this._farPlane = $transformedByTranspose(that._farPlane, matrix);
  this._boundingVolume = null;
}

function Frustum_1(data_0){
  this._ltn = new Vector3D_1(new Vector3D_0(data_0._left, data_0._top, -data_0._znear));
  this._rtn = new Vector3D_1(new Vector3D_0(data_0._right, data_0._top, -data_0._znear));
  this._lbn = new Vector3D_1(new Vector3D_0(data_0._left, data_0._bottom, -data_0._znear));
  this._rbn = new Vector3D_1(new Vector3D_0(data_0._right, data_0._bottom, -data_0._znear));
  this._ltf = new Vector3D_1(new Vector3D_0(data_0._zfar / data_0._znear * data_0._left, data_0._zfar / data_0._znear * data_0._top, -data_0._zfar));
  this._rtf = new Vector3D_1(new Vector3D_0(data_0._zfar / data_0._znear * data_0._right, data_0._zfar / data_0._znear * data_0._top, -data_0._zfar));
  this._lbf = new Vector3D_1(new Vector3D_0(data_0._zfar / data_0._znear * data_0._left, data_0._zfar / data_0._znear * data_0._bottom, -data_0._zfar));
  this._rbf = new Vector3D_1(new Vector3D_0(data_0._zfar / data_0._znear * data_0._right, data_0._zfar / data_0._znear * data_0._bottom, -data_0._zfar));
  this._leftPlane = fromPoints(($clinit_Vector3D() , zero), new Vector3D_0(data_0._left, data_0._top, -data_0._znear), new Vector3D_0(data_0._left, data_0._bottom, -data_0._znear));
  this._bottomPlane = fromPoints(zero, new Vector3D_0(data_0._left, data_0._bottom, -data_0._znear), new Vector3D_0(data_0._right, data_0._bottom, -data_0._znear));
  this._rightPlane = fromPoints(zero, new Vector3D_0(data_0._right, data_0._bottom, -data_0._znear), new Vector3D_0(data_0._right, data_0._top, -data_0._znear));
  this._topPlane = fromPoints(zero, new Vector3D_0(data_0._right, data_0._top, -data_0._znear), new Vector3D_0(data_0._left, data_0._top, -data_0._znear));
  this._nearPlane = new Plane_1(new Vector3D_0(0, 0, 1), data_0._znear);
  this._farPlane = new Plane_1(new Vector3D_0(0, 0, -1), -data_0._zfar);
  this._boundingVolume = null;
}

defineSeed(471, 1, {}, Frustum_0, Frustum_1);
function FrustumData_0(){
  this._left = -1;
  this._right = 1;
  this._bottom = -1;
  this._top = 1;
  this._znear = 1;
  this._zfar = 10;
}

function FrustumData_1(left, right, bottom, top_0, znear, zfar){
  this._left = left;
  this._right = right;
  this._bottom = bottom;
  this._top = top_0;
  this._znear = znear;
  this._zfar = zfar;
}

defineSeed(472, 1, {}, FrustumData_0, FrustumData_1);
_._bottom = 0;
_._left = 0;
_._right = 0;
_._top = 0;
_._zfar = 0;
_._znear = 0;
function G3MContext_0(factory, threadUtils, logger, planet, downloader, effectsScheduler){
  this._factory = factory;
  this._threadUtils = threadUtils;
  this._logger = logger;
  this._planet = planet;
  this._downloader = downloader;
  this._effectsScheduler = effectsScheduler;
}

defineSeed(473, 1, {}, G3MContext_0);
function G3MEventContext_0(factory, threadUtils, logger, planet, downloader, scheduler){
  G3MContext_0.call(this, factory, threadUtils, logger, planet, downloader, scheduler);
}

defineSeed(474, 473, {}, G3MEventContext_0);
function G3MRenderContext_0(frameTasksExecutor, factory, threadUtils, logger, planet, gl, currentCamera, nextCamera, texturesHandler, downloader, scheduler, frameStartTimer, gpuProgramManager){
  G3MContext_0.call(this, factory, threadUtils, logger, planet, downloader, scheduler);
  this._frameTasksExecutor = frameTasksExecutor;
  this._gl = gl;
  this._currentCamera = currentCamera;
  this._nextCamera = nextCamera;
  this._texturesHandler = texturesHandler;
  this._frameStartTimer = frameStartTimer;
  this._gpuProgramManager = gpuProgramManager;
}

defineSeed(475, 473, {}, G3MRenderContext_0);
function $addPeriodicalTask(this$static, periodicalTask){
  $add_5(this$static._periodicalTasks, periodicalTask);
}

function $calculateRendererState(this$static){
  var busyFlag, cameraRendererRenderState, mainRendererRenderState;
  if (this$static._forceBusyRenderer) {
    return $clinit_RenderState() , $clinit_RenderState() , BUSY;
  }
  if (!this$static._initializationTaskReady) {
    return $clinit_RenderState() , $clinit_RenderState() , BUSY;
  }
  busyFlag = false;
  cameraRendererRenderState = ($clinit_RenderState() , $clinit_RenderState() , READY);
  if (cameraRendererRenderState._type == 2) {
    return cameraRendererRenderState;
  }
   else 
    cameraRendererRenderState._type == 1 && (busyFlag = true);
  mainRendererRenderState = this$static._mainRenderer.getRenderState_0(this$static._renderContext);
  if (mainRendererRenderState._type == 2) {
    return mainRendererRenderState;
  }
   else 
    mainRendererRenderState._type == 1 && (busyFlag = true);
  return busyFlag?BUSY:READY;
}

function $cancelCameraAnimation(this$static){
  var target;
  target = this$static._nextCamera._camEffectTarget;
  $cancelAllEffectsFor(this$static._effectsScheduler, target);
}

function $notifyTouchEvent(this$static, ec, touchEvent){
  var handled, renderStateType;
  renderStateType = this$static._rendererState._type;
  switch (renderStateType) {
    case 0:
      {
        handled = false;
        this$static._mainRenderer.isEnable() && (handled = this$static._mainRenderer.onTouchEvent_0(ec, touchEvent));
        handled || $onTouchEvent(this$static._cameraRenderer, ec, touchEvent);
        break;
      }

  }
}

function $onResizeViewportEvent_0(this$static, width_0, height){
  var ec;
  ec = new G3MEventContext_0(_instance_1, this$static._threadUtils, _instance_3, this$static._planet, this$static._downloader, this$static._effectsScheduler);
  $resizeViewport(this$static._nextCamera, width_0, height);
  $resizeViewport(this$static._currentCamera, width_0, height);
  this$static._mainRenderer.onResizeViewportEvent(ec, width_0, height);
  $onResizeViewportEvent(this$static._busyRenderer, width_0, height);
  $onResizeViewportEvent_1(this$static._errorRenderer, ec, width_0, height);
}

function $onTouchEvent_0(this$static, touchEvent){
  var downUpEvent, ec, eventType, movePosition, pos, sd, thresholdInPixels, touch;
  ec = new G3MEventContext_0(_instance_1, this$static._threadUtils, _instance_3, this$static._planet, this$static._downloader, this$static._effectsScheduler);
  $notifyTouchEvent(this$static, ec, touchEvent);
  if (touchEvent._touchs.size_0 == 1) {
    eventType = touchEvent._eventType;
    if (eventType == ($clinit_TouchEventType() , Down)) {
      this$static._clickOnProcess = true;
      pos = dynamicCast($get_2(touchEvent._touchs, 0), Q$Touch)._pos;
      this$static._touchDownPositionX = pos._x;
      this$static._touchDownPositionY = pos._y;
    }
     else {
      if (eventType == Up) {
        if (this$static._clickOnProcess) {
          touch = dynamicCast($get_2(touchEvent._touchs, 0), Q$Touch);
          downUpEvent = create_5(DownUp, new Touch_1(touch));
          $notifyTouchEvent(this$static, ec, downUpEvent);
          !!downUpEvent && $dispose_18(downUpEvent);
        }
      }
      if (this$static._clickOnProcess) {
        if (eventType == Move) {
          movePosition = dynamicCast($get_2(touchEvent._touchs, 0), Q$Touch)._pos;
          sd = $squaredDistanceTo(movePosition, this$static._touchDownPositionX, this$static._touchDownPositionY);
          thresholdInPixels = 3.7795276641845703 * ($getDeviceInfo(this$static._context._factory) , 1);
          sd > thresholdInPixels * thresholdInPixels && (this$static._clickOnProcess = false);
        }
         else {
          this$static._clickOnProcess = false;
        }
      }
    }
  }
   else {
    this$static._clickOnProcess = false;
  }
}

function $render_2(this$static, width_0, height){
  var averageTimePerRender, cacheStatistics, cameraConstrainersCount, constrainer, elapsedTimeMS, fps, i_0, i0, periodicalTasksCount, position, renderStateType;
  if (this$static._paused) {
    return;
  }
  if (this$static._width != width_0 || this$static._height != height) {
    this$static._width = width_0;
    this$static._height = height;
    $onResizeViewportEvent_0(this$static, this$static._width, this$static._height);
  }
  if (!this$static._initialCameraPositionHasBeenSet) {
    this$static._initialCameraPositionHasBeenSet = true;
    position = $getCameraPosition(this$static._planet, this$static._mainRenderer.getPlanetRenderer());
    $setGeodeticPosition(this$static._currentCamera, position);
    $setHeading(this$static._currentCamera, new Angle_0(0, 0));
    $setPitch(this$static._currentCamera, new Angle_0(-90, -1.5707963267948966));
    $setRoll(this$static._currentCamera, new Angle_0(0, 0));
    $setGeodeticPosition(this$static._nextCamera, position);
    $setHeading(this$static._nextCamera, new Angle_0(0, 0));
    $setPitch(this$static._nextCamera, new Angle_0(-90, -1.5707963267948966));
    $setRoll(this$static._nextCamera, new Angle_0(0, 0));
  }
  this$static._timer._startTimeInMilliseconds = fromDouble(currentTimeMillis0());
  ++this$static._renderCounter;
  periodicalTasksCount = this$static._periodicalTasks.size_0;
  for (i_0 = 0; i_0 < periodicalTasksCount; i_0++) {
    throwClassCastExceptionUnlessNull($get_2(this$static._periodicalTasks, i_0));
    null.nullMethod();
  }
  cameraConstrainersCount = this$static._cameraConstrainers.size_0;
  for (i0 = 0; i0 < cameraConstrainersCount; i0++) {
    constrainer = dynamicCast($get_2(this$static._cameraConstrainers, i0), Q$ICameraConstrainer);
    constrainer.onCameraChange(this$static._planet, this$static._currentCamera, this$static._nextCamera);
  }
  this$static._planet.applyCameraConstrainers(this$static._currentCamera, this$static._nextCamera);
  $copyFrom(this$static._currentCamera, this$static._nextCamera);
  this$static._rendererState = $calculateRendererState(this$static);
  renderStateType = this$static._rendererState._type;
  this$static._renderContext._frameStartTimer._startTimeInMilliseconds = fromDouble(currentTimeMillis0());
  $doOneCyle(this$static._effectsScheduler, this$static._renderContext);
  $doPreRenderCycle(this$static._frameTasksExecutor, this$static._renderContext);
  $clearScreen(this$static._gl, this$static._backgroundColor);
  !this$static._rootState && (this$static._rootState = new GLState_0);
  switch (renderStateType) {
    case 0:
      $setSelectedRenderer(this$static, this$static._mainRenderer);
      $render_1(this$static._cameraRenderer, this$static._renderContext);
      $modifyGLState(this$static._sceneLighting, this$static._rootState, this$static._renderContext);
      this$static._mainRenderer.isEnable() && this$static._mainRenderer.render(this$static._renderContext, this$static._rootState);
      break;
    case 1:
      $setSelectedRenderer(this$static, this$static._busyRenderer);
      $render_0(this$static._busyRenderer, this$static._renderContext);
      break;
    default:$setErrors(this$static._errorRenderer, this$static._rendererState._errors);
      $setSelectedRenderer(this$static, this$static._errorRenderer);
      $render_3(this$static._errorRenderer, this$static._renderContext, this$static._rootState);
  }
  this$static._renderContext;
  this$static._renderCounter % this$static._nFramesBeetweenProgramsCleanUp == 0 && $removeUnused(this$static._gpuProgramManager);
  elapsedTimeMS = $elapsedTimeInMilliseconds(this$static._timer);
  if (this$static._logFPS) {
    this$static._totalRenderTime = toInt(add_1(fromInt(this$static._totalRenderTime), elapsedTimeMS));
    if (!this$static._renderStatisticsTimer || gt($elapsedTimeInMilliseconds(this$static._renderStatisticsTimer), P7d0_longLit)) {
      averageTimePerRender = this$static._totalRenderTime / this$static._renderCounter;
      fps = 1000 / averageTimePerRender;
      $logInfo(_instance_3, 'FPS=%f', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [($clinit_Double() , new Double_0(fps))]));
      this$static._renderCounter = 0;
      this$static._totalRenderTime = 0;
      !this$static._renderStatisticsTimer?(this$static._renderStatisticsTimer = new Timer_WebGL_0):(this$static._renderStatisticsTimer._startTimeInMilliseconds = fromDouble(currentTimeMillis0()));
    }
  }
  if (this$static._logDownloaderStatistics) {
    cacheStatistics = '';
    !!this$static._downloader && (cacheStatistics = $statistics(this$static._downloader));
    if (!$equals(this$static._lastCacheStatistics, cacheStatistics)) {
      $logInfo(_instance_3, '%s', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [cacheStatistics]));
      this$static._lastCacheStatistics = cacheStatistics;
    }
  }
}

function $setAnimatedCameraPosition(this$static, interval, position, heading, pitch){
  var fromHeading, fromPitch, fromPosition;
  fromPosition = $getGeodeticPosition(this$static._nextCamera);
  fromHeading = $getHeadingPitchRoll(this$static._nextCamera)._heading;
  fromPitch = $getHeadingPitchRoll(this$static._nextCamera)._pitch;
  $setAnimatedCameraPosition_0(this$static, interval, fromPosition, position, fromHeading, heading, fromPitch, pitch);
}

function $setAnimatedCameraPosition_0(this$static, interval, fromPosition, toPosition, fromHeading, toHeading, fromPitch, toPitch){
  var finalLatInDegrees, finalLonInDegrees, finalToPosition;
  if ($isEquals(fromPosition._latitude, toPosition._latitude) && $isEquals(fromPosition._longitude, toPosition._longitude) && fromPosition._height == toPosition._height && ($isEquals_2(fromHeading._degrees, toHeading._degrees) || $isEquals_2(fromHeading._radians, toHeading._radians)) && ($isEquals_2(fromPitch._degrees, toPitch._degrees) || $isEquals_2(fromPitch._radians, toPitch._radians))) {
    return;
  }
  finalLatInDegrees = toPosition._latitude._degrees;
  finalLonInDegrees = toPosition._longitude._degrees;
  while (finalLatInDegrees > 90) {
    finalLatInDegrees -= 360;
  }
  while (finalLatInDegrees < -90) {
    finalLatInDegrees += 360;
  }
  while (finalLonInDegrees > 360) {
    finalLonInDegrees -= 360;
  }
  while (finalLonInDegrees < 0) {
    finalLonInDegrees += 360;
  }
  abs_0(finalLonInDegrees - fromPosition._longitude._degrees) > 180 && (finalLonInDegrees -= 360);
  finalToPosition = fromDegrees_1(finalLatInDegrees, finalLonInDegrees, toPosition._height);
  $cancelCameraAnimation(this$static);
  $startEffect(this$static._effectsScheduler, new CameraGoToPositionEffect_0(interval, fromPosition, finalToPosition, fromHeading, toHeading, fromPitch, toPitch), this$static._nextCamera._camEffectTarget);
}

function $setCameraHeading(this$static, heading){
  $setHeading(this$static._nextCamera, heading);
}

function $setCameraPitch(this$static, pitch){
  $setPitch(this$static._nextCamera, pitch);
}

function $setCameraPosition(this$static, position){
  $setGeodeticPosition(this$static._nextCamera, position);
  this$static._initialCameraPositionHasBeenSet = true;
}

function $setSelectedRenderer(this$static, selectedRenderer){
  if (selectedRenderer != this$static._selectedRenderer) {
    !!this$static._selectedRenderer && this$static._selectedRenderer.stop_1(this$static._renderContext);
    this$static._selectedRenderer = selectedRenderer;
    this$static._selectedRenderer.start_2(this$static._renderContext);
  }
}

function G3MWidget_0(gl, downloader, threadUtils, planet, cameraConstrainers, cameraRenderer, mainRenderer, busyRenderer, errorRenderer, backgroundColor, logFPS, logDownloaderStatistics, periodicalTasks, gpuProgramManager, sceneLighting){
  var i_0;
  this._cameraConstrainers = new ArrayList_0;
  this._periodicalTasks = new ArrayList_0;
  this._frameTasksExecutor = new FrameTasksExecutor_0;
  this._effectsScheduler = new EffectsScheduler_0;
  this._gl = gl;
  this._downloader = downloader;
  this._threadUtils = threadUtils;
  this._texturesHandler = new TexturesHandler_0(this._gl);
  this._planet = planet;
  this._cameraConstrainers = cameraConstrainers;
  this._cameraRenderer = cameraRenderer;
  this._mainRenderer = mainRenderer;
  this._busyRenderer = busyRenderer;
  this._errorRenderer = errorRenderer;
  this._width = 1;
  this._height = 1;
  this._currentCamera = new Camera_0(P1_longLit);
  this._nextCamera = new Camera_0(P2_longLit);
  this._backgroundColor = new Color_1(backgroundColor);
  this._timer = new Timer_WebGL_0;
  this._renderCounter = 0;
  this._totalRenderTime = 0;
  this._logFPS = logFPS;
  this._rendererState = new RenderState_1(($clinit_RenderState() , $clinit_RenderState() , BUSY));
  this._selectedRenderer = null;
  this._renderStatisticsTimer = null;
  this._logDownloaderStatistics = logDownloaderStatistics;
  mainRenderer.getSurfaceElevationProvider();
  this._context = new G3MContext_0(_instance_1, threadUtils, _instance_3, this._planet, downloader, this._effectsScheduler, mainRenderer.getSurfaceElevationProvider());
  this._paused = false;
  this._initializationTaskReady = true;
  this._clickOnProcess = false;
  this._gpuProgramManager = gpuProgramManager;
  this._sceneLighting = sceneLighting;
  this._rootState = null;
  this._initialCameraPositionHasBeenSet = false;
  this._forceBusyRenderer = false;
  this._nFramesBeetweenProgramsCleanUp = 500;
  this._touchDownPositionX = 0;
  this._touchDownPositionY = 0;
  new Timer_WebGL_0;
  this._mainRenderer.initialize_0(this._context);
  $initialize(this._currentCamera, this._context);
  $initialize(this._nextCamera, this._context);
  !!this._threadUtils && $initialize_3(this._threadUtils, this._context);
  !!this._downloader && $start_0(this._downloader);
  for (i_0 = 0; i_0 < periodicalTasks.size_0; i_0++) {
    $addPeriodicalTask(this, (checkIndex(i_0, periodicalTasks.size_0) , throwClassCastExceptionUnlessNull(periodicalTasks.array[i_0])));
  }
  this._mainRenderer.setChangedRendererInfoListener(this, -1);
  this._renderContext = new G3MRenderContext_0(this._frameTasksExecutor, _instance_1, this._threadUtils, _instance_3, this._planet, this._gl, this._currentCamera, this._nextCamera, this._texturesHandler, this._downloader, this._effectsScheduler, new Timer_WebGL_0, this._gpuProgramManager);
}

function initSingletons(logger, factory, stringUtils, stringBuilder, mathUtils, jsonParser, textUtils, devAttitude, devLocation){
  if (!_instance_3) {
    !!_instance_3 && $logWarning(_instance_3, 'ILooger instance already set!', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    _instance_3 = logger;
    !!_instance_1 && $logWarning(_instance_3, 'IFactory instance already set!', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    _instance_1 = factory;
    !!_instance_6 && $logWarning(_instance_3, 'IStringUtils instance already set!', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    _instance_6 = stringUtils;
    !!_instance_5 && $logWarning(_instance_3, 'IStringBuilder set two times', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    _instance_5 = stringBuilder;
    !!_instance_4 && $logWarning(_instance_3, 'IMathUtils instance already set!', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    _instance_4 = mathUtils;
    !!_instance_2 && $logWarning(_instance_3, 'IJSONParser instance already set!', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    _instance_2 = jsonParser;
    !!_instance_7 && $logWarning(_instance_3, 'ITextUtils instance already set!', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    _instance_7 = textUtils;
    !!_instance && $logWarning(_instance_3, 'ILooger instance already set!', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    _instance = devAttitude;
    !!_instance_0 && $logWarning(_instance_3, 'IDeviceLocation instance already set!', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    _instance_0 = devLocation;
  }
   else {
    $logWarning(_instance_3, 'Singletons already set', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  }
}

defineSeed(476, 1, {}, G3MWidget_0);
_.changedRendererInfo = function changedRendererInfo_0(rendererIdentifier, info){
}
;
_.getCurrentCamera = function getCurrentCamera(){
  return this._currentCamera;
}
;
_._clickOnProcess = false;
_._forceBusyRenderer = false;
_._height = 0;
_._initialCameraPositionHasBeenSet = false;
_._initializationTaskReady = false;
_._logDownloaderStatistics = false;
_._logFPS = false;
_._nFramesBeetweenProgramsCleanUp = 0;
_._paused = false;
_._renderCounter = 0;
_._totalRenderTime = 0;
_._touchDownPositionX = 0;
_._touchDownPositionY = 0;
_._width = 0;
defineSeed(477, 1, {});
function GFont_0(size_0){
  this._name = 'sans-serif';
  this._size = size_0;
  this._bold = false;
  this._italic = false;
}

function GFont_1(that){
  this._name = that._name;
  this._size = that._size;
  this._bold = that._bold;
  this._italic = that._italic;
}

defineSeed(478, 1, {}, GFont_0, GFont_1);
_.toString$ = function toString_42(){
  var isb;
  return isb = new StringBuilder_WebGL_0 , isb._string += '(GFont name="' , $addString(isb, this._name) , isb._string += '", size=' , $addFloat(isb, this._size) , this._bold && (isb._string += ', bold' , isb) , this._italic && (isb._string += ', italic' , isb) , isb._string += ')' , isb._string;
}
;
_._bold = false;
_._italic = false;
_._size = 0;
function $attachShader(this$static, program, shader){
  $attachShader_0(this$static._nativeGL, program, shader);
}

function $clearScreen(this$static, color_0){
  $setClearColor(this$static._clearScreenState, color_0);
  $applyChanges(this$static._clearScreenState, this$static, this$static._currentGLGlobalState);
  $clear_1(this$static._nativeGL, _colorBuffer | _depthBuffer);
}

function $createShader(this$static, type_0){
  return $createShader_0(this$static._nativeGL, type_0);
}

function $deleteProgram(this$static, program){
  if (!program) {
    return false;
  }
  if (this$static._currentGPUProgram == program) {
    --this$static._currentGPUProgram._nReferences;
    this$static._currentGPUProgram = null;
  }
  return $deleteProgram_0(this$static._nativeGL, program._programID);
}

function $deleteTexture(this$static, textureId){
  if (textureId) {
    $onTextureDelete(this$static._currentGLGlobalState, textureId);
    $deleteTexture_0(this$static._nativeGL, textureId)?$addLast(this$static._texturesIdBag, textureId):!!textureId && undefined;
  }
}

function $disableVertexAttribArray(this$static, location_0){
  $disableVertexAttribArray_0(this$static._nativeGL, location_0);
}

function $drawArrays(this$static, mode, count, state, progManager){
  $applyOnGPU(state, this$static, progManager);
  $drawArrays_0(this$static._nativeGL, mode, 0, count);
}

function $drawElements(this$static, mode, indices, state, progManager){
  $applyOnGPU(state, this$static, progManager);
  $drawElements_0(this$static._nativeGL, mode, indices._buffer.length, indices);
}

function $enableVertexAttribArray(this$static, location_0){
  $enableVertexAttribArray_0(this$static._nativeGL, location_0);
}

function $getGLTextureId(this$static){
  var i_0, ids, idsCount, result;
  if (this$static._texturesIdBag.size_0 == 0) {
    ids = $genTextures(this$static._nativeGL, 1024);
    idsCount = ids.size_0;
    for (i_0 = 0; i_0 < idsCount; i_0++) {
      $addFirst(this$static._texturesIdBag, (checkIndex(i_0, ids.size_0) , dynamicCast(ids.array[i_0], Q$IGLTextureId)));
    }
    this$static._texturesIdAllocationCounter += idsCount;
    $logInfo(_instance_3, '= Created %d texturesIds (accumulated %d).', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(idsCount), valueOf_0(this$static._texturesIdAllocationCounter)]));
  }
  if (this$static._texturesIdBag.size_0 == 0) {
    $logError(_instance_3, 'TextureIds bag exhausted', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return null;
  }
  result = dynamicCast($getLast(this$static._texturesIdBag), Q$IGLTextureId);
  $removeLast(this$static._texturesIdBag);
  return result;
}

function $getProgramiv(this$static, program, pname){
  return $getProgramiv_0(this$static._nativeGL, program, pname);
}

function $linkProgram(this$static, program){
  return $linkProgram_0(this$static._nativeGL, program);
}

function $uniform1f(this$static, loc, x_0){
  $uniform1f_0(this$static._nativeGL, loc, x_0);
}

function $uniform1i(this$static, loc, v){
  $uniform1i_0(this$static._nativeGL, loc, v);
}

function $uniform2f(this$static, loc, x_0, y_0){
  $uniform2f_0(this$static._nativeGL, loc, x_0, y_0);
}

function $uniform3f(this$static, location_0, v0, v1, v2){
  $uniform3f_0(this$static._nativeGL, location_0, v0, v1, v2);
}

function $uniform4f(this$static, location_0, v0, v1, v2, v3){
  $uniform4f_0(this$static._nativeGL, location_0, v0, v1, v2, v3);
}

function $uniformMatrix4fv(this$static, location_0, matrix){
  $uniformMatrix4fv_0(this$static._nativeGL, location_0, false, matrix);
}

function $uploadTexture_0(this$static, image, format, generateMipmap){
  var clampToEdge, linear, newState, texId, texture2D;
  texId = $getGLTextureId(this$static);
  if (texId) {
    newState = new GLGlobalState_0;
    newState._pixelStoreIAlignmentUnpack = 1;
    $bindTexture(newState, 0, texId);
    $applyChanges(newState, this$static, this$static._currentGLGlobalState);
    texture2D = _texture2D;
    linear = _linear;
    generateMipmap?$texParameteri(this$static._nativeGL, texture2D, _minFilter, _linearMipmapNearest):$texParameteri(this$static._nativeGL, texture2D, _minFilter, linear);
    $texParameteri(this$static._nativeGL, texture2D, _magFilter, linear);
    clampToEdge = _clampToEdge;
    $texParameteri(this$static._nativeGL, texture2D, _wrapS, clampToEdge);
    $texParameteri(this$static._nativeGL, texture2D, _wrapT, clampToEdge);
    $texImage2D(this$static._nativeGL, image, format);
    generateMipmap && (isPowerOfTwo($getWidth(image)) && isPowerOfTwo($getHeight(image))?$generateMipmap(this$static._nativeGL, texture2D):$logError(_instance_3, "Can't generate bitmap. Texture dimensions are not power of two.", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [])));
  }
   else {
    $logError(_instance_3, "can't get a valid texture id\n", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return null;
  }
  return texId;
}

function $useProgram(this$static, program){
  if (program) {
    if (this$static._currentGPUProgram != program) {
      if (this$static._currentGPUProgram) {
        $onUnused(this$static._currentGPUProgram, this$static);
        --this$static._currentGPUProgram._nReferences;
      }
      $useProgram_0(this$static._nativeGL, program);
      this$static._currentGPUProgram = program;
      ++this$static._currentGPUProgram._nReferences;
    }
  }
}

function $vertexAttribPointer(this$static, index_0, size_0, normalized, stride, buffer){
  $vertexAttribPointer_0(this$static._nativeGL, index_0, size_0, normalized, stride, buffer);
}

function GL_0(nativeGL){
  this._texturesIdBag = new LinkedList_0;
  this._nativeGL = nativeGL;
  this._texturesIdAllocationCounter = 0;
  this._currentGPUProgram = null;
  this._clearScreenState = null;
  init_5(this._nativeGL);
  init_4(this._nativeGL);
  init_9(this._nativeGL);
  init_13(this._nativeGL);
  init_8(this._nativeGL);
  init_3(this._nativeGL);
  init_12(this._nativeGL);
  init_10(this._nativeGL);
  init_11(this._nativeGL);
  init_2(this._nativeGL);
  init_7(this._nativeGL);
  init_14(this._nativeGL);
  init_6(this._nativeGL);
  _initializationAvailable = true;
  this._currentGLGlobalState = new GLGlobalState_0;
  this._clearScreenState = new GLGlobalState_0;
}

function isPowerOfTwo(x_0){
  return x_0 >= 0 && (x_0 == 1 || x_0 == 2 || x_0 == 4 || x_0 == 8 || x_0 == 16 || x_0 == 32 || x_0 == 64 || x_0 == 128 || x_0 == 256 || x_0 == 512 || x_0 == 1024 || x_0 == 2048 || x_0 == 4096 || x_0 == 8192 || x_0 == 16384 || x_0 == 32768 || x_0 == 65536 || x_0 == 131072 || x_0 == 262144 || x_0 == 524288 || x_0 == 1048576 || x_0 == 2097152 || x_0 == 4194304 || x_0 == 8388608 || x_0 == 16777216 || x_0 == 33554432 || x_0 == 67108864 || x_0 == 134217728 || x_0 == 268435456 || x_0 == 536870912 || x_0 == 1073741824);
}

defineSeed(479, 1, {}, GL_0);
_._texturesIdAllocationCounter = 0;
function init_2(ngl){
  ngl._gl.PACK_ALIGNMENT;
  _unpack = ngl._gl.UNPACK_ALIGNMENT;
}

var _unpack = 0;
function init_3(ngl){
  _srcAlpha = ngl._gl.SRC_ALPHA;
  _oneMinusSrcAlpha = ngl._gl.ONE_MINUS_SRC_ALPHA;
  _one = ngl._gl.ONE;
  _zero = ngl._gl.ZERO;
}

var _one = 0, _oneMinusSrcAlpha = 0, _srcAlpha = 0, _zero = 0;
function init_4(ngl){
  _colorBuffer = ngl._gl.COLOR_BUFFER_BIT;
  _depthBuffer = ngl._gl.DEPTH_BUFFER_BIT;
}

var _colorBuffer = 0, _depthBuffer = 0;
function $setMatrix(this$static, matrix){
  $setMatrix_0(this$static._matrixHolder, matrix);
}

function GLCameraGroupFeature_0(matrix, id_0){
  GLFeature_0.call(this, ($clinit_GLFeatureGroupName() , CAMERA_GROUP), id_0);
  this._matrixHolder = null;
  this._matrixHolder = new Matrix44DHolder_0(matrix);
}

defineSeed(483, 419, makeCastMap([Q$GLCameraGroupFeature, Q$GLFeature, Q$RCObject]));
_.applyOnGlobalGLState = function applyOnGlobalGLState_2(state){
}
;
_.dispose = function dispose_36(){
  $_release(this._matrixHolder);
  !!this._values && $dispose_6(this._values);
  $dispose_1(this);
}
;
function init_5(ngl){
  ngl._gl.FRONT;
  _back = ngl._gl.BACK;
  ngl._gl.FRONT_AND_BACK;
}

var _back = 0;
function init_6(ngl){
  _noError = ngl._gl.NO_ERROR;
}

var _noError = 0;
function applyToAllGroups(features, vs, state){
  var groupName, i_0, i0;
  if (_groups == null) {
    _groups = initDim(_3Lorg_glob3_mobile_generated_GLFeatureGroup_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$GLFeatureGroup, 4, 0);
    for (i0 = 0; i0 < 4; i0++) {
      groupName = getGroupName(i0);
      setCheck(_groups, i0, createGroup(groupName));
    }
  }
  for (i_0 = 0; i_0 < 4; i_0++) {
    _groups[i_0].apply_0(features, vs, state);
  }
}

function createGroup(name_0){
  switch (name_0.ordinal) {
    default:case 0:
      return null;
    case 1:
      return new GLFeatureNoGroup_0;
    case 2:
      return new GLFeatureCameraGroup_0;
    case 3:
      return new GLFeatureColorGroup_0;
    case 4:
      return new GLFeatureLightingGroup_0;
  }
}

function getGroupName(i_0){
  switch (i_0) {
    case 0:
      return $clinit_GLFeatureGroupName() , NO_GROUP;
    case 1:
      return $clinit_GLFeatureGroupName() , CAMERA_GROUP;
    case 2:
      return $clinit_GLFeatureGroupName() , COLOR_GROUP;
    case 3:
      return $clinit_GLFeatureGroupName() , LIGHTING_GROUP;
    default:return $clinit_GLFeatureGroupName() , UNRECOGNIZED_GROUP;
  }
}

defineSeed(487, 1, makeCastMap([Q$GLFeatureGroup]));
var _groups = null;
function GLFeatureCameraGroup_0(){
}

defineSeed(486, 487, makeCastMap([Q$GLFeatureGroup]), GLFeatureCameraGroup_0);
_.apply_0 = function apply_1(features, vs, state){
  var cf, f, featuresSize, group, i_0, id_0, modelTransformHolderBuilder, modelViewHolderBuilder, modelViewProvider, normalsAvailable, prov;
  modelViewHolderBuilder = new Matrix44DMultiplicationHolderBuilder_0;
  modelTransformHolderBuilder = new Matrix44DMultiplicationHolderBuilder_0;
  normalsAvailable = false;
  featuresSize = features._nFeatures;
  for (i_0 = 0; i_0 < featuresSize; i_0++) {
    f = $get_5(features, i_0);
    group = f._group;
    id_0 = f._id;
    if (group == ($clinit_GLFeatureGroupName() , CAMERA_GROUP)) {
      cf = dynamicCast(f, Q$GLCameraGroupFeature);
      id_0 == 5?$add_18(modelTransformHolderBuilder, cf._matrixHolder):$add_18(modelViewHolderBuilder, cf._matrixHolder);
    }
     else {
      group == LIGHTING_GROUP && id_0 == 12 && (normalsAvailable = true);
    }
  }
  if (modelTransformHolderBuilder._providers.size_0 > 0) {
    prov = $create_3(modelTransformHolderBuilder);
    $add_5(modelViewHolderBuilder._providers, prov);
    ++prov._referenceCounter;
    normalsAvailable && $addUniformValue(vs, ($clinit_GPUUniformKey() , MODEL), new GPUUniformValueMatrix4_0(prov));
    $_release(prov);
  }
  if (modelViewHolderBuilder._providers.size_0 > 0) {
    modelViewProvider = $create_3(modelViewHolderBuilder);
    $addUniformValue(vs, ($clinit_GPUUniformKey() , MODELVIEW), new GPUUniformValueMatrix4_0(modelViewProvider));
    $_release(modelViewProvider);
  }
  $dispose_11(modelViewHolderBuilder);
  $dispose_11(modelTransformHolderBuilder);
}
;
function GLFeatureColorGroup_0(){
}

defineSeed(488, 487, makeCastMap([Q$GLFeatureGroup]), GLFeatureColorGroup_0);
_.apply_0 = function apply_2(features, vs, state){
  var f, featuresSize, i_0, i0, pf, priority;
  featuresSize = features._nFeatures;
  priority = -1;
  for (i0 = 0; i0 < featuresSize; i0++) {
    f = $get_5(features, i0);
    if (f._group == ($clinit_GLFeatureGroupName() , COLOR_GROUP)) {
      pf = dynamicCast(f, Q$PriorityGLFeature);
      pf._priority > priority && pf._id != 14 && (priority = pf._priority);
    }
  }
  for (i_0 = 0; i_0 < featuresSize; i_0++) {
    f = $get_5(features, i_0);
    if (f._group == ($clinit_GLFeatureGroupName() , COLOR_GROUP)) {
      pf = dynamicCast(f, Q$PriorityGLFeature);
      if (pf._priority == priority) {
        pf.applyOnGlobalGLState(state);
        $combineWith(vs, f._values);
      }
    }
  }
}
;
function $clinit_GLFeatureGroupName(){
  $clinit_GLFeatureGroupName = nullMethod;
  UNRECOGNIZED_GROUP = new GLFeatureGroupName_0('UNRECOGNIZED_GROUP', 0, -1);
  NO_GROUP = new GLFeatureGroupName_0('NO_GROUP', 1, 0);
  CAMERA_GROUP = new GLFeatureGroupName_0('CAMERA_GROUP', 2, 1);
  COLOR_GROUP = new GLFeatureGroupName_0('COLOR_GROUP', 3, 2);
  LIGHTING_GROUP = new GLFeatureGroupName_0('LIGHTING_GROUP', 4, 3);
  $VALUES_5 = initValues(_3Lorg_glob3_mobile_generated_GLFeatureGroupName_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$GLFeatureGroupName, [UNRECOGNIZED_GROUP, NO_GROUP, CAMERA_GROUP, COLOR_GROUP, LIGHTING_GROUP]);
}

function GLFeatureGroupName_0(enum$name, enum$ordinal, value_0){
  Enum_0.call(this, enum$name, enum$ordinal);
  $put((!mappings_0 && !mappings_0 && (mappings_0 = new HashMap_0) , mappings_0), valueOf_0(value_0), this);
}

function values_6(){
  $clinit_GLFeatureGroupName();
  return $VALUES_5;
}

defineSeed(489, 70, makeCastMap([Q$Serializable, Q$Comparable, Q$Enum, Q$GLFeatureGroupName]), GLFeatureGroupName_0);
var $VALUES_5, CAMERA_GROUP, COLOR_GROUP, LIGHTING_GROUP, NO_GROUP, UNRECOGNIZED_GROUP, mappings_0;
function GLFeatureLightingGroup_0(){
}

defineSeed(490, 487, makeCastMap([Q$GLFeatureGroup]), GLFeatureLightingGroup_0);
_.apply_0 = function apply_3(features, vs, state){
  var f, i_0, i0, normalsAvailable, size_0;
  size_0 = features._nFeatures;
  normalsAvailable = false;
  for (i0 = 0; i0 < size_0; i0++) {
    f = $get_5(features, i0);
    if (f._id == 12) {
      normalsAvailable = true;
      break;
    }
  }
  if (normalsAvailable) {
    for (i_0 = 0; i_0 < size_0; i_0++) {
      f = $get_5(features, i_0);
      if (f._group == ($clinit_GLFeatureGroupName() , LIGHTING_GROUP)) {
        f.applyOnGlobalGLState(state);
        $combineWith(vs, f._values);
      }
    }
  }
}
;
function GLFeatureNoGroup_0(){
}

defineSeed(491, 487, makeCastMap([Q$GLFeatureGroup]), GLFeatureNoGroup_0);
_.apply_0 = function apply_4(features, vs, state){
  var f, i_0, size_0;
  size_0 = features._nFeatures;
  for (i_0 = 0; i_0 < size_0; i_0++) {
    f = $get_5(features, i_0);
    if (f._group == ($clinit_GLFeatureGroupName() , NO_GROUP)) {
      f.applyOnGlobalGLState(state);
      $combineWith(vs, f._values);
    }
  }
}
;
function $add_15(this$static, f){
  setCheck(this$static._features, this$static._nFeatures++, f);
  ++f._referenceCounter;
  this$static._nFeatures >= 20 && $logError(_instance_3, 'MAX_CONCURRENT_FEATURES_PER_GROUP REACHED', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
}

function $add_16(this$static, fs){
  var i_0, size_0;
  size_0 = fs._nFeatures;
  for (i_0 = 0; i_0 < size_0; i_0++) {
    $add_15(this$static, $get_5(fs, i_0));
  }
}

function $clearFeatures(this$static, g){
  var f, i_0, j;
  for (i_0 = 0; i_0 < this$static._nFeatures; i_0++) {
    f = this$static._features[i_0];
    if (f._group == g) {
      $_release(f);
      for (j = i_0; j < this$static._nFeatures; j++) {
        j + 1 >= 20?setCheck(this$static._features, j, null):setCheck(this$static._features, j, this$static._features[j + 1]);
      }
      --i_0;
      --this$static._nFeatures;
    }
  }
}

function $dispose_5(this$static){
  var i_0;
  for (i_0 = 0; i_0 < this$static._nFeatures; i_0++) {
    $_release(this$static._features[i_0]);
  }
}

function $get_5(this$static, i_0){
  if (this$static._nFeatures < i_0) {
    return null;
  }
  return this$static._features[i_0];
}

function GLFeatureSet_0(){
  var i_0;
  this._features = initDim(_3Lorg_glob3_mobile_generated_GLFeature_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$GLFeature, 20, 0);
  this._nFeatures = 0;
  for (i_0 = 0; i_0 < 20; i_0++) {
    setCheck(this._features, i_0, null);
  }
}

defineSeed(492, 1, {}, GLFeatureSet_0);
_._nFeatures = 0;
function init_7(ngl){
  _rgba = ngl._gl.RGBA;
}

var _rgba = 0;
function $applyChanges(this$static, gl, currentState){
  var i_0, nativeGL, gl_0;
  nativeGL = gl._nativeGL;
  if (this$static._depthTest != currentState._depthTest) {
    this$static._depthTest?$enable(nativeGL, _depthTest):$disable(nativeGL, _depthTest);
    currentState._depthTest = this$static._depthTest;
  }
  if (this$static._blend != currentState._blend) {
    this$static._blend?$enable(nativeGL, _blend):$disable(nativeGL, _blend);
    currentState._blend = this$static._blend;
  }
  if (this$static._cullFace != currentState._cullFace) {
    currentState._cullFace = this$static._cullFace;
    if (this$static._cullFace) {
      $enable(nativeGL, _cullFace);
      if (this$static._culledFace != currentState._culledFace) {
        $cullFace(nativeGL, this$static._culledFace);
        currentState._culledFace = this$static._culledFace;
      }
    }
     else {
      $disable(nativeGL, _cullFace);
    }
  }
  if (this$static._lineWidth != currentState._lineWidth) {
    $lineWidth(nativeGL, this$static._lineWidth);
    currentState._lineWidth = this$static._lineWidth;
  }
  if (this$static._polygonOffsetFill) {
    $enable(nativeGL, _polygonOffsetFill);
    $polygonOffset(nativeGL, this$static._polygonOffsetFactor, this$static._polygonOffsetUnits);
    currentState._polygonOffsetUnits = this$static._polygonOffsetUnits;
    currentState._polygonOffsetFactor = this$static._polygonOffsetFactor;
  }
   else {
    $disable(nativeGL, _polygonOffsetFill);
  }
  if (this$static._blendDFactor != currentState._blendDFactor || this$static._blendSFactor != currentState._blendSFactor) {
    $blendFunc(nativeGL, this$static._blendSFactor, this$static._blendDFactor);
    currentState._blendDFactor = this$static._blendDFactor;
    currentState._blendSFactor = this$static._blendSFactor;
  }
  for (i_0 = 0; i_0 < 4; i_0++) {
    if (this$static._boundTextureId[i_0]) {
      if (!currentState._boundTextureId[i_0] || !$isEquals_4(this$static._boundTextureId[i_0], currentState._boundTextureId[i_0])) {
        gl_0 = nativeGL._gl;
        gl_0.activeTexture(gl_0.TEXTURE0 + i_0);
        $bindTexture_0(nativeGL, _texture2D, this$static._boundTextureId[i_0]);
        setCheck(currentState._boundTextureId, i_0, this$static._boundTextureId[i_0]);
      }
    }
  }
  if (this$static._pixelStoreIAlignmentUnpack != -1 && this$static._pixelStoreIAlignmentUnpack != currentState._pixelStoreIAlignmentUnpack) {
    $pixelStorei(nativeGL, _unpack, this$static._pixelStoreIAlignmentUnpack);
    currentState._pixelStoreIAlignmentUnpack = this$static._pixelStoreIAlignmentUnpack;
  }
  if (this$static._pixelStoreIAlignmentUnpack != -1 && this$static._pixelStoreIAlignmentUnpack != currentState._pixelStoreIAlignmentUnpack) {
    $pixelStorei(nativeGL, _unpack, this$static._pixelStoreIAlignmentUnpack);
    currentState._pixelStoreIAlignmentUnpack = this$static._pixelStoreIAlignmentUnpack;
  }
  if (this$static._clearColorR != currentState._clearColorR || this$static._clearColorG != currentState._clearColorG || this$static._clearColorB != currentState._clearColorB || this$static._clearColorA != currentState._clearColorA) {
    $clearColor(nativeGL, this$static._clearColorR, this$static._clearColorG, this$static._clearColorB, this$static._clearColorA);
    currentState._clearColorR = this$static._clearColorR;
    currentState._clearColorG = this$static._clearColorG;
    currentState._clearColorB = this$static._clearColorB;
    currentState._clearColorA = this$static._clearColorA;
  }
}

function $bindTexture(this$static, target, textureId){
  if (target > 4) {
    $logError(_instance_3, 'WRONG TARGET FOR TEXTURE', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  setCheck(this$static._boundTextureId, target, textureId);
}

function $enableCullFace(this$static, face_0){
  this$static._cullFace = true;
  this$static._culledFace = face_0;
}

function $enablePolygonOffsetFill(this$static, factor, units){
  this$static._polygonOffsetFill = true;
  this$static._polygonOffsetFactor = factor;
  this$static._polygonOffsetUnits = units;
}

function $onTextureDelete(this$static, textureId){
  var i_0;
  for (i_0 = 0; i_0 < 4; i_0++) {
    this$static._boundTextureId[i_0] == textureId && setCheck(this$static._boundTextureId, i_0, null);
  }
}

function $setBlendFactors(this$static, sFactor, dFactor){
  this$static._blendSFactor = sFactor;
  this$static._blendDFactor = dFactor;
}

function $setClearColor(this$static, color_0){
  this$static._clearColorR = color_0._red;
  this$static._clearColorG = color_0._green;
  this$static._clearColorB = color_0._blue;
  this$static._clearColorA = color_0._alpha;
}

function $setLineWidth(this$static, lineWidth){
  this$static._lineWidth = lineWidth;
}

function GLGlobalState_0(){
  var i_0;
  this._boundTextureId = initDim(_3Lorg_glob3_mobile_generated_IGLTextureId_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$IGLTextureId, 4, 0);
  this._depthTest = false;
  this._blend = false;
  this._cullFace = false;
  this._culledFace = _back;
  this._lineWidth = 1;
  this._polygonOffsetFactor = 0;
  this._polygonOffsetUnits = 0;
  this._polygonOffsetFill = false;
  this._blendDFactor = _zero;
  this._blendSFactor = _one;
  this._pixelStoreIAlignmentUnpack = -1;
  this._clearColorR = 0;
  this._clearColorG = 0;
  this._clearColorB = 0;
  this._clearColorA = 0;
  _initializationAvailable || $logError(_instance_3, 'GLGlobalState creation before it is available.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  for (i_0 = 0; i_0 < 4; i_0++) {
    setCheck(this._boundTextureId, i_0, null);
  }
}

defineSeed(494, 1, {}, GLGlobalState_0);
_._blend = false;
_._blendDFactor = 0;
_._blendSFactor = 0;
_._clearColorA = 0;
_._clearColorB = 0;
_._clearColorG = 0;
_._clearColorR = 0;
_._cullFace = false;
_._culledFace = 0;
_._depthTest = false;
_._lineWidth = 0;
_._pixelStoreIAlignmentUnpack = 0;
_._polygonOffsetFactor = 0;
_._polygonOffsetFill = false;
_._polygonOffsetUnits = 0;
var _initializationAvailable = false;
function init_8(ngl){
  _triangles = ngl._gl.TRIANGLES;
  _triangleStrip = ngl._gl.TRIANGLE_STRIP;
  ngl._gl.TRIANGLE_FAN;
  ngl._gl.LINES;
  _lineStrip = ngl._gl.LINE_STRIP;
  ngl._gl.LINE_LOOP;
  _points = ngl._gl.POINTS;
}

var _lineStrip = 0, _points = 0, _triangleStrip = 0, _triangles = 0;
function init_9(ngl){
  _polygonOffsetFill = ngl._gl.POLYGON_OFFSET_FILL;
  _depthTest = ngl._gl.DEPTH_TEST;
  _blend = ngl._gl.BLEND;
  _cullFace = ngl._gl.CULL_FACE;
}

var _blend = 0, _cullFace = 0, _depthTest = 0, _polygonOffsetFill = 0;
function $addGLFeature(this$static, f, mustRetain){
  $add_15(this$static._features, f);
  mustRetain || $_release(f);
  $hasChangedStructure(this$static);
}

function $applyOnGPU(this$static, gl, progManager){
  var accumulatedFeatures, attributesCode, uniformsCode;
  if (!this$static._valuesSet && !this$static._globalState) {
    this$static._valuesSet = new GPUVariableValueSet_0;
    this$static._globalState = new GLGlobalState_0;
    accumulatedFeatures = $getAccumulatedFeatures(this$static);
    applyToAllGroups(accumulatedFeatures, this$static._valuesSet, this$static._globalState);
    uniformsCode = $getUniformsCode(this$static._valuesSet);
    attributesCode = $getAttributesCode(this$static._valuesSet);
    this$static._linkedProgram = $getProgram(progManager, gl, uniformsCode, attributesCode);
  }
  if (!this$static._valuesSet || !this$static._globalState) {
    $logError(_instance_3, 'GLState logic error.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  if (this$static._linkedProgram) {
    $useProgram(gl, this$static._linkedProgram);
    $applyValuesToProgram(this$static._valuesSet, this$static._linkedProgram);
    $applyChanges(this$static._globalState, gl, gl._currentGLGlobalState);
    $applyChanges_1(this$static._linkedProgram, gl);
  }
   else {
    $logError(_instance_3, 'No GPUProgram found.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  }
}

function $clearGLFeatureGroup(this$static, g){
  $clearFeatures(this$static._features, g);
  $hasChangedStructure(this$static);
}

function $getAccumulatedFeatures(this$static){
  var parents;
  if (!this$static._accumulatedFeatures) {
    this$static._accumulatedFeatures = new GLFeatureSet_0;
    if (this$static._parentGLState) {
      parents = $getAccumulatedFeatures(this$static._parentGLState);
      !!parents && $add_16(this$static._accumulatedFeatures, parents);
    }
    $add_16(this$static._accumulatedFeatures, this$static._features);
  }
  return this$static._accumulatedFeatures;
}

function $getGLFeature(this$static, id_0){
  var f, i_0, size_0;
  size_0 = this$static._features._nFeatures;
  for (i_0 = 0; i_0 < size_0; i_0++) {
    f = $get_5(this$static._features, i_0);
    if (f._id == id_0) {
      return f;
    }
  }
  return null;
}

function $hasChangedStructure(this$static){
  ++this$static._timestamp;
  !!this$static._valuesSet && $dispose_6(this$static._valuesSet);
  this$static._valuesSet = null;
  this$static._globalState = null;
  if (this$static._linkedProgram) {
    --this$static._linkedProgram._nReferences;
    this$static._linkedProgram = null;
  }
  !!this$static._accumulatedFeatures && $dispose_5(this$static._accumulatedFeatures);
  this$static._accumulatedFeatures = null;
}

function $setParent_1(this$static, parent_0){
  var parentsTimestamp;
  if (!parent_0) {
    if (this$static._parentGLState) {
      this$static._parentGLState = null;
      this$static._parentsTimestamp = -1;
      $hasChangedStructure(this$static);
    }
  }
   else {
    parentsTimestamp = parent_0._timestamp;
    if (parent_0 != this$static._parentGLState || this$static._parentsTimestamp != parentsTimestamp) {
      if (this$static._parentGLState != parent_0) {
        !!this$static._parentGLState && $_release(this$static._parentGLState);
        this$static._parentGLState = parent_0;
        ++this$static._parentGLState._referenceCounter;
      }
      this$static._parentsTimestamp = parentsTimestamp;
      $hasChangedStructure(this$static);
    }
  }
}

function GLState_0(){
  RCObject_0.call(this);
  this._parentGLState = null;
  this._linkedProgram = null;
  this._parentsTimestamp = -1;
  this._timestamp = 0;
  this._valuesSet = null;
  this._globalState = null;
  this._accumulatedFeatures = null;
  this._features = new GLFeatureSet_0;
}

defineSeed(497, 413, makeCastMap([Q$RCObject]), GLState_0);
_.dispose = function dispose_37(){
  !!this._features && $dispose_5(this._features);
  !!this._accumulatedFeatures && $dispose_5(this._accumulatedFeatures);
  !!this._valuesSet && $dispose_6(this._valuesSet);
  !!this._parentGLState && $_release(this._parentGLState);
  !!this._linkedProgram && --this._linkedProgram._nReferences;
}
;
_._parentsTimestamp = 0;
_._timestamp = 0;
function init_10(ngl){
  _minFilter = ngl._gl.TEXTURE_MIN_FILTER;
  _magFilter = ngl._gl.TEXTURE_MAG_FILTER;
  _wrapS = ngl._gl.TEXTURE_WRAP_S;
  _wrapT = ngl._gl.TEXTURE_WRAP_T;
}

var _magFilter = 0, _minFilter = 0, _wrapS = 0, _wrapT = 0;
function init_11(ngl){
  ngl._gl.NEAREST;
  _linear = ngl._gl.LINEAR;
  ngl._gl.NEAREST_MIPMAP_NEAREST;
  ngl._gl.NEAREST_MIPMAP_LINEAR;
  _linearMipmapNearest = ngl._gl.LINEAR_MIPMAP_NEAREST;
  ngl._gl.LINEAR_MIPMAP_LINEAR;
  _clampToEdge = ngl._gl.CLAMP_TO_EDGE;
}

var _clampToEdge = 0, _linear = 0, _linearMipmapNearest = 0;
function init_12(ngl){
  _texture2D = ngl._gl.TEXTURE_2D;
}

var _texture2D = 0;
function init_13(ngl){
  _float = ngl._gl.FLOAT;
  ngl._gl.UNSIGNED_BYTE;
  ngl._gl.UNSIGNED_INT;
  _int = ngl._gl.INT;
  _vec2Float = ngl._gl.FLOAT_VEC2;
  _vec3Float = ngl._gl.FLOAT_VEC3;
  _vec4Float = ngl._gl.FLOAT_VEC4;
  _bool = ngl._gl.BOOL;
  _matrix4Float = ngl._gl.FLOAT_MAT4;
}

var _bool = 0, _float = 0, _int = 0, _matrix4Float = 0, _vec2Float = 0, _vec3Float = 0, _vec4Float = 0;
function init_14(ngl){
  ngl._gl.VIEWPORT;
  _activeAttributes = ngl._gl.ACTIVE_ATTRIBUTES;
  _activeUniforms = ngl._gl.ACTIVE_UNIFORMS;
}

var _activeAttributes = 0, _activeUniforms = 0;
function GPUVariable_0(name_0){
  this._name = name_0;
}

function getAttributeCode(a){
  var index_0;
  if (a == ($clinit_GPUAttributeKey() , UNRECOGNIZED_ATTRIBUTE)) {
    return 0;
  }
  index_0 = a.intValue;
  return 1 << index_0;
}

function getAttributeKey(name_0){
  if (compareTo_6(name_0, 'aPosition') == 0) {
    return $clinit_GPUAttributeKey() , POSITION;
  }
  if (compareTo_6(name_0, 'aColor') == 0) {
    return $clinit_GPUAttributeKey() , COLOR;
  }
  if (compareTo_6(name_0, 'aTextureCoord') == 0) {
    return $clinit_GPUAttributeKey() , TEXTURE_COORDS;
  }
  if (compareTo_6(name_0, 'aTextureCoord2') == 0) {
    return $clinit_GPUAttributeKey() , TEXTURE_COORDS_2;
  }
  if (compareTo_6(name_0, 'aTextureCoord3') == 0) {
    return $clinit_GPUAttributeKey() , TEXTURE_COORDS_3;
  }
  if (compareTo_6(name_0, 'aNormal') == 0) {
    return $clinit_GPUAttributeKey() , NORMAL;
  }
  if (compareTo_6(name_0, 'aPosition2D') == 0) {
    return $clinit_GPUAttributeKey() , POSITION_2D;
  }
  return $clinit_GPUAttributeKey() , UNRECOGNIZED_ATTRIBUTE;
}

function getUniformCode(u){
  var index_0;
  if (u == ($clinit_GPUUniformKey() , UNRECOGNIZED_UNIFORM)) {
    return 0;
  }
  index_0 = u.intValue;
  return 1 << index_0;
}

function getUniformKey(name_0){
  if (compareTo_6(name_0, 'uFlatColor') == 0) {
    return $clinit_GPUUniformKey() , FLAT_COLOR;
  }
  if (compareTo_6(name_0, 'uModelview') == 0) {
    return $clinit_GPUUniformKey() , MODELVIEW;
  }
  if (compareTo_6(name_0, 'uTextureExtent') == 0) {
    return $clinit_GPUUniformKey() , TEXTURE_EXTENT;
  }
  if (compareTo_6(name_0, 'uViewPortExtent') == 0) {
    return $clinit_GPUUniformKey() , VIEWPORT_EXTENT;
  }
  if (compareTo_6(name_0, 'uTranslationTexCoord') == 0) {
    return $clinit_GPUUniformKey() , TRANSLATION_TEXTURE_COORDS;
  }
  if (compareTo_6(name_0, 'uScaleTexCoord') == 0) {
    return $clinit_GPUUniformKey() , SCALE_TEXTURE_COORDS;
  }
  if (compareTo_6(name_0, 'uPointSize') == 0) {
    return $clinit_GPUUniformKey() , POINT_SIZE;
  }
  if (compareTo_6(name_0, 'uAmbientLightColor') == 0) {
    return $clinit_GPUUniformKey() , AMBIENT_LIGHT_COLOR;
  }
  if (compareTo_6(name_0, 'uDiffuseLightDirection') == 0) {
    return $clinit_GPUUniformKey() , DIFFUSE_LIGHT_DIRECTION;
  }
  if (compareTo_6(name_0, 'uDiffuseLightColor') == 0) {
    return $clinit_GPUUniformKey() , DIFFUSE_LIGHT_COLOR;
  }
  if (compareTo_6(name_0, 'uProjection') == 0) {
    return $clinit_GPUUniformKey() , PROJECTION;
  }
  if (compareTo_6(name_0, 'uCameraModel') == 0) {
    return $clinit_GPUUniformKey() , CAMERA_MODEL;
  }
  if (compareTo_6(name_0, 'uModel') == 0) {
    return $clinit_GPUUniformKey() , MODEL;
  }
  if (compareTo_6(name_0, 'uBillboardPosition') == 0) {
    return $clinit_GPUUniformKey() , BILLBOARD_POSITION;
  }
  if (compareTo_6(name_0, 'uRotationCenterTexCoord') == 0) {
    return $clinit_GPUUniformKey() , ROTATION_CENTER_TEXTURE_COORDS;
  }
  if (compareTo_6(name_0, 'uRotationAngleTexCoord') == 0) {
    return $clinit_GPUUniformKey() , ROTATION_ANGLE_TEXTURE_COORDS;
  }
  if (compareTo_6(name_0, 'Sampler') == 0) {
    return $clinit_GPUUniformKey() , SAMPLER;
  }
  if (compareTo_6(name_0, 'Sampler2') == 0) {
    return $clinit_GPUUniformKey() , SAMPLER2;
  }
  if (compareTo_6(name_0, 'Sampler3') == 0) {
    return $clinit_GPUUniformKey() , SAMPLER3;
  }
  if (compareTo_6(name_0, 'uTranslation2D') == 0) {
    return $clinit_GPUUniformKey() , TRANSLATION_2D;
  }
  if (compareTo_6(name_0, 'uBillboardAnchor') == 0) {
    return $clinit_GPUUniformKey() , BILLBOARD_ANCHOR;
  }
  return $clinit_GPUUniformKey() , UNRECOGNIZED_UNIFORM;
}

function hasAttribute(code_0, a){
  var index_0;
  if (a == ($clinit_GPUAttributeKey() , UNRECOGNIZED_ATTRIBUTE)) {
    return false;
  }
  index_0 = a.intValue;
  return (~~code_0 >> index_0 & 1) != 0;
}

function hasUniform(code_0, u){
  var index_0;
  if (u == ($clinit_GPUUniformKey() , UNRECOGNIZED_UNIFORM)) {
    return false;
  }
  index_0 = u.intValue;
  return (~~code_0 >> index_0 & 1) != 0;
}

defineSeed(504, 1, makeCastMap([Q$GPUVariable]));
function $applyChanges_0(this$static, gl){
  if (!this$static._value) {
    this$static._enabled && $logError(_instance_3, 'Attribute ' + this$static._name + ' was not set but it is enabled.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  }
   else {
    if (this$static._dirty) {
      if (this$static._value._enabled) {
        if (!this$static._enabled) {
          $enableVertexAttribArray(gl, this$static._id);
          this$static._enabled = true;
        }
        this$static._value.setAttribute_0(gl, this$static._id);
      }
       else {
        if (this$static._enabled) {
          $disableVertexAttribArray(gl, this$static._id);
          this$static._enabled = false;
        }
      }
      this$static._dirty = false;
    }
  }
}

function $set_0(this$static, v){
  if (v != this$static._value) {
    if (v._enabled && this$static._type != v._type) {
      $logError(_instance_3, 'Attempting to set attribute ' + this$static._name + 'with invalid value type.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
      return;
    }
    if (!this$static._value || !this$static._value.isEquals(v)) {
      this$static._dirty = true;
      !!this$static._value && $_release(this$static._value);
      this$static._value = v;
      ++this$static._value._referenceCounter;
    }
  }
}

function $unset(this$static, gl){
  if (this$static._value) {
    $_release(this$static._value);
    this$static._value = null;
  }
  this$static._enabled = false;
  this$static._dirty = false;
  $disableVertexAttribArray(gl, this$static._id);
}

function GPUAttribute_0(name_0, id_0, type_0){
  GPUVariable_0.call(this, name_0, $clinit_GPUVariableType());
  this._id = id_0;
  this._dirty = false;
  this._value = null;
  this._type = type_0;
  this._enabled = false;
  this._key = getAttributeKey(name_0);
}

defineSeed(503, 504, makeCastMap([Q$GPUAttribute, Q$GPUVariable]));
_._dirty = false;
_._enabled = false;
_._id = 0;
_._type = 0;
function $clinit_GPUAttributeKey(){
  $clinit_GPUAttributeKey = nullMethod;
  UNRECOGNIZED_ATTRIBUTE = new GPUAttributeKey_0('UNRECOGNIZED_ATTRIBUTE', 0, -1);
  POSITION = new GPUAttributeKey_0('POSITION', 1, 0);
  TEXTURE_COORDS = new GPUAttributeKey_0('TEXTURE_COORDS', 2, 1);
  COLOR = new GPUAttributeKey_0('COLOR', 3, 2);
  NORMAL = new GPUAttributeKey_0('NORMAL', 4, 3);
  TEXTURE_COORDS_2 = new GPUAttributeKey_0('TEXTURE_COORDS_2', 5, 4);
  TEXTURE_COORDS_3 = new GPUAttributeKey_0('TEXTURE_COORDS_3', 6, 5);
  POSITION_2D = new GPUAttributeKey_0('POSITION_2D', 7, 6);
  $VALUES_6 = initValues(_3Lorg_glob3_mobile_generated_GPUAttributeKey_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$GPUAttributeKey, [UNRECOGNIZED_ATTRIBUTE, POSITION, TEXTURE_COORDS, COLOR, NORMAL, TEXTURE_COORDS_2, TEXTURE_COORDS_3, POSITION_2D]);
}

function GPUAttributeKey_0(enum$name, enum$ordinal, value_0){
  Enum_0.call(this, enum$name, enum$ordinal);
  this.intValue = value_0;
  $put((!mappings_1 && !mappings_1 && (mappings_1 = new HashMap_0) , mappings_1), valueOf_0(value_0), this);
}

function values_7(){
  $clinit_GPUAttributeKey();
  return $VALUES_6;
}

defineSeed(505, 70, makeCastMap([Q$Serializable, Q$Comparable, Q$Enum, Q$GPUAttributeKey]), GPUAttributeKey_0);
_.intValue = 0;
var $VALUES_6, COLOR, NORMAL, POSITION, POSITION_2D, TEXTURE_COORDS, TEXTURE_COORDS_2, TEXTURE_COORDS_3, UNRECOGNIZED_ATTRIBUTE, mappings_1;
function GPUAttributeValue_0(type_0, attributeSize, arrayElementSize){
  RCObject_0.call(this);
  this._enabled = true;
  this._type = type_0;
  this._attributeSize = attributeSize;
  this._index = 0;
  this._stride = 0;
  this._normalized = false;
  this._arrayElementSize = arrayElementSize;
}

defineSeed(506, 413, makeCastMap([Q$GPUAttributeValue, Q$RCObject]));
_.dispose = function dispose_38(){
  $dispose_1(this);
}
;
_.toString$ = function toString_43(){
  return this.description_0();
}
;
_._arrayElementSize = 0;
_._attributeSize = 0;
_._enabled = false;
_._index = 0;
_._normalized = false;
_._stride = 0;
_._type = 0;
function GPUAttributeValueVecFloat_0(buffer, attributeSize, arrayElementSize){
  GPUAttributeValue_0.call(this, _float, attributeSize, arrayElementSize);
  this._buffer = buffer;
  this._timestamp = buffer._timestamp;
  this._id = buffer._id;
}

defineSeed(508, 506, makeCastMap([Q$GPUAttributeValue, Q$GPUAttributeValueVecFloat, Q$RCObject]));
_.description_0 = function description_0(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'Attribute Value Float.';
  isb._string += ' ArrayElementSize:';
  $addInt(isb, this._arrayElementSize);
  isb._string += ' AttributeSize:';
  $addInt(isb, this._attributeSize);
  isb._string += ' Index:';
  $addInt(isb, this._index);
  isb._string += ' Stride:';
  $addInt(isb, this._stride);
  isb._string += ' Normalized:';
  $addBool(isb, this._normalized);
  s = isb._string;
  return s;
}
;
_.dispose = function dispose_39(){
  $dispose_1(this);
}
;
_.isEquals = function isEquals(v){
  var equal, vecV;
  if (!v._enabled) {
    return false;
  }
  vecV = dynamicCast(v, Q$GPUAttributeValueVecFloat);
  equal = eq(this._id, vecV._buffer._id) && this._timestamp == vecV._timestamp && this._type == v._type && this._attributeSize == v._attributeSize && this._stride == v._stride && this._normalized == v._normalized;
  return equal;
}
;
_.setAttribute_0 = function setAttribute(gl, id_0){
  this._index != 0 && $logError(_instance_3, 'INDEX NO 0', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  $vertexAttribPointer(gl, id_0, this._arrayElementSize, this._normalized, this._stride, this._buffer);
}
;
_._id = P0_longLit;
_._timestamp = 0;
function GPUAttributeValueVec2Float_0(buffer){
  GPUAttributeValueVecFloat_0.call(this, buffer, 2, 2);
}

defineSeed(507, 508, makeCastMap([Q$GPUAttributeValue, Q$GPUAttributeValueVecFloat, Q$RCObject]), GPUAttributeValueVec2Float_0);
_.dispose = function dispose_40(){
  $dispose_1(this);
}
;
function GPUAttributeValueVec3Float_0(buffer){
  GPUAttributeValueVecFloat_0.call(this, buffer, 3, 3);
}

defineSeed(509, 508, makeCastMap([Q$GPUAttributeValue, Q$GPUAttributeValueVecFloat, Q$RCObject]), GPUAttributeValueVec3Float_0);
_.dispose = function dispose_41(){
  $dispose_1(this);
}
;
function GPUAttributeValueVec4Float_0(buffer, arrayElementSize){
  GPUAttributeValueVecFloat_0.call(this, buffer, 4, arrayElementSize);
}

defineSeed(510, 508, makeCastMap([Q$GPUAttributeValue, Q$GPUAttributeValueVecFloat, Q$RCObject]), GPUAttributeValueVec4Float_0);
_.dispose = function dispose_42(){
  $dispose_1(this);
}
;
function GPUAttributeVec2Float_0(name_0, id_0){
  GPUAttribute_0.call(this, name_0, id_0, _float);
}

defineSeed(511, 503, makeCastMap([Q$GPUAttribute, Q$GPUVariable]), GPUAttributeVec2Float_0);
function GPUAttributeVec3Float_0(name_0, id_0){
  GPUAttribute_0.call(this, name_0, id_0, _float);
}

defineSeed(512, 503, makeCastMap([Q$GPUAttribute, Q$GPUVariable]), GPUAttributeVec3Float_0);
function GPUAttributeVec4Float_0(name_0, id_0){
  GPUAttribute_0.call(this, name_0, id_0, _float);
}

defineSeed(513, 503, makeCastMap([Q$GPUAttribute, Q$GPUVariable]), GPUAttributeVec4Float_0);
function $applyChanges_1(this$static, gl){
  var attribute, i_0, i0, uniform;
  for (i0 = 0; i0 < this$static._nUniforms; i0++) {
    uniform = this$static._createdUniforms[i0];
    !!uniform && $applyChanges_2(uniform, gl);
  }
  for (i_0 = 0; i_0 < this$static._nAttributes; i_0++) {
    attribute = this$static._createdAttributes[i_0];
    !!attribute && $applyChanges_0(attribute, gl);
  }
}

function $compileShader(this$static, gl, shader, source){
  var result;
  result = $compileShader_0(gl._nativeGL, shader, source);
  result?$attachShader(gl, this$static._programID, shader):$logError(_instance_3, 'GPUProgram: Problem encountered while compiling shader.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  return result;
}

function $getVariables(this$static, gl){
  var a, code_0, counter, i_0, i0, i1, u;
  for (i0 = 0; i0 < 32; i0++) {
    setCheck(this$static._uniforms, i0, null);
    setCheck(this$static._attributes, i0, null);
  }
  this$static._uniformsCode = 0;
  this$static._nUniforms = $getProgramiv(gl, this$static, _activeUniforms);
  counter = 0;
  this$static._createdUniforms = initDim(_3Lorg_glob3_mobile_generated_GPUUniform_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$GPUUniform, this$static._nUniforms, 0);
  for (i1 = 0; i1 < this$static._nUniforms; i1++) {
    u = $getActiveUniform(gl._nativeGL, this$static, i1);
    if (u) {
      setCheck(this$static._uniforms, u._key.intValue, u);
      code_0 = getUniformCode(u._key);
      this$static._uniformsCode = this$static._uniformsCode | code_0;
    }
    setCheck(this$static._createdUniforms, counter++, u);
  }
  this$static._attributesCode = 0;
  this$static._nAttributes = $getProgramiv(gl, this$static, _activeAttributes);
  counter = 0;
  this$static._createdAttributes = initDim(_3Lorg_glob3_mobile_generated_GPUAttribute_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$GPUAttribute, this$static._nAttributes, 0);
  for (i_0 = 0; i_0 < this$static._nAttributes; i_0++) {
    a = $getActiveAttribute(gl._nativeGL, this$static, i_0);
    if (a) {
      setCheck(this$static._attributes, a._key.intValue, a);
      code_0 = getAttributeCode(a._key);
      this$static._attributesCode = this$static._attributesCode | code_0;
    }
    setCheck(this$static._createdAttributes, counter++, a);
  }
}

function $onUnused(this$static, gl){
  var i_0, i0;
  for (i0 = 0; i0 < this$static._nUniforms; i0++) {
    !!this$static._createdUniforms[i0] && $unset_0(this$static._createdUniforms[i0]);
  }
  for (i_0 = 0; i_0 < this$static._nAttributes; i_0++) {
    !!this$static._createdAttributes[i_0] && $unset(this$static._createdAttributes[i_0], gl);
  }
}

function $setGPUAttributeValue(this$static, key, v){
  var a;
  a = this$static._attributes[key];
  if (!a) {
    $logError(_instance_3, 'Attribute [key=%d] not found in program %s', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(key), this$static._name]));
    return;
  }
  $set_0(a, v);
}

function $setGPUUniformValue(this$static, key, v){
  var u;
  u = this$static._uniforms[key];
  if (!u) {
    $logError(_instance_3, 'Uniform [key=%d] not found in program %s', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(key), this$static._name]));
    return;
  }
  $set_1(u, v);
}

function GPUProgram_0(){
  this._uniforms = initDim(_3Lorg_glob3_mobile_generated_GPUUniform_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$GPUUniform, 32, 0);
  this._attributes = initDim(_3Lorg_glob3_mobile_generated_GPUAttribute_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$GPUAttribute, 32, 0);
  this._createdAttributes = null;
  this._createdUniforms = null;
  this._nUniforms = 0;
  this._nAttributes = 0;
  this._uniformsCode = 0;
  this._attributesCode = 0;
  this._nReferences = 0;
}

function createProgram(gl, name_0, vertexSource, fragmentSource){
  var fragmentShader, p, vertexShader;
  p = new GPUProgram_0;
  p._name = name_0;
  p._programID = $createProgram(gl._nativeGL);
  vertexShader = $createShader(gl, ($clinit_ShaderType() , VERTEX_SHADER));
  if (!$compileShader(p, gl, vertexShader, vertexSource)) {
    $logError(_instance_3, 'GPUProgram: ERROR compiling vertex shader :\n %s\n', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [vertexSource]));
    $printShaderInfoLog(gl._nativeGL, vertexShader);
    $deleteShader(gl._nativeGL, vertexShader) || $logError(_instance_3, 'GPUProgram: Problem encountered while deleting shader.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    $deleteProgram(gl, p) || $logError(_instance_3, 'GPUProgram: Problem encountered while deleting program.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return null;
  }
  fragmentShader = $createShader(gl, FRAGMENT_SHADER);
  if (!$compileShader(p, gl, fragmentShader, fragmentSource)) {
    $logError(_instance_3, 'GPUProgram: ERROR compiling fragment shader :\n %s\n', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [fragmentSource]));
    $printShaderInfoLog(gl._nativeGL, fragmentShader);
    $deleteShader(gl._nativeGL, fragmentShader) || $logError(_instance_3, 'GPUProgram: Problem encountered while deleting shader.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    $deleteProgram(gl, p) || $logError(_instance_3, 'GPUProgram: Problem encountered while deleting program.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return null;
  }
  if (!$linkProgram(gl, p._programID)) {
    $logError(_instance_3, 'GPUProgram: ERROR linking graphic program\n', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    $deleteShader(gl._nativeGL, vertexShader) || $logError(_instance_3, 'GPUProgram: Problem encountered while deleting shader.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    $deleteShader(gl._nativeGL, fragmentShader) || $logError(_instance_3, 'GPUProgram: Problem encountered while deleting shader.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    $deleteProgram(gl, p) || $logError(_instance_3, 'GPUProgram: Problem encountered while deleting program.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    $logError(_instance_3, 'GPUProgram: ERROR linking graphic program', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return null;
  }
  $deleteShader(gl._nativeGL, vertexShader) || $logError(_instance_3, 'GPUProgram: Problem encountered while deleting shader.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  $deleteShader(gl._nativeGL, fragmentShader) || $logError(_instance_3, 'GPUProgram: Problem encountered while deleting shader.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  $getVariables(p, gl);
  $getError(gl._nativeGL) != _noError && $logError(_instance_3, 'Error while compiling program', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  return p;
}

defineSeed(514, 1, makeCastMap([Q$GPUProgram]), GPUProgram_0);
_.getProgramID = function getProgramID(){
  return this._programID;
}
;
_._attributesCode = 0;
_._nAttributes = 0;
_._nReferences = 0;
_._nUniforms = 0;
_._programID = 0;
_._uniformsCode = 0;
function $compileProgramWithName(this$static, gl, name_0){
  var prog, ps;
  prog = dynamicCast($get_1(this$static._programs, name_0), Q$GPUProgram);
  if (!prog) {
    ps = $get_3(this$static._factory, name_0);
    if (ps) {
      prog = createProgram(gl, ps._name, ps._vertexSource, ps._fragmentSource);
      if (!prog) {
        $logError(_instance_3, 'Problem at creating program named %s.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [name_0]));
        return null;
      }
      $put(this$static._programs, name_0, prog);
    }
     else {
      $logError(_instance_3, 'No shader sources for program named %s.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [name_0]));
    }
  }
  return prog;
}

function $getCompiledProgram(this$static, uniformsCode, attributesCode){
  var p, p$iterator;
  for (p$iterator = $iterator_0($values(this$static._programs)); $hasNext(p$iterator.val$outerIter.iter);) {
    p = dynamicCast($next_3(p$iterator), Q$GPUProgram);
    if (p._uniformsCode == uniformsCode && p._attributesCode == attributesCode) {
      return p;
    }
  }
  return null;
}

function $getNewProgram(this$static, gl, uniformsCode, attributesCode){
  var billboard, color_0, flatColor, hasLight, hasTexture2, is2D, rotationTC, texture, transformTC;
  texture = hasAttribute(attributesCode, ($clinit_GPUAttributeKey() , TEXTURE_COORDS));
  flatColor = hasUniform(uniformsCode, ($clinit_GPUUniformKey() , FLAT_COLOR));
  billboard = hasUniform(uniformsCode, VIEWPORT_EXTENT);
  color_0 = hasAttribute(attributesCode, COLOR);
  transformTC = hasUniform(uniformsCode, TRANSLATION_TEXTURE_COORDS) || hasUniform(uniformsCode, SCALE_TEXTURE_COORDS);
  rotationTC = hasUniform(uniformsCode, ROTATION_ANGLE_TEXTURE_COORDS);
  hasLight = hasUniform(uniformsCode, AMBIENT_LIGHT_COLOR);
  hasTexture2 = hasUniform(uniformsCode, SAMPLER2);
  is2D = hasAttribute(attributesCode, POSITION_2D);
  if (is2D) {
    if (flatColor) {
      return $compileProgramWithName(this$static, gl, 'FlatColor2DMesh');
    }
    return $compileProgramWithName(this$static, gl, 'Textured2DMesh');
  }
  if (billboard) {
    if (transformTC) {
      return $compileProgramWithName(this$static, gl, 'Billboard_TransformedTexCoor');
    }
    return $compileProgramWithName(this$static, gl, 'Billboard');
  }
  if (flatColor && !texture && !color_0) {
    if (hasLight) {
      return $compileProgramWithName(this$static, gl, 'FlatColorMesh_DirectionLight');
    }
    return $compileProgramWithName(this$static, gl, 'FlatColorMesh');
  }
  if (!flatColor && texture && !color_0) {
    if (hasTexture2) {
      if (transformTC) {
        if (rotationTC) {
          return $compileProgramWithName(this$static, gl, 'FullTransformedTexCoorMultiTexturedMesh');
        }
        return $compileProgramWithName(this$static, gl, 'TransformedTexCoorMultiTexturedMesh');
      }
      return $compileProgramWithName(this$static, gl, 'MultiTexturedMesh');
    }
    if (hasLight) {
      if (transformTC) {
        return $compileProgramWithName(this$static, gl, 'TransformedTexCoorTexturedMesh_DirectionLight');
      }
      return $compileProgramWithName(this$static, gl, 'TexturedMesh_DirectionLight');
    }
    if (transformTC) {
      if (rotationTC) {
        return $compileProgramWithName(this$static, gl, 'FullTransformedTexCoorTexturedMesh');
      }
      return $compileProgramWithName(this$static, gl, 'TransformedTexCoorTexturedMesh');
    }
    return $compileProgramWithName(this$static, gl, 'TexturedMesh');
  }
  if (!flatColor && !texture && color_0) {
    return $compileProgramWithName(this$static, gl, 'ColorMesh');
  }
  if (!flatColor && !texture && !color_0) {
    return $compileProgramWithName(this$static, gl, 'NoColorMesh');
  }
  return null;
}

function $getProgram(this$static, gl, uniformsCode, attributesCode){
  var p;
  p = $getCompiledProgram(this$static, uniformsCode, attributesCode);
  if (!p) {
    p = $getNewProgram(this$static, gl, uniformsCode, attributesCode);
    if (!p) {
      $logError(_instance_3, 'Problem at compiling program.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
      return null;
    }
    (p._attributesCode != attributesCode || p._uniformsCode != uniformsCode) && $logError(_instance_3, 'New compiled program does not match GL state.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  }
  ++p._nReferences;
  return p;
}

function $removeUnused(this$static){
  var entry, iterator, program;
  iterator = new AbstractHashMap$EntrySetIterator_0((new AbstractHashMap$EntrySet_0(this$static._programs)).this$0);
  while ($hasNext(iterator.iter)) {
    entry = iterator.last = dynamicCast($next_2(iterator.iter), Q$Map$Entry);
    program = dynamicCast(entry.getValue(), Q$GPUProgram);
    if (program._nReferences == 0) {
      $logInfo(_instance_3, 'Deleting program %s', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [program._name]));
      $remove_5(iterator);
    }
  }
}

function GPUProgramManager_0(factory){
  this._programs = new HashMap_0;
  this._factory = factory;
}

defineSeed(515, 1, {}, GPUProgramManager_0);
function GPUProgramSources_0(name_0, vertexSource, fragmentSource){
  this._name = name_0;
  this._vertexSource = vertexSource;
  this._fragmentSource = fragmentSource;
}

defineSeed(516, 1, makeCastMap([Q$GPUProgramSources]), GPUProgramSources_0);
function $applyChanges_2(this$static, gl){
  if (this$static._dirty) {
    this$static._value.setUniform(gl, this$static._id);
    this$static._dirty = false;
  }
   else {
    if (!this$static._value) {
      throw new RuntimeException_1('Uniform "' + this$static._name + '" was not set.');
    }
  }
}

function $set_1(this$static, v){
  if (this$static._type == v._type) {
    if (!this$static._value || !this$static._value.isEquals_0(v)) {
      this$static._dirty = true;
      ++v._referenceCounter;
      !!this$static._value && $_release(this$static._value);
      this$static._value = v;
    }
  }
   else {
    throw new RuntimeException_1('Attempting to set uniform "' + this$static._name + '" with invalid value type.');
  }
}

function $unset_0(this$static){
  if (this$static._value) {
    $_release(this$static._value);
    this$static._value = null;
  }
  this$static._dirty = false;
}

function GPUUniform_0(name_0, id_0, type_0){
  GPUVariable_0.call(this, name_0, $clinit_GPUVariableType());
  this._id = id_0;
  this._dirty = false;
  this._value = null;
  this._type = type_0;
  this._key = getUniformKey(name_0);
}

defineSeed(517, 504, makeCastMap([Q$GPUUniform, Q$GPUVariable]));
_._dirty = false;
_._type = 0;
function GPUUniformBool_0(name_0, id_0){
  GPUUniform_0.call(this, name_0, id_0, _bool);
}

defineSeed(518, 517, makeCastMap([Q$GPUUniform, Q$GPUVariable]), GPUUniformBool_0);
function GPUUniformFloat_0(name_0, id_0){
  GPUUniform_0.call(this, name_0, id_0, _float);
}

defineSeed(519, 517, makeCastMap([Q$GPUUniform, Q$GPUVariable]), GPUUniformFloat_0);
function $clinit_GPUUniformKey(){
  $clinit_GPUUniformKey = nullMethod;
  UNRECOGNIZED_UNIFORM = new GPUUniformKey_0('UNRECOGNIZED_UNIFORM', 0, -1);
  FLAT_COLOR = new GPUUniformKey_0('FLAT_COLOR', 1, 0);
  MODELVIEW = new GPUUniformKey_0('MODELVIEW', 2, 1);
  TEXTURE_EXTENT = new GPUUniformKey_0('TEXTURE_EXTENT', 3, 2);
  VIEWPORT_EXTENT = new GPUUniformKey_0('VIEWPORT_EXTENT', 4, 3);
  TRANSLATION_TEXTURE_COORDS = new GPUUniformKey_0('TRANSLATION_TEXTURE_COORDS', 5, 4);
  SCALE_TEXTURE_COORDS = new GPUUniformKey_0('SCALE_TEXTURE_COORDS', 6, 5);
  POINT_SIZE = new GPUUniformKey_0('POINT_SIZE', 7, 6);
  AMBIENT_LIGHT_COLOR = new GPUUniformKey_0('AMBIENT_LIGHT_COLOR', 8, 7);
  DIFFUSE_LIGHT_DIRECTION = new GPUUniformKey_0('DIFFUSE_LIGHT_DIRECTION', 9, 8);
  DIFFUSE_LIGHT_COLOR = new GPUUniformKey_0('DIFFUSE_LIGHT_COLOR', 10, 9);
  PROJECTION = new GPUUniformKey_0('PROJECTION', 11, 10);
  CAMERA_MODEL = new GPUUniformKey_0('CAMERA_MODEL', 12, 11);
  MODEL = new GPUUniformKey_0('MODEL', 13, 12);
  POINT_LIGHT_POSITION = new GPUUniformKey_0('POINT_LIGHT_POSITION', 14, 13);
  POINT_LIGHT_COLOR = new GPUUniformKey_0('POINT_LIGHT_COLOR', 15, 14);
  BILLBOARD_POSITION = new GPUUniformKey_0('BILLBOARD_POSITION', 16, 15);
  ROTATION_CENTER_TEXTURE_COORDS = new GPUUniformKey_0('ROTATION_CENTER_TEXTURE_COORDS', 17, 16);
  ROTATION_ANGLE_TEXTURE_COORDS = new GPUUniformKey_0('ROTATION_ANGLE_TEXTURE_COORDS', 18, 17);
  SAMPLER = new GPUUniformKey_0('SAMPLER', 19, 18);
  SAMPLER2 = new GPUUniformKey_0('SAMPLER2', 20, 19);
  SAMPLER3 = new GPUUniformKey_0('SAMPLER3', 21, 20);
  TRANSLATION_2D = new GPUUniformKey_0('TRANSLATION_2D', 22, 21);
  BILLBOARD_ANCHOR = new GPUUniformKey_0('BILLBOARD_ANCHOR', 23, 22);
  $VALUES_7 = initValues(_3Lorg_glob3_mobile_generated_GPUUniformKey_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$GPUUniformKey, [UNRECOGNIZED_UNIFORM, FLAT_COLOR, MODELVIEW, TEXTURE_EXTENT, VIEWPORT_EXTENT, TRANSLATION_TEXTURE_COORDS, SCALE_TEXTURE_COORDS, POINT_SIZE, AMBIENT_LIGHT_COLOR, DIFFUSE_LIGHT_DIRECTION, DIFFUSE_LIGHT_COLOR, PROJECTION, CAMERA_MODEL, MODEL, POINT_LIGHT_POSITION, POINT_LIGHT_COLOR, BILLBOARD_POSITION, ROTATION_CENTER_TEXTURE_COORDS, ROTATION_ANGLE_TEXTURE_COORDS, SAMPLER, SAMPLER2, SAMPLER3, TRANSLATION_2D, BILLBOARD_ANCHOR]);
}

function GPUUniformKey_0(enum$name, enum$ordinal, value_0){
  Enum_0.call(this, enum$name, enum$ordinal);
  this.intValue = value_0;
  $put((!mappings_2 && !mappings_2 && (mappings_2 = new HashMap_0) , mappings_2), valueOf_0(value_0), this);
}

function values_8(){
  $clinit_GPUUniformKey();
  return $VALUES_7;
}

defineSeed(520, 70, makeCastMap([Q$Serializable, Q$Comparable, Q$Enum, Q$GPUUniformKey]), GPUUniformKey_0);
_.intValue = 0;
var $VALUES_7, AMBIENT_LIGHT_COLOR, BILLBOARD_ANCHOR, BILLBOARD_POSITION, CAMERA_MODEL, DIFFUSE_LIGHT_COLOR, DIFFUSE_LIGHT_DIRECTION, FLAT_COLOR, MODEL, MODELVIEW, POINT_LIGHT_COLOR, POINT_LIGHT_POSITION, POINT_SIZE, PROJECTION, ROTATION_ANGLE_TEXTURE_COORDS, ROTATION_CENTER_TEXTURE_COORDS, SAMPLER, SAMPLER2, SAMPLER3, SCALE_TEXTURE_COORDS, TEXTURE_EXTENT, TRANSLATION_2D, TRANSLATION_TEXTURE_COORDS, UNRECOGNIZED_UNIFORM, VIEWPORT_EXTENT, mappings_2;
function GPUUniformMatrix4Float_0(name_0, id_0){
  GPUUniform_0.call(this, name_0, id_0, _matrix4Float);
}

defineSeed(521, 517, makeCastMap([Q$GPUUniform, Q$GPUVariable]), GPUUniformMatrix4Float_0);
function GPUUniformSampler2D_0(name_0, id_0){
  GPUUniform_0.call(this, name_0, id_0, _int);
}

defineSeed(522, 517, makeCastMap([Q$GPUUniform, Q$GPUVariable]), GPUUniformSampler2D_0);
function GPUUniformValue_0(type_0){
  RCObject_0.call(this);
  this._type = type_0;
}

defineSeed(523, 413, makeCastMap([Q$GPUUniformValue, Q$RCObject]));
_.dispose = function dispose_43(){
  $dispose_1(this);
}
;
_.toString$ = function toString_44(){
  return this.description_0();
}
;
_._type = 0;
function GPUUniformValueFloat_0(d){
  GPUUniformValue_0.call(this, _float);
  this._value = d;
}

defineSeed(524, 523, makeCastMap([Q$GPUUniformValue, Q$GPUUniformValueFloat, Q$RCObject]), GPUUniformValueFloat_0);
_.description_0 = function description_1(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'Uniform Value Float: ';
  $addDouble(isb, this._value);
  s = isb._string;
  return s;
}
;
_.dispose = function dispose_44(){
  $dispose_1(this);
}
;
_.isEquals_0 = function isEquals_0(v){
  var v2;
  v2 = dynamicCast(v, Q$GPUUniformValueFloat);
  return this._value == v2._value;
}
;
_.setUniform = function setUniform(gl, id_0){
  $uniform1f(gl, id_0, this._value);
}
;
_._value = 0;
function $changeValue(this$static, x_0){
  this$static._value = x_0;
}

function GPUUniformValueFloatMutable_0(x_0){
  GPUUniformValueFloat_0.call(this, x_0);
}

defineSeed(525, 524, makeCastMap([Q$GPUUniformValue, Q$GPUUniformValueFloat, Q$RCObject]), GPUUniformValueFloatMutable_0);
_.dispose = function dispose_45(){
  $dispose_1(this);
}
;
function GPUUniformValueInt_0(b){
  GPUUniformValue_0.call(this, _int);
  this._value = b;
}

defineSeed(526, 523, makeCastMap([Q$GPUUniformValue, Q$GPUUniformValueInt, Q$RCObject]), GPUUniformValueInt_0);
_.description_0 = function description_2(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'Uniform Value Integer: ';
  $addInt(isb, this._value);
  s = isb._string;
  return s;
}
;
_.dispose = function dispose_46(){
  $dispose_1(this);
}
;
_.isEquals_0 = function isEquals_1(v){
  return this._value == dynamicCast(v, Q$GPUUniformValueInt)._value;
}
;
_.setUniform = function setUniform_0(gl, id_0){
  $uniform1i(gl, id_0, this._value);
}
;
_._value = 0;
function GPUUniformValueMatrix4_0(provider){
  GPUUniformValue_0.call(this, _matrix4Float);
  this._provider = provider;
  this._lastModelSet = null;
  ++this._provider._referenceCounter;
}

defineSeed(527, 523, makeCastMap([Q$GPUUniformValue, Q$GPUUniformValueMatrix4, Q$RCObject]), GPUUniformValueMatrix4_0);
_.description_0 = function description_3(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'Uniform Value Matrix44D.';
  s = isb._string;
  return s;
}
;
_.dispose = function dispose_47(){
  $_release(this._provider);
  !!this._lastModelSet && $_release(this._lastModelSet);
  $dispose_1(this);
}
;
_.isEquals_0 = function isEquals_2(v){
  if (this._lastModelSet == $getMatrix(dynamicCast(v, Q$GPUUniformValueMatrix4)._provider)) {
    return true;
  }
  return false;
}
;
_.setUniform = function setUniform_1(gl, id_0){
  !!this._lastModelSet && $_release(this._lastModelSet);
  this._lastModelSet = $getMatrix(this._provider);
  ++this._lastModelSet._referenceCounter;
  $uniformMatrix4fv(gl, id_0, this._lastModelSet);
}
;
defineSeed(528, 523, makeCastMap([Q$GPUUniformValue, Q$GPUUniformValueVec2Float, Q$RCObject]));
_.description_0 = function description_4(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'Uniform Value Vec2Float: x:';
  $addDouble(isb, this._x);
  isb._string += 'y:';
  $addDouble(isb, this._y);
  s = isb._string;
  return s;
}
;
_.dispose = function dispose_48(){
  $dispose_1(this);
}
;
_.isEquals_0 = function isEquals_3(v){
  var v2;
  v2 = dynamicCast(v, Q$GPUUniformValueVec2Float);
  return this._x == v2._x && this._y == v2._y;
}
;
_.setUniform = function setUniform_2(gl, id_0){
  $uniform2f(gl, id_0, this._x, this._y);
}
;
_._x = 0;
_._y = 0;
function $changeValue_0(this$static, x_0, y_0){
  this$static._x = x_0;
  this$static._y = y_0;
}

function GPUUniformValueVec2FloatMutable_0(x_0, y_0){
  GPUUniformValue_0.call(this, _vec2Float);
  this._x = x_0;
  this._y = y_0;
}

defineSeed(529, 528, makeCastMap([Q$GPUUniformValue, Q$GPUUniformValueVec2Float, Q$RCObject]), GPUUniformValueVec2FloatMutable_0);
_.dispose = function dispose_49(){
  $dispose_1(this);
}
;
function GPUUniformValueVec3Float_0(color_0){
  GPUUniformValue_0.call(this, _vec3Float);
  this._x = color_0._red;
  this._y = color_0._green;
  this._z = color_0._blue;
}

defineSeed(530, 523, makeCastMap([Q$GPUUniformValue, Q$GPUUniformValueVec3Float, Q$RCObject]), GPUUniformValueVec3Float_0);
_.description_0 = function description_5(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'Uniform Value Vec4Float: x:';
  $addDouble(isb, this._x);
  isb._string += 'y:';
  $addDouble(isb, this._y);
  isb._string += 'z:';
  $addDouble(isb, this._z);
  s = isb._string;
  return s;
}
;
_.dispose = function dispose_50(){
  $dispose_1(this);
}
;
_.isEquals_0 = function isEquals_4(v){
  var v2;
  v2 = dynamicCast(v, Q$GPUUniformValueVec3Float);
  return this._x == v2._x && this._y == v2._y && this._z == v2._z;
}
;
_.setUniform = function setUniform_3(gl, id_0){
  $uniform3f(gl, id_0, this._x, this._y, this._z);
}
;
_._x = 0;
_._y = 0;
_._z = 0;
function $changeValue_1(this$static, x_0, y_0, z_0){
  this$static._x = x_0;
  this$static._y = y_0;
  this$static._z = z_0;
}

function GPUUniformValueVec3FloatMutable_0(x_0, y_0, z_0){
  GPUUniformValue_0.call(this, _vec3Float);
  this._x = x_0;
  this._y = y_0;
  this._z = z_0;
}

defineSeed(531, 530, makeCastMap([Q$GPUUniformValue, Q$GPUUniformValueVec3Float, Q$RCObject]), GPUUniformValueVec3FloatMutable_0);
_.dispose = function dispose_51(){
  $dispose_1(this);
}
;
function GPUUniformValueVec4Float_0(x_0, y_0, z_0, w){
  GPUUniformValue_0.call(this, _vec4Float);
  this._x = x_0;
  this._y = y_0;
  this._z = z_0;
  this._w = w;
}

defineSeed(532, 523, makeCastMap([Q$GPUUniformValue, Q$GPUUniformValueVec4Float, Q$RCObject]), GPUUniformValueVec4Float_0);
_.description_0 = function description_6(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'Uniform Value Vec4Float: x:';
  $addDouble(isb, this._x);
  isb._string += 'y:';
  $addDouble(isb, this._y);
  isb._string += 'z:';
  $addDouble(isb, this._z);
  isb._string += 'w:';
  $addDouble(isb, this._w);
  s = isb._string;
  return s;
}
;
_.dispose = function dispose_52(){
  $dispose_1(this);
}
;
_.isEquals_0 = function isEquals_5(v){
  var v2;
  v2 = dynamicCast(v, Q$GPUUniformValueVec4Float);
  return this._x == v2._x && this._y == v2._y && this._z == v2._z && this._w == v2._w;
}
;
_.setUniform = function setUniform_4(gl, id_0){
  $uniform4f(gl, id_0, this._x, this._y, this._z, this._w);
}
;
_._w = 0;
_._x = 0;
_._y = 0;
_._z = 0;
function GPUUniformVec2Float_0(name_0, id_0){
  GPUUniform_0.call(this, name_0, id_0, _vec2Float);
}

defineSeed(533, 517, makeCastMap([Q$GPUUniform, Q$GPUVariable]), GPUUniformVec2Float_0);
function GPUUniformVec3Float_0(name_0, id_0){
  GPUUniform_0.call(this, name_0, id_0, _vec3Float);
}

defineSeed(534, 517, makeCastMap([Q$GPUUniform, Q$GPUVariable]), GPUUniformVec3Float_0);
function GPUUniformVec4Float_0(name_0, id_0){
  GPUUniform_0.call(this, name_0, id_0, _vec4Float);
}

defineSeed(535, 517, makeCastMap([Q$GPUUniform, Q$GPUVariable]), GPUUniformVec4Float_0);
function $clinit_GPUVariableType(){
  $clinit_GPUVariableType = nullMethod;
  ATTRIBUTE = new GPUVariableType_0('ATTRIBUTE', 0, 1);
  UNIFORM = new GPUVariableType_0('UNIFORM', 1, 2);
  $VALUES_8 = initValues(_3Lorg_glob3_mobile_generated_GPUVariableType_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$GPUVariableType, [ATTRIBUTE, UNIFORM]);
}

function GPUVariableType_0(enum$name, enum$ordinal, value_0){
  Enum_0.call(this, enum$name, enum$ordinal);
  $put((!mappings_3 && !mappings_3 && (mappings_3 = new HashMap_0) , mappings_3), valueOf_0(value_0), this);
}

function values_9(){
  $clinit_GPUVariableType();
  return $VALUES_8;
}

defineSeed(536, 70, makeCastMap([Q$Serializable, Q$Comparable, Q$Enum, Q$GPUVariableType]), GPUVariableType_0);
var $VALUES_8, ATTRIBUTE, UNIFORM, mappings_3;
function $addAttributeValue(this$static, key, v){
  var index_0;
  index_0 = key.intValue;
  setCheck(this$static._attributeValues, index_0, v);
  index_0 > this$static._highestAttributeKey && (this$static._highestAttributeKey = index_0);
}

function $addUniformValue(this$static, key, v){
  var index_0;
  index_0 = key.intValue;
  setCheck(this$static._uniformValues, index_0, v);
  index_0 > this$static._highestUniformKey && (this$static._highestUniformKey = index_0);
}

function $applyValuesToProgram(this$static, prog){
  var a, i_0, i0, u;
  for (i0 = 0; i0 <= this$static._highestUniformKey; i0++) {
    u = this$static._uniformValues[i0];
    !!u && $setGPUUniformValue(prog, i0, u);
  }
  for (i_0 = 0; i_0 <= this$static._highestAttributeKey; i_0++) {
    a = this$static._attributeValues[i_0];
    !!a && $setGPUAttributeValue(prog, i_0, a);
  }
}

function $combineWith(this$static, vs){
  var i_0, i0;
  for (i0 = 0; i0 <= vs._highestUniformKey; i0++) {
    if (vs._uniformValues[i0]) {
      setCheck(this$static._uniformValues, i0, vs._uniformValues[i0]);
      ++this$static._uniformValues[i0]._referenceCounter;
      i0 > this$static._highestUniformKey && (this$static._highestUniformKey = i0);
    }
  }
  for (i_0 = 0; i_0 <= vs._highestAttributeKey; i_0++) {
    if (vs._attributeValues[i_0]) {
      setCheck(this$static._attributeValues, i_0, vs._attributeValues[i_0]);
      ++this$static._attributeValues[i_0]._referenceCounter;
      i_0 > this$static._highestAttributeKey && (this$static._highestAttributeKey = i_0);
    }
  }
}

function $dispose_6(this$static){
  var a, i_0, i0, u;
  for (i0 = 0; i0 <= this$static._highestUniformKey; i0++) {
    u = this$static._uniformValues[i0];
    !!u && $_release(u);
  }
  for (i_0 = 0; i_0 <= this$static._highestAttributeKey; i_0++) {
    a = this$static._attributeValues[i_0];
    !!a && $_release(a);
  }
}

function $getAttributesCode(this$static){
  var i_0;
  if (this$static._attributeCode == 0) {
    for (i_0 = 0; i_0 <= this$static._highestAttributeKey; i_0++) {
      !!this$static._attributeValues[i_0] && (this$static._attributeCode = this$static._attributeCode | 1 << i_0);
    }
  }
  return this$static._attributeCode;
}

function $getUniformsCode(this$static){
  var i_0;
  if (this$static._uniformsCode == 0) {
    for (i_0 = 0; i_0 <= this$static._highestUniformKey; i_0++) {
      !!this$static._uniformValues[i_0] && (this$static._uniformsCode = this$static._uniformsCode | 1 << i_0);
    }
  }
  return this$static._uniformsCode;
}

function $removeUniformValue(this$static, key){
  var i_0, index_0;
  index_0 = key.intValue;
  if (this$static._uniformValues[index_0]) {
    $_release(this$static._uniformValues[index_0]);
    setCheck(this$static._uniformValues, index_0, null);
  }
  for (i_0 = 0; i_0 < 32; i_0++) {
    !!this$static._uniformValues[i_0] && (this$static._highestUniformKey = i_0);
  }
}

function GPUVariableValueSet_0(){
  var i_0;
  this._uniformValues = initDim(_3Lorg_glob3_mobile_generated_GPUUniformValue_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$GPUUniformValue, 32, 0);
  this._attributeValues = initDim(_3Lorg_glob3_mobile_generated_GPUAttributeValue_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$GPUAttributeValue, 32, 0);
  this._highestAttributeKey = 0;
  this._highestUniformKey = 0;
  this._uniformsCode = 0;
  this._attributeCode = 0;
  for (i_0 = 0; i_0 < 32; i_0++) {
    setCheck(this._uniformValues, i_0, null);
    setCheck(this._attributeValues, i_0, null);
  }
}

defineSeed(537, 1, {}, GPUVariableValueSet_0);
_._attributeCode = 0;
_._highestAttributeKey = 0;
_._highestUniformKey = 0;
_._uniformsCode = 0;
defineSeed(538, 1, {});
function $acceptVisitor(){
  return false;
}

function $description_0(this$static){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += '(lat=';
  $addString(isb, $description(this$static._latitude));
  isb._string += ', lon=';
  $addString(isb, $description(this$static._longitude));
  isb._string += ')';
  s = isb._string;
  return s;
}

function $equals_2(this$static, obj){
  var other;
  if (this$static === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (Lorg_glob3_mobile_generated_Geodetic2D_2_classLit != getClass__devirtual$(obj)) {
    return false;
  }
  other = dynamicCast(obj, Q$Geodetic2D);
  if (!this$static._latitude) {
    if (other._latitude) {
      return false;
    }
  }
   else if (!$equals_1(this$static._latitude, other._latitude)) {
    return false;
  }
  if (!this$static._longitude) {
    if (other._longitude) {
      return false;
    }
  }
   else if (!$equals_1(this$static._longitude, other._longitude)) {
    return false;
  }
  return true;
}

function $hashCode_0(this$static){
  var result;
  result = 31 + (!this$static._latitude?0:$hashCode(this$static._latitude));
  result = 31 * result + (!this$static._longitude?0:$hashCode(this$static._longitude));
  return result;
}

function $isEquals_0(this$static, that){
  return $isEquals(this$static._latitude, that._latitude) && $isEquals(this$static._longitude, that._longitude);
}

function Geodetic2D_0(latitude, longitude){
  this._latitude = new Angle_1(latitude);
  this._longitude = new Angle_1(longitude);
}

function Geodetic2D_1(g){
  this._latitude = new Angle_1(g._latitude);
  this._longitude = new Angle_1(g._longitude);
}

function fromDegrees_0(lat, lon){
  return new Geodetic2D_0(new Angle_0(lat, lat / 180 * 3.141592653589793), new Angle_0(lon, lon / 180 * 3.141592653589793));
}

function fromRadians_0(lat, lon){
  return new Geodetic2D_0(new Angle_0(lat * 57.29577951308232, lat), new Angle_0(lon * 57.29577951308232, lon));
}

defineSeed(540, 1, makeCastMap([Q$Geodetic2D]), Geodetic2D_0, Geodetic2D_1);
_.equals$ = function equals_22(obj){
  return $equals_2(this, obj);
}
;
_.hashCode$ = function hashCode_24(){
  return $hashCode_0(this);
}
;
_.toString$ = function toString_45(){
  return $description_0(this);
}
;
function $description_1(this$static){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += '(lat=';
  $addString(isb, $description(this$static._latitude));
  isb._string += ', lon=';
  $addString(isb, $description(this$static._longitude));
  isb._string += ', height=';
  $addDouble(isb, this$static._height);
  isb._string += ')';
  s = isb._string;
  return s;
}

function Geodetic3D_0(latitude, longitude, height){
  this._latitude = new Angle_1(latitude);
  this._longitude = new Angle_1(longitude);
  this._height = height;
}

function Geodetic3D_1(g2, height){
  this._latitude = new Angle_1(g2._latitude);
  this._longitude = new Angle_1(g2._longitude);
  this._height = height;
}

function Geodetic3D_2(g){
  this._latitude = new Angle_1(g._latitude);
  this._longitude = new Angle_1(g._longitude);
  this._height = g._height;
}

function fromDegrees_1(lat, lon, height){
  return new Geodetic3D_0(new Angle_0(lat, lat / 180 * 3.141592653589793), new Angle_0(lon, lon / 180 * 3.141592653589793), height);
}

defineSeed(541, 1, {}, Geodetic3D_0, Geodetic3D_1, Geodetic3D_2);
_.toString$ = function toString_46(){
  return $description_1(this);
}
;
_._height = 0;
function GeometryGLFeature_0(buffer, depthTestEnabled, polygonOffsetFill, polygonOffsetFactor, polygonOffsetUnits, lineWidth, pointSize){
  GLFeature_0.call(this, ($clinit_GLFeatureGroupName() , NO_GROUP), 2);
  this._depthTestEnabled = depthTestEnabled;
  this._cullFace = false;
  this._culledFace = 0;
  this._polygonOffsetFill = polygonOffsetFill;
  this._polygonOffsetFactor = polygonOffsetFactor;
  this._polygonOffsetUnits = polygonOffsetUnits;
  this._lineWidth = lineWidth;
  this._position = new GPUAttributeValueVec4Float_0(buffer, 3);
  $addAttributeValue(this._values, ($clinit_GPUAttributeKey() , POSITION), this._position);
  $addUniformValue(this._values, ($clinit_GPUUniformKey() , POINT_SIZE), new GPUUniformValueFloat_0(pointSize));
}

defineSeed(542, 419, makeCastMap([Q$GLFeature, Q$RCObject]), GeometryGLFeature_0);
_.applyOnGlobalGLState = function applyOnGlobalGLState_3(state){
  this._depthTestEnabled?(state._depthTest = true):(state._depthTest = false);
  this._cullFace?$enableCullFace(state, this._culledFace):(state._cullFace = false);
  this._polygonOffsetFill?$enablePolygonOffsetFill(state, this._polygonOffsetFactor, this._polygonOffsetUnits):(state._polygonOffsetFill = false);
  $setLineWidth(state, this._lineWidth);
}
;
_.dispose = function dispose_53(){
  !!this._values && $dispose_6(this._values);
  $dispose_1(this);
}
;
_._cullFace = false;
_._culledFace = 0;
_._depthTestEnabled = false;
_._lineWidth = 0;
_._polygonOffsetFactor = 0;
_._polygonOffsetFill = false;
_._polygonOffsetUnits = 0;
function $clinit_Gesture(){
  $clinit_Gesture = nullMethod;
  None = new Gesture_0('None', 0);
  Drag = new Gesture_0('Drag', 1);
  Zoom = new Gesture_0('Zoom', 2);
  Rotate = new Gesture_0('Rotate', 3);
  DoubleDrag = new Gesture_0('DoubleDrag', 4);
  $VALUES_9 = initValues(_3Lorg_glob3_mobile_generated_Gesture_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Gesture, [None, Drag, Zoom, Rotate, DoubleDrag]);
}

function Gesture_0(enum$name, enum$ordinal){
  Enum_0.call(this, enum$name, enum$ordinal);
}

function values_10(){
  $clinit_Gesture();
  return $VALUES_9;
}

defineSeed(543, 70, makeCastMap([Q$Serializable, Q$Comparable, Q$Enum, Q$Gesture]), Gesture_0);
var $VALUES_9, DoubleDrag, Drag, None, Rotate, Zoom;
function $meetsRenderCriteria(this$static, rc, prc, tile){
  var hasSubtiles, result;
  result = this$static._tileLODTester.meetsRenderCriteria(rc, prc, tile);
  if (!result) {
    hasSubtiles = !!tile._subtiles;
    if (!hasSubtiles) {
      if (lte($elapsedTimeInMilliseconds(prc._lastSplitTimer), this$static._delayInMs)) {
        return true;
      }
    }
  }
  return result;
}

function GradualSplitsTileLODTester_0(delay, tileLODTester){
  DecoratorTileLODTester_0.call(this, tileLODTester);
  this._delayInMs = delay._milliseconds;
}

defineSeed(544, 444, {}, GradualSplitsTileLODTester_0);
_.meetsRenderCriteria = function meetsRenderCriteria(rc, prc, tile){
  return $meetsRenderCriteria(this, rc, prc, tile);
}
;
_._delayInMs = P0_longLit;
function $onResizeViewportEvent_1(this$static, ec, width_0, height){
  $onResizeViewportEvent_2(this$static._hudImageRenderer, width_0, height);
}

function $render_3(this$static, rc, glState){
  $render_4(this$static._hudImageRenderer, rc);
}

function $setErrors(this$static, errors){
  var factory;
  factory = this$static._hudImageRenderer._imageFactory;
  $setErrors_0(factory, errors) && $recreateImage(this$static._hudImageRenderer);
}

function HUDErrorRenderer_0(){
  this._hudImageRenderer = new HUDImageRenderer_0(new HUDErrorRenderer_ImageFactory_0);
}

defineSeed(545, 1, {}, HUDErrorRenderer_0);
_.initialize_0 = function initialize_7(context){
}
;
_.onResizeViewportEvent = function onResizeViewportEvent_2(ec, width_0, height){
  $onResizeViewportEvent_1(this, ec, width_0, height);
}
;
_.render = function render_6(rc, glState){
  $render_3(this, rc, glState);
}
;
_.start_2 = function start_9(rc){
}
;
_.stop_1 = function stop_7(rc){
  $stop(this._hudImageRenderer);
}
;
function $create_1(this$static, width_0, height, listener){
  var canvas;
  canvas = new Canvas_WebGL_0;
  $initialize_2(canvas, width_0, height);
  $setFillColor(canvas, new Color_0(0, 0, 0, 1));
  canvas._canvasWidth > 0 && canvas._canvasHeight > 0 || $logError(_instance_3, 'Canvas is not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  $_fillRectangle(canvas, 0, 0, width_0, height);
  drawStringsOn(this$static._errors, canvas, width_0, height, new Color_0(1, 1, 1, 1), new Color_0(0.8999999761581421, 0.4000000059604645, 0.4000000059604645, 1), new Color_0(0, 0, 0, 0));
  canvas._canvasWidth > 0 && canvas._canvasHeight > 0 || $logError(_instance_3, 'Canvas is not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  $_createImage(canvas, listener, true);
}

defineSeed(547, 1, {});
function $isEquals_1(v1, v2){
  var i_0, size1, size2, str1, str2;
  size1 = v1.size_0;
  size2 = v2.size_0;
  if (size1 != size2) {
    return false;
  }
  for (i_0 = 0; i_0 < size1; i_0++) {
    str1 = (checkIndex(i_0, v1.size_0) , dynamicCast(v1.array[i_0], Q$String));
    str2 = (checkIndex(i_0, v2.size_0) , dynamicCast(v2.array[i_0], Q$String));
    if (!$equals(str1, str2)) {
      return false;
    }
  }
  return true;
}

function $setErrors_0(this$static, errors){
  if ($isEquals_1(this$static._errors, errors)) {
    return false;
  }
  $clear(this$static._errors);
  $addAll(this$static._errors, errors);
  return true;
}

function HUDErrorRenderer_ImageFactory_0(){
  this._errors = new ArrayList_0;
}

defineSeed(546, 547, {}, HUDErrorRenderer_ImageFactory_0);
function $createMesh_0(this$static, rc){
  var $tmp, camera, halfHeight, halfWidth, mesh, texCoords, texId, textureMapping, textureName, vertices;
  this$static._creatingMesh = false;
  if (this$static._mesh) {
    !!this$static._mesh && $dispose_16(this$static._mesh);
    this$static._mesh = null;
  }
  textureName = 'HUDImageRenderer' + toString_16(this$static._instanceID) + '/' + toString_16(($tmp = this$static._changeCounter , this$static._changeCounter = add_1(this$static._changeCounter, P1_longLit) , $tmp));
  texId = $getTextureIDReference(rc._texturesHandler, this$static._image, _rgba, textureName, false);
  this$static._image = null;
  this$static._image = null;
  if (!texId) {
    $logError(rc._logger, "Can't upload texture to GPU", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return null;
  }
  camera = rc._currentCamera;
  halfWidth = camera._viewPortWidth / 2;
  halfHeight = camera._viewPortHeight / 2;
  vertices = new FloatBufferBuilderFromCartesian3D_0(($clinit_Vector3D() , zero));
  $add_11(vertices, -halfWidth, halfHeight);
  $add_11(vertices, -halfWidth, -halfHeight);
  $add_11(vertices, halfWidth, halfHeight);
  $add_11(vertices, halfWidth, -halfHeight);
  mesh = new DirectMesh_0(_triangleStrip, new Vector3D_0(vertices._cx, vertices._cy, vertices._cz), new FloatBuffer_WebGL_2(vertices._values._array, vertices._values._size));
  texCoords = new FloatBufferBuilderFromCartesian2D_0;
  $push_back(texCoords._values, 0);
  $push_back(texCoords._values, 0);
  $push_back(texCoords._values, 0);
  $push_back(texCoords._values, 1);
  $push_back(texCoords._values, 1);
  $push_back(texCoords._values, 0);
  $push_back(texCoords._values, 1);
  $push_back(texCoords._values, 1);
  textureMapping = new SimpleTextureMapping_0(texId, new FloatBuffer_WebGL_2(texCoords._values._array, texCoords._values._size));
  return new TexturedMesh_0(mesh, textureMapping);
}

function $getMesh_0(this$static, rc){
  var camera, height, width_0;
  if (!this$static._mesh) {
    if (!this$static._creatingMesh) {
      if (!this$static._image) {
        this$static._creatingMesh = true;
        camera = rc._currentCamera;
        width_0 = camera._viewPortWidth;
        height = camera._viewPortHeight;
        $create_1(this$static._imageFactory, width_0, height, new HUDImageRenderer$ImageListener_0(this$static));
      }
    }
    !!this$static._image && (this$static._mesh = $createMesh_0(this$static, rc));
  }
  return this$static._mesh;
}

function $onResizeViewportEvent_2(this$static, width_0, height){
  var halfHeight, halfWidth, pr, projectionMatrix;
  halfWidth = ~~(width_0 / 2);
  halfHeight = ~~(height / 2);
  projectionMatrix = createOrthographicProjectionMatrix(-halfWidth, halfWidth, -halfHeight, halfHeight, -halfWidth, halfWidth);
  pr = dynamicCast($getGLFeature(this$static._glState, 4), Q$ProjectionGLFeature);
  !pr?$addGLFeature(this$static._glState, new ProjectionGLFeature_0((!projectionMatrix._matrix44D && (projectionMatrix._matrix44D = new Matrix44D_0(projectionMatrix._m00, projectionMatrix._m10, projectionMatrix._m20, projectionMatrix._m30, projectionMatrix._m01, projectionMatrix._m11, projectionMatrix._m21, projectionMatrix._m31, projectionMatrix._m02, projectionMatrix._m12, projectionMatrix._m22, projectionMatrix._m32, projectionMatrix._m03, projectionMatrix._m13, projectionMatrix._m23, projectionMatrix._m33)) , projectionMatrix._matrix44D)), false):$setMatrix(pr, (!projectionMatrix._matrix44D && (projectionMatrix._matrix44D = new Matrix44D_0(projectionMatrix._m00, projectionMatrix._m10, projectionMatrix._m20, projectionMatrix._m30, projectionMatrix._m01, projectionMatrix._m11, projectionMatrix._m21, projectionMatrix._m31, projectionMatrix._m02, projectionMatrix._m12, projectionMatrix._m22, projectionMatrix._m32, projectionMatrix._m03, projectionMatrix._m13, projectionMatrix._m23, projectionMatrix._m33)) , projectionMatrix._matrix44D));
  $recreateImage(this$static);
}

function $recreateImage(this$static){
  this$static._creatingMesh = false;
  !!this$static._mesh && $dispose_16(this$static._mesh);
  this$static._mesh = null;
  this$static._image = null;
  this$static._image = null;
}

function $render_4(this$static, rc){
  var mesh;
  mesh = $getMesh_0(this$static, rc);
  !!mesh && $render(mesh, rc, this$static._glState);
}

function $setImage(this$static, image){
  this$static._image = image;
}

function $stop(this$static){
  $recreateImage(this$static);
}

function HUDImageRenderer_0(imageFactory){
  var $tmp;
  DefaultRenderer_0.call(this);
  this._imageFactory = imageFactory;
  this._glState = new GLState_0;
  this._creatingMesh = false;
  this._image = null;
  this._mesh = null;
  this._instanceID = ($tmp = INSTANCE_COUNTER , INSTANCE_COUNTER = add_1(INSTANCE_COUNTER, P1_longLit) , $tmp);
  this._changeCounter = P0_longLit;
}

defineSeed(548, 449, makeCastMap([Q$Renderer]), HUDImageRenderer_0);
_.initialize_0 = function initialize_8(context){
}
;
_.onResizeViewportEvent = function onResizeViewportEvent_3(ec, width_0, height){
  $onResizeViewportEvent_2(this, width_0, height);
}
;
_.render = function render_7(rc, glState){
  $render_4(this, rc);
}
;
_.stop_1 = function stop_8(rc){
  $stop(this);
}
;
_._changeCounter = P0_longLit;
_._creatingMesh = false;
_._instanceID = P0_longLit;
var INSTANCE_COUNTER = P0_longLit;
function HUDImageRenderer$ImageListener_0(hudImageRenderer){
  this._hudImageRenderer = hudImageRenderer;
}

defineSeed(549, 410, {}, HUDImageRenderer$ImageListener_0);
_.imageCreated = function imageCreated_4(image){
  $setImage(this._hudImageRenderer, image);
}
;
defineSeed(550, 1, {});
_.toString$ = function toString_47(){
  return 'ByteBuffer_WebGL (size=' + this._buffer.length + ')';
}
;
function $checkInitialized(this$static){
  this$static._canvasWidth > 0 && this$static._canvasHeight > 0 || $logError(_instance_3, 'Canvas is not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
}

function $createImage(this$static, listener){
  this$static._canvasWidth > 0 && this$static._canvasHeight > 0 || $logError(_instance_3, 'Canvas is not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  $_createImage(this$static, listener, true);
}

function $drawImage(this$static, image, destWidth, destHeight){
  var context, imageJS;
  this$static._canvasWidth > 0 && this$static._canvasHeight > 0 || $logError(_instance_3, 'Canvas is not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  context = this$static._domCanvasContext;
  imageJS = image.getImage();
  context.drawImage(imageJS, 0, 0, destWidth, destHeight);
}

function $drawImage_0(this$static, image, destWidth, destHeight, transparency){
  this$static._canvasWidth > 0 && this$static._canvasHeight > 0 || $logError(_instance_3, 'Canvas is not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  $_drawImage(this$static, image, 0, 0, destWidth, destHeight, transparency);
}

function $drawImage_1(this$static, image, srcLeft, srcTop, srcWidth, srcHeight, destLeft, destTop, destWidth, destHeight, transparency){
  var context, imageJS, context_0, imageJS_0;
  this$static._canvasWidth > 0 && this$static._canvasHeight > 0 || $logError(_instance_3, 'Canvas is not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  if (fullContains($getWidth(image), $getHeight(image), srcLeft, srcTop, srcWidth, srcHeight)) {
    if (transparency <= 0) {
      return;
    }
    transparency >= 1?(context = this$static._domCanvasContext , imageJS = image.getImage() , context.drawImage(imageJS, srcLeft, srcTop, srcWidth, srcHeight, destLeft, destTop, destWidth, destHeight) , undefined):(context_0 = this$static._domCanvasContext , imageJS_0 = image.getImage() , context_0.globalAlpha = transparency , context_0.drawImage(imageJS_0, srcLeft, srcTop, srcWidth, srcHeight, destLeft, destTop, destWidth, destHeight) , context_0.globalAlpha = 1 , undefined);
  }
   else {
    $logError(_instance_3, 'Invalid source rectangle in drawImage', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  }
}

function $fillRectangle(this$static, width_0, height){
  this$static._canvasWidth > 0 && this$static._canvasHeight > 0 || $logError(_instance_3, 'Canvas is not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  $_fillRectangle(this$static, 0, 0, width_0, height);
}

function $fillRoundedRectangle(this$static, left, top_0, width_0, height, radius){
  this$static._canvasWidth > 0 && this$static._canvasHeight > 0 || $logError(_instance_3, 'Canvas is not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  $roundRect(this$static, left, top_0, width_0, height, radius, true, false);
}

function $fillText(this$static, text_0, left, top_0){
  var context, textHeight;
  this$static._canvasWidth > 0 && this$static._canvasHeight > 0 || $logError(_instance_3, 'Canvas is not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  !this$static._currentFont && $logError(_instance_3, 'Current font no set', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  context = this$static._domCanvasContext;
  textHeight = this$static._currentFontSize * 1.66;
  context.fillText(text_0, left, top_0 + textHeight);
}

function $initialize_2(this$static, width_0, height){
  var canvas;
  if (width_0 <= 0 || height <= 0) {
    $logError(_instance_3, 'Invalid extent', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  if (this$static._canvasWidth > 0 && this$static._canvasHeight > 0) {
    $logError(_instance_3, 'Canvas already initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  this$static._canvasWidth = width_0;
  this$static._canvasHeight = height;
  canvas = this$static._domCanvas;
  canvas.width = width_0;
  canvas.height = height;
  this$static.tryToSetCurrentFontToContext();
}

function $setFillColor(this$static, color_0){
  var jsColor;
  this$static._canvasWidth > 0 && this$static._canvasHeight > 0 || $logError(_instance_3, 'Canvas is not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  jsColor = createDOMColor(color_0);
  this$static._domCanvasContext.fillStyle = jsColor;
}

function $setFont(this$static, font){
  var domFont;
  this$static._currentFont = new GFont_1(font);
  this$static._currentDOMFont = (domFont = '' , font._italic && (domFont += 'italic ') , font._bold && (domFont += 'bold ') , domFont += round_0(font._size * 0.6000000238418579) + 'pt' , compareTo_6(font._name, 'serif') == 0?(domFont += ' serif'):compareTo_6(font._name, 'sans-serif') == 0?(domFont += ' sans-serif'):compareTo_6(font._name, 'monospaced') == 0 && (domFont += ' monospace') , domFont);
  this$static._currentFontSize = font._size;
  $tryToSetCurrentFontToContext(this$static);
}

function $textExtent(this$static, text_0){
  var width_0, height;
  !this$static._currentFont && $logError(_instance_3, 'Current font no set', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  return width_0 = this$static._domCanvasContext.measureText(text_0).width , height = Math.round(this$static._currentFontSize * 1.66) , new Vector2F_0(width_0, height);
}

defineSeed(551, 1, {});
_._canvasHeight = 0;
_._canvasWidth = 0;
function drawStringsOn(strings, canvas, width_0, height, color_0, backgroundColor, shadowColor){
  var allFit, column, extent, extent0, fontSize, i_0, i0, labelFont, maxWidth, position, stringsSize, context;
  if (strings.size_0 == 0) {
    return;
  }
  maxWidth = width_0 - 32;
  stringsSize = strings.size_0;
  fontSize = 20;
  allFit = false;
  while (!allFit && fontSize > 5) {
    allFit = true;
    $setFont(canvas, new GFont_0(fontSize));
    for (i0 = 0; i0 < stringsSize; i0++) {
      extent = $textExtent(canvas, (checkIndex(i0, strings.size_0) , dynamicCast(strings.array[i0], Q$String)));
      if (extent._x > maxWidth) {
        allFit = false;
        --fontSize;
        continue;
      }
    }
  }
  canvas._canvasWidth > 0 && canvas._canvasHeight > 0 || $logError(_instance_3, 'Canvas is not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  context = canvas._domCanvasContext;
  context.shadowColor = createDOMColor(shadowColor);
  context.shadowBlur = 1;
  context.shadowOffsetX = 0;
  context.shadowOffsetY = 0;
  column = new ColumnCanvasElement_0(backgroundColor);
  labelFont = new GFont_0(fontSize);
  for (i_0 = 0; i_0 < stringsSize; i_0++) {
    $add_9(column, new TextCanvasElement_0((checkIndex(i_0, strings.size_0) , dynamicCast(strings.array[i_0], Q$String)), labelFont, color_0));
  }
  extent0 = $getExtent_0(column, canvas);
  position = getPosition(extent0, width_0, height);
  $drawAt(column, position._x, position._y, canvas);
}

function getPosition(extent, canvasWidth, canvasHeight){
  var left, top_0;
  switch (1) {
    case 0:
    case 2:
    case 1:
      left = ~~(canvasWidth / 2) - extent._x / 2;
  }
  switch (1) {
    case 0:
    case 2:
    case 1:
      top_0 = ~~(canvasHeight / 2) - extent._y / 2;
  }
  return new Vector2F_0(left, top_0);
}

defineSeed(553, 1, {});
var _instance;
defineSeed(554, 1, {});
defineSeed(555, 1, {});
var _instance_0 = null;
defineSeed(556, 1, {});
function $getDeviceInfo(this$static){
  !this$static._deviceInfo && (this$static._deviceInfo = new DeviceInfo_WebGL_0);
  return this$static._deviceInfo;
}

defineSeed(557, 1, {});
var _instance_1 = null;
defineSeed(558, 1, {});
function $addCameraConstraint(this$static, cameraConstraint){
  if (!cameraConstraint) {
    $logError(_instance_3, 'LOGIC ERROR: trying to add a NULL cameraConstraint object', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  $add_5((!this$static._cameraConstraints && (this$static._cameraConstraints = $createDefaultCameraConstraints()) , this$static._cameraConstraints), cameraConstraint);
}

function $addGPUProgramSources(this$static, s){
  $add_5(this$static._sources, s);
}

function $addRenderer(this$static, renderer){
  if (!renderer) {
    $logError(_instance_3, 'LOGIC ERROR: trying to add a NULL renderer object', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  $add_5((!this$static._renderers && (this$static._renderers = new ArrayList_0) , this$static._renderers), renderer);
}

function $containsPlanetRenderer(renderers){
  var i_0;
  for (i_0 = 0; i_0 < renderers.size_0; i_0++) {
    if ((checkIndex(i_0, renderers.size_0) , dynamicCast(renderers.array[i_0], Q$Renderer)).isPlanetRenderer()) {
      return true;
    }
  }
  return false;
}

function $create_2(this$static){
  var g3mWidget, i_0, initialCameraPosition, mainRenderer, shownSector, cameraRenderer;
  shownSector = ($clinit_Sector() , $clinit_Sector() , FULL_SPHERE);
  $setRenderedSector((!this$static._planetRendererBuilder && (this$static._planetRendererBuilder = new PlanetRendererBuilder_0) , this$static._planetRendererBuilder), shownSector);
  if ((!this$static._renderers && (this$static._renderers = new ArrayList_0) , this$static._renderers).size_0 > 0) {
    mainRenderer = new CompositeRenderer_0;
    $containsPlanetRenderer((!this$static._renderers && (this$static._renderers = new ArrayList_0) , this$static._renderers)) || $addChildRenderer(dynamicCast(mainRenderer, Q$CompositeRenderer), new ChildRenderer_0($create_5((!this$static._planetRendererBuilder && (this$static._planetRendererBuilder = new PlanetRendererBuilder_0) , this$static._planetRendererBuilder))));
    for (i_0 = 0; i_0 < (!this$static._renderers && (this$static._renderers = new ArrayList_0) , this$static._renderers).size_0; i_0++) {
      $addChildRenderer(dynamicCast(mainRenderer, Q$CompositeRenderer), new ChildRenderer_0(dynamicCast($get_2((!this$static._renderers && (this$static._renderers = new ArrayList_0) , this$static._renderers), i_0), Q$Renderer)));
    }
  }
   else {
    mainRenderer = $create_5((!this$static._planetRendererBuilder && (this$static._planetRendererBuilder = new PlanetRendererBuilder_0) , this$static._planetRendererBuilder));
  }
  initialCameraPosition = (!this$static._planet && (this$static._planet = new EllipsoidalPlanet_0(new Ellipsoid_0(($clinit_Vector3D() , zero), new Vector3D_0(6378137, 6378137, 6356752.314245)))) , this$static._planet).getDefaultCameraPosition(shownSector);
  $addCameraConstraint(this$static, new RenderedSectorCameraConstrainer_0(mainRenderer.getPlanetRenderer(), initialCameraPosition._height * 1.2));
  g3mWidget = new G3MWidget_0((!this$static._gl && $logError(_instance_3, 'LOGIC ERROR: gl not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [])) , this$static._gl), (!this$static._downloader && (this$static._downloader = new Downloader_WebGL_0) , this$static._downloader), (!this$static._threadUtils && (this$static._threadUtils = new ThreadUtils_WebGL_0) , this$static._threadUtils), (!this$static._planet && (this$static._planet = new EllipsoidalPlanet_0(new Ellipsoid_0(($clinit_Vector3D() , zero), new Vector3D_0(6378137, 6378137, 6356752.314245)))) , this$static._planet), (!this$static._cameraConstraints && (this$static._cameraConstraints = $createDefaultCameraConstraints()) , this$static._cameraConstraints), (!this$static._cameraRenderer && (this$static._cameraRenderer = (cameraRenderer = new CameraRenderer_0 , $addHandler_2(cameraRenderer, new CameraSingleDragHandler_0) , $addHandler_2(cameraRenderer, new CameraDoubleDragHandler_0) , $addHandler_2(cameraRenderer, new CameraRotationHandler_0) , $addHandler_2(cameraRenderer, new CameraDoubleTapHandler_0) , cameraRenderer)) , this$static._cameraRenderer), mainRenderer, (!this$static._busyRenderer && (this$static._busyRenderer = new BusyMeshRenderer_0(new Color_0(0, 0, 0, 1))) , this$static._busyRenderer), (!this$static._errorRenderer && (this$static._errorRenderer = new HUDErrorRenderer_0) , this$static._errorRenderer), (!this$static._backgroundColor && (this$static._backgroundColor = new Color_0(0, 0.10000000149011612, 0.20000000298023224, 1)) , this$static._backgroundColor), this$static._logFPS, this$static._logDownloaderStatistics, (!this$static._periodicalTasks && (this$static._periodicalTasks = new ArrayList_0) , this$static._periodicalTasks), $getGPUProgramManager(this$static), (!this$static._sceneLighting && (this$static._sceneLighting = new CameraFocusSceneLighting_0(new Color_0(0.30000001192092896, 0.30000001192092896, 0.30000001192092896, 1), new Color_0(1, 1, 0, 1))) , this$static._sceneLighting));
  this$static._gl = null;
  this$static._downloader = null;
  this$static._threadUtils = null;
  this$static._planet = null;
  this$static._cameraConstraints = null;
  this$static._cameraConstraints = null;
  this$static._cameraRenderer = null;
  this$static._renderers = null;
  this$static._renderers = null;
  this$static._busyRenderer = null;
  this$static._errorRenderer = null;
  this$static._periodicalTasks = null;
  this$static._periodicalTasks = null;
  return g3mWidget;
}

function $createDefaultCameraConstraints(){
  var cameraConstraints, scc;
  cameraConstraints = new ArrayList_0;
  scc = new SimpleCameraConstrainer_0;
  setCheck(cameraConstraints.array, cameraConstraints.size_0++, scc);
  return cameraConstraints;
}

function $getGPUProgramManager(this$static){
  var gpuProgramFactory, gpuProgramManager, i_0;
  gpuProgramFactory = new GPUProgramFactory_0;
  for (i_0 = 0; i_0 < this$static._sources.size_0; i_0++) {
    $add_8(gpuProgramFactory, dynamicCast($get_2(this$static._sources, i_0), Q$GPUProgramSources));
  }
  gpuProgramManager = new GPUProgramManager_0(gpuProgramFactory);
  return gpuProgramManager;
}

function $setGL(this$static, gl){
  if (this$static._gl) {
    $logError(_instance_3, 'LOGIC ERROR: gl already initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  if (!gl) {
    $logError(_instance_3, 'LOGIC ERROR: gl cannot be NULL', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  this$static._gl = gl;
}

function $setPlanet(this$static, planet){
  if (this$static._planet) {
    $logError(_instance_3, 'LOGIC ERROR: planet already initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  if (!planet) {
    $logError(_instance_3, 'LOGIC ERROR: planet cannot be NULL', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  this$static._planet = planet;
}

defineSeed(559, 1, {});
_._logDownloaderStatistics = false;
_._logFPS = false;
defineSeed(560, 1, {});
_.toString$ = function toString_48(){
  return 'Image_WebGL ' + $getWidth(this) + ' x ' + $getHeight(this) + ', _image=(' + this._imgObject + ')';
}
;
defineSeed(561, 1, {});
defineSeed(562, 1, {});
var _instance_2 = null;
defineSeed(563, 1, {});
_._level = 0;
var _instance_3 = null;
function $clamp(value_0){
  if (value_0 < 0)
    return 0;
  if (value_0 > 1)
    return 1;
  return value_0;
}

function $isEquals_2(x_0, y_0){
  if (x_0 == y_0) {
    return true;
  }
  return (x_0 - y_0 <= 0?0 - (x_0 - y_0):x_0 - y_0) <= 1.0E-8 * (((x_0 <= 0?0 - x_0:x_0) > (y_0 <= 0?0 - y_0:y_0)?x_0 <= 0?0 - x_0:x_0:y_0 <= 0?0 - y_0:y_0) > 1?(x_0 <= 0?0 - x_0:x_0) > (y_0 <= 0?0 - y_0:y_0)?x_0 <= 0?0 - x_0:x_0:y_0 <= 0?0 - y_0:y_0:1);
}

function $linearInterpolation(from, to, alpha_0){
  return from + (to - from) * alpha_0;
}

function $max(f1, f2, f3){
  return (f1 > f2?f1:f2) > f3?f1 > f2?f1:f2:f3;
}

function $min(f1, f2, f3){
  return (f1 < f2?f1:f2) < f3?f1 < f2?f1:f2:f3;
}

function $min_0(i1, i2){
  return i1 < i2?i1:i2;
}

function $pseudoModule(numerator){
  var fracPart, intPart, result;
  result = numerator / 6.283185307179586;
  intPart = fromDouble(result);
  fracPart = result - toDouble(intPart);
  if (fracPart == 1) {
    return 0;
  }
  return fracPart * 6.283185307179586;
}

function $quadraticBezierInterpolation(from, middle, to, alpha_0){
  var oneMinusAlpha;
  oneMinusAlpha = 1 - alpha_0;
  return oneMinusAlpha * oneMinusAlpha * from + 2 * oneMinusAlpha * alpha_0 * middle + alpha_0 * alpha_0 * to;
}

defineSeed(564, 1, {});
var _instance_4 = null;
defineSeed(565, 1, {});
defineSeed(566, 1, {});
defineSeed(567, 1, {});
var _instance_5 = null;
defineSeed(568, 1, {});
var _instance_6;
defineSeed(569, 1, {});
var _instance_7 = null;
function $initialize_3(this$static, context){
  this$static._context = context;
}

defineSeed(570, 1, {});
function IThreadUtils_BackgroundTask_0(task){
  this._task = task;
  this._autodelete = true;
}

defineSeed(571, 538, {}, IThreadUtils_BackgroundTask_0);
_.run_0 = function run_0(context){
  $runInBackground(this._task);
  $invokeTask(context._threadUtils, new IThreadUtils_RendererTask_0(this._task, this._autodelete));
}
;
_._autodelete = false;
function IThreadUtils_RendererTask_0(task, autodelete){
  this._task = task;
  this._autodelete = autodelete;
}

defineSeed(572, 538, {}, IThreadUtils_RendererTask_0);
_.run_0 = function run_1(context){
  $onPostExecute(this._task);
  this._autodelete && !!this._task && (this._task._color = null);
}
;
_._autodelete = false;
defineSeed(573, 1, {});
function $dispose_7(this$static){
  this$static._ownsIndices && !!this$static._indices && $dispose_20(this$static._indices);
  $dispose(this$static);
}

function IndexedGeometryMesh_0(primitive, center, vertices, indices){
  Mesh_0.call(this);
  this._primitive = primitive;
  this._vertices = vertices;
  this._ownsVertices = true;
  this._extent = null;
  this._center = new Vector3D_1(center);
  this._translationMatrix = center._x != center._x || center._y != center._y || center._z != center._z || center._x == 0 && center._y == 0 && center._z == 0?null:new MutableMatrix44D_2(new MutableMatrix44D_1(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, center._x, center._y, center._z, 1));
  this._lineWidth = 1;
  this._pointSize = 1;
  this._glState = new GLState_0;
  this._polygonOffsetFactor = 0;
  this._polygonOffsetUnits = 0;
  this._polygonOffsetFill = false;
  $addGLFeature(this._glState, new GeometryGLFeature_0(this._vertices, true, this._polygonOffsetFill, this._polygonOffsetFactor, this._polygonOffsetUnits, this._lineWidth, this._pointSize), false);
  !!this._translationMatrix && $addGLFeature(this._glState, new ModelTransformGLFeature_0($asMatrix44D(this._translationMatrix)), false);
  this._indices = indices;
  this._ownsIndices = true;
}

defineSeed(574, 368, makeCastMap([Q$Mesh]), IndexedGeometryMesh_0);
_.dispose = function dispose_54(){
  $dispose_7(this);
}
;
_._ownsIndices = false;
function $dispose_8(this$static){
  this$static._ownsIndices && !!this$static._indices && $dispose_20(this$static._indices);
  $dispose_0(this$static);
}

function IndexedMesh_0(primitive, center, vertices, indices, colors){
  IndexedMesh_2.call(this, primitive, center, vertices, indices, 1, null, colors, true, null, false, 0, 0);
}

function IndexedMesh_1(primitive, center, vertices, indices, flatColor, normals){
  IndexedMesh_2.call(this, primitive, center, vertices, indices, 1, flatColor, null, true, normals, false, 0, 0);
}

function IndexedMesh_2(primitive, center, vertices, indices, lineWidth, flatColor, colors, depthTest, normals, polygonOffsetFill, polygonOffsetFactor, polygonOffsetUnits){
  AbstractMesh_0.call(this, primitive, center, vertices, lineWidth, 1, flatColor, colors, depthTest, normals, polygonOffsetFill, polygonOffsetFactor, polygonOffsetUnits);
  this._indices = indices;
  this._ownsIndices = true;
}

defineSeed(575, 371, makeCastMap([Q$Mesh]), IndexedMesh_0, IndexedMesh_1, IndexedMesh_2);
_.dispose = function dispose_55(){
  $dispose_8(this);
}
;
_.rawRender_0 = function rawRender_4(rc){
  var gl;
  gl = rc._gl;
  $drawElements(gl, this._primitive, this._indices, this._glState, rc._gpuProgramManager);
}
;
_._ownsIndices = false;
function Info_0(){
}

defineSeed(576, 1, makeCastMap([Q$Info]), Info_0);
function $clinit_InterfaceOrientation(){
  $clinit_InterfaceOrientation = nullMethod;
  PORTRAIT = new InterfaceOrientation_0('PORTRAIT', 0);
  PORTRAIT_UPSIDEDOWN = new InterfaceOrientation_0('PORTRAIT_UPSIDEDOWN', 1);
  LANDSCAPE_RIGHT = new InterfaceOrientation_0('LANDSCAPE_RIGHT', 2);
  LANDSCAPE_LEFT = new InterfaceOrientation_0('LANDSCAPE_LEFT', 3);
  $VALUES_10 = initValues(_3Lorg_glob3_mobile_generated_InterfaceOrientation_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$InterfaceOrientation, [PORTRAIT, PORTRAIT_UPSIDEDOWN, LANDSCAPE_RIGHT, LANDSCAPE_LEFT]);
}

function InterfaceOrientation_0(enum$name, enum$ordinal){
  Enum_0.call(this, enum$name, enum$ordinal);
}

function values_11(){
  $clinit_InterfaceOrientation();
  return $VALUES_10;
}

defineSeed(578, 70, makeCastMap([Q$Serializable, Q$Comparable, Q$Enum, Q$InterfaceOrientation]), InterfaceOrientation_0);
var $VALUES_10, LANDSCAPE_LEFT, LANDSCAPE_RIGHT, PORTRAIT, PORTRAIT_UPSIDEDOWN;
function SubviewElevationData_0(elevationData, sector, extent){
  ElevationData_0.call(this, sector, extent);
  this._buffer = initDim(_3F_classLit, makeCastMap([Q$Serializable]), -1, this._width * this._height, 1);
  if (!elevationData || elevationData._width < 1 || elevationData._height < 1) {
    $logError(_instance_3, "SubviewElevationData can't subview given elevation data.", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    this._buffer = null;
    return;
  }
  this._hasNoData = false;
}

defineSeed(580, 386, {});
_.dispose = function dispose_56(){
  this._buffer = null;
}
;
_.getElevationAt = function getElevationAt_0(x_0, y_0){
  var index_0;
  index_0 = (this._height - 1 - y_0) * this._width + x_0;
  return this._buffer[index_0];
}
;
_._hasNoData = false;
function InterpolatedSubviewElevationData_0(elevationData, sector, extent){
  var height, index_0, latitude, longitude, u, v, x_0, y_0;
  SubviewElevationData_0.call(this, elevationData, sector, extent);
  if ($isEquals_3(sector, elevationData._sector) && extent._x == elevationData._width && extent._y == elevationData._height) {
    for (x_0 = 0; x_0 < this._width; x_0++) {
      for (y_0 = 0; y_0 < this._height; y_0++) {
        index_0 = (this._height - 1 - y_0) * this._width + x_0;
        this._buffer[index_0] = elevationData.getElevationAt(x_0, y_0);
      }
    }
  }
   else {
    for (x_0 = 0; x_0 < this._width; x_0++) {
      u = x_0 / (this._width - 1);
      longitude = $getInnerPointLongitude(this._sector, u);
      for (y_0 = 0; y_0 < this._height; y_0++) {
        v = 1 - y_0 / (this._height - 1);
        latitude = $getInnerPointLatitude(this._sector, v);
        index_0 = (this._height - 1 - y_0) * this._width + x_0;
        height = $getElevationAt(elevationData, latitude, longitude);
        this._buffer[index_0] = height;
        this._hasNoData || height != height && (this._hasNoData = true);
      }
    }
  }
}

defineSeed(579, 580, {}, InterpolatedSubviewElevationData_0);
defineSeed(582, 1, makeCastMap([Q$JSONBaseObject]));
_.asArray = function asArray(){
  return null;
}
;
_.asNull = function asNull(){
  return null;
}
;
_.asNumber = function asNumber(){
  return null;
}
;
_.asObject = function asObject(){
  return null;
}
;
_.asString = function asString(){
  return null;
}
;
_.dispose = function dispose_57(){
}
;
function $add_17(this$static, object){
  $add_5(this$static._entries, object);
}

function $getAsNumber(this$static, index_0, defaultValue){
  var jsNumber, object;
  jsNumber = (object = dynamicCast($get_2(this$static._entries, index_0), Q$JSONBaseObject) , !object?null:object.asNumber());
  return !jsNumber?defaultValue:jsNumber.value_1();
}

function $getAsObject(this$static, index_0){
  var object;
  object = dynamicCast($get_2(this$static._entries, index_0), Q$JSONBaseObject);
  return !object?null:object.asObject();
}

function JSONArray_2(){
  this._entries = new ArrayList_0;
}

defineSeed(581, 582, makeCastMap([Q$JSONBaseObject]), JSONArray_2);
_.asArray = function asArray_0(){
  return this;
}
;
_.description_0 = function description_7(){
  var i_0, isb, s, size_0;
  isb = new StringBuilder_WebGL_0;
  size_0 = this._entries.size_0;
  isb._string += '[';
  if (size_0 > 0) {
    $addString(isb, !dynamicCast($get_2(this._entries, 0), Q$JSONBaseObject)?'null':dynamicCast($get_2(this._entries, 0), Q$JSONBaseObject).description_0());
    if (size_0 <= 10) {
      for (i_0 = 1; i_0 < size_0; i_0++) {
        isb._string += ', ';
        $addString(isb, !dynamicCast($get_2(this._entries, i_0), Q$JSONBaseObject)?'null':dynamicCast($get_2(this._entries, i_0), Q$JSONBaseObject).description_0());
      }
    }
     else {
      for (i_0 = 1; i_0 < 10; i_0++) {
        isb._string += ', ';
        $addString(isb, !dynamicCast($get_2(this._entries, i_0), Q$JSONBaseObject)?'null':dynamicCast($get_2(this._entries, i_0), Q$JSONBaseObject).description_0());
      }
      isb._string += ', ...';
      isb._string += ' size=';
      isb._string += toString_16(fromInt(size_0));
    }
  }
  isb._string += ']';
  s = isb._string;
  return s;
}
;
_.dispose = function dispose_58(){
  var i_0;
  for (i_0 = 0; i_0 < this._entries.size_0; i_0++) {
    $get_2(this._entries, i_0) != null && dynamicCast($get_2(this._entries, i_0), Q$JSONBaseObject).dispose();
  }
  $clear(this._entries);
}
;
_.toString$ = function toString_49(){
  var i_0, isb, s, size_0;
  isb = new StringBuilder_WebGL_0;
  size_0 = this._entries.size_0;
  isb._string += '[';
  if (size_0 > 0) {
    $addString(isb, !dynamicCast($get_2(this._entries, 0), Q$JSONBaseObject)?'null':dynamicCast($get_2(this._entries, 0), Q$JSONBaseObject).toString$());
    if (size_0 <= 10) {
      for (i_0 = 1; i_0 < size_0; i_0++) {
        isb._string += ', ';
        $addString(isb, !dynamicCast($get_2(this._entries, i_0), Q$JSONBaseObject)?'null':dynamicCast($get_2(this._entries, i_0), Q$JSONBaseObject).toString$());
      }
    }
     else {
      for (i_0 = 1; i_0 < 10; i_0++) {
        isb._string += ', ';
        $addString(isb, !dynamicCast($get_2(this._entries, i_0), Q$JSONBaseObject)?'null':dynamicCast($get_2(this._entries, i_0), Q$JSONBaseObject).toString$());
      }
      isb._string += ', ...';
      isb._string += ' size=';
      isb._string += toString_16(fromInt(size_0));
    }
  }
  isb._string += ']';
  s = isb._string;
  return s;
}
;
function JSONBoolean_2(value_0){
  this._value = value_0;
}

defineSeed(583, 582, makeCastMap([Q$JSONBaseObject]), JSONBoolean_2);
_.description_0 = function description_8(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  $addBool(isb, this._value);
  s = isb._string;
  return s;
}
;
_.toString$ = function toString_50(){
  return this._value?'true':'false';
}
;
_._value = false;
defineSeed(585, 582, makeCastMap([Q$JSONBaseObject]));
_.asNumber = function asNumber_0(){
  return this;
}
;
function JSONDouble_0(value_0){
  this._value = value_0;
}

defineSeed(584, 585, makeCastMap([Q$JSONBaseObject]), JSONDouble_0);
_.description_0 = function description_9(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'double/';
  $addDouble(isb, this._value);
  s = isb._string;
  return s;
}
;
_.toString$ = function toString_51(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  $addDouble(isb, this._value);
  s = isb._string;
  return s;
}
;
_.value_1 = function value_1(){
  return this._value;
}
;
_._value = 0;
function JSONFloat_0(value_0){
  this._value = value_0;
}

defineSeed(586, 585, makeCastMap([Q$JSONBaseObject]), JSONFloat_0);
_.description_0 = function description_10(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'float/';
  $addFloat(isb, this._value);
  s = isb._string;
  return s;
}
;
_.toString$ = function toString_52(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  $addFloat(isb, this._value);
  s = isb._string;
  return s;
}
;
_.value_1 = function value_2(){
  return this._value;
}
;
_._value = 0;
function JSONInteger_0(value_0){
  this._value = value_0;
}

defineSeed(587, 585, makeCastMap([Q$JSONBaseObject, Q$JSONInteger]), JSONInteger_0);
_.description_0 = function description_11(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'int/';
  $addInt(isb, this._value);
  s = isb._string;
  return s;
}
;
_.toString$ = function toString_53(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  $addInt(isb, this._value);
  s = isb._string;
  return s;
}
;
_.value_1 = function value_3(){
  return this._value;
}
;
_._value = 0;
function JSONLong_0(value_0){
  this._value = value_0;
}

defineSeed(588, 585, makeCastMap([Q$JSONBaseObject]), JSONLong_0);
_.description_0 = function description_12(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'long/';
  $addLong(isb, this._value);
  s = isb._string;
  return s;
}
;
_.toString$ = function toString_54(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  $addLong(isb, this._value);
  s = isb._string;
  return s;
}
;
_.value_1 = function value_4(){
  return toDouble(this._value);
}
;
_._value = P0_longLit;
function JSONNull_2(){
}

defineSeed(589, 582, makeCastMap([Q$JSONBaseObject]), JSONNull_2);
_.asNull = function asNull_0(){
  return this;
}
;
_.description_0 = function description_13(){
  return 'null';
}
;
_.toString$ = function toString_55(){
  return 'null';
}
;
function $description_2(this$static){
  var i_0, isb, keys_0, keysCount, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += '{';
  keys_0 = new ArrayList_2($keySet(this$static._entries));
  keysCount = keys_0.size_0;
  if (keysCount > 0) {
    $putKeyAndValueDescription(this$static, (checkIndex(0, keys_0.size_0) , dynamicCast(keys_0.array[0], Q$String)), isb);
    for (i_0 = 1; i_0 < keysCount; i_0++) {
      isb._string += ', ';
      $putKeyAndValueDescription(this$static, (checkIndex(i_0, keys_0.size_0) , dynamicCast(keys_0.array[i_0], Q$String)), isb);
    }
  }
  isb._string += '}';
  s = isb._string;
  return s;
}

function $getAsArray(this$static, key){
  var object;
  object = dynamicCast($get_1(this$static._entries, key), Q$JSONBaseObject);
  return !object?null:object.asArray();
}

function $getAsNumber_0(this$static, key){
  var object;
  object = dynamicCast($get_1(this$static._entries, key), Q$JSONBaseObject);
  return !object?null:object.asNumber();
}

function $getAsNumber_1(this$static, key, defaultValue){
  var jsNumber, jsValue;
  jsValue = dynamicCast($get_1(this$static._entries, key), Q$JSONBaseObject);
  if (!jsValue || !!jsValue.asNull()) {
    return defaultValue;
  }
  jsNumber = jsValue.asNumber();
  return !jsNumber?defaultValue:jsNumber.value_1();
}

function $getAsObject_0(this$static, key){
  var object;
  object = dynamicCast($get_1(this$static._entries, key), Q$JSONBaseObject);
  return !object?null:object.asObject();
}

function $getAsString(this$static, key){
  var jsString, jsValue;
  jsValue = dynamicCast($get_1(this$static._entries, key), Q$JSONBaseObject);
  if (!jsValue || !!jsValue.asNull()) {
    return '';
  }
  jsString = jsValue.asString();
  return !jsString?'':jsString._value;
}

function $put_0(this$static, key, object){
  $put(this$static._entries, key, object);
}

function $putKeyAndValueDescription(this$static, key, isb){
  isb._string += '"';
  isb._string += key;
  isb._string += '":';
  $addString(isb, !dynamicCast($get_1(this$static._entries, key), Q$JSONBaseObject)?'null':dynamicCast($get_1(this$static._entries, key), Q$JSONBaseObject).description_0());
}

function $putKeyAndValueToString(this$static, key, isb){
  isb._string += '"';
  isb._string += key;
  isb._string += '":';
  $addString(isb, !dynamicCast($get_1(this$static._entries, key), Q$JSONBaseObject)?'null':dynamicCast($get_1(this$static._entries, key), Q$JSONBaseObject).toString$());
}

function JSONObject_2(){
  this._entries = new HashMap_0;
}

defineSeed(590, 582, makeCastMap([Q$JSONBaseObject]), JSONObject_2);
_.asObject = function asObject_0(){
  return this;
}
;
_.description_0 = function description_14(){
  return $description_2(this);
}
;
_.dispose = function dispose_59(){
  $clearImpl(this._entries);
}
;
_.toString$ = function toString_56(){
  var i_0, isb, keys_0, keysCount, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += '{';
  keys_0 = new ArrayList_2($keySet(this._entries));
  keysCount = keys_0.size_0;
  if (keysCount > 0) {
    $putKeyAndValueToString(this, (checkIndex(0, keys_0.size_0) , dynamicCast(keys_0.array[0], Q$String)), isb);
    for (i_0 = 1; i_0 < keysCount; i_0++) {
      isb._string += ', ';
      $putKeyAndValueToString(this, (checkIndex(i_0, keys_0.size_0) , dynamicCast(keys_0.array[i_0], Q$String)), isb);
    }
  }
  isb._string += '}';
  s = isb._string;
  return s;
}
;
function JSONString_2(value_0){
  this._value = value_0;
}

defineSeed(591, 582, makeCastMap([Q$JSONBaseObject]), JSONString_2);
_.asString = function asString_0(){
  return this;
}
;
_.description_0 = function description_15(){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += '"';
  $addString(isb, this._value);
  isb._string += '"';
  s = isb._string;
  return s;
}
;
_.dispose = function dispose_60(){
}
;
_.toString$ = function toString_57(){
  return this._value;
}
;
function $addLayer(this$static, layer){
  !!layer._layerSet && $logError(_instance_3, 'LayerSet already set.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  layer._layerSet = this$static;
  $add_5(this$static._layers, layer);
  !!this$static._context && layer.initialize_0(this$static._context);
  $layersChanged(this$static);
  $changedInfo(this$static, layer);
}

function $changedInfo(this$static){
  !!this$static._changedInfoListener && $changedInfo_0(this$static._changedInfoListener, $getInfo_0(this$static));
}

function $checkAndComposeLayerTilesRenderParameters(enableLayers, errors){
  var i_0, i0, layer, layerParametersVector, layerParametersVectorSize, multiProjectionLayers, mutableLayerTilesRenderParameters;
  mutableLayerTilesRenderParameters = new MutableLayerTilesRenderParameters_0;
  multiProjectionLayers = new ArrayList_0;
  for (i0 = 0; i0 < enableLayers.size_0; i0++) {
    layer = (checkIndex(i0, enableLayers.size_0) , dynamicCast(enableLayers.array[i0], Q$Layer));
    layerParametersVector = layer.getLayerTilesRenderParametersVector();
    layerParametersVectorSize = layerParametersVector.size_0;
    if (layerParametersVectorSize == 0) {
      continue;
    }
     else if (layerParametersVectorSize == 1) {
      if (!$update_1(mutableLayerTilesRenderParameters, (checkIndex(0, layerParametersVector.size_0) , dynamicCast(layerParametersVector.array[0], Q$LayerTilesRenderParameters)), errors)) {
        return null;
      }
    }
     else {
      setCheck(multiProjectionLayers.array, multiProjectionLayers.size_0++, layer);
    }
  }
  for (i_0 = 0; i_0 < multiProjectionLayers.size_0; i_0++) {
    layer = (checkIndex(i_0, multiProjectionLayers.size_0) , dynamicCast(multiProjectionLayers.array[i_0], Q$Layer));
    if (!$update_0(mutableLayerTilesRenderParameters, layer, errors)) {
      return null;
    }
  }
  return $create_4(mutableLayerTilesRenderParameters, errors);
}

function $checkLayersDataSector(this$static, forceFirstLevelTilesRenderOnStart, errors){
  var biggestArea, biggestDataSector, dataSectorsInconsistency, i_0, i0, layer, layerArea, layersCount;
  if (forceFirstLevelTilesRenderOnStart) {
    biggestDataSector = null;
    layersCount = this$static._layers.size_0;
    biggestArea = 0;
    for (i_0 = 0; i_0 < layersCount; i_0++) {
      layer = dynamicCast($get_2(this$static._layers, i_0), Q$Layer);
      if (layer._enable) {
        layerArea = $getAngularAreaInSquaredDegrees(layer.getDataSector());
        if (layerArea > biggestArea) {
          !!biggestDataSector && !!biggestDataSector._normalizedCartesianCenter && undefined;
          biggestDataSector = new Sector_1(layer.getDataSector());
          biggestArea = layerArea;
        }
      }
    }
    if (biggestDataSector) {
      dataSectorsInconsistency = false;
      for (i0 = 0; i0 < layersCount; i0++) {
        layer = dynamicCast($get_2(this$static._layers, i0), Q$Layer);
        if (layer._enable) {
          if (!$fullContains(biggestDataSector, layer.getDataSector())) {
            dataSectorsInconsistency = true;
            break;
          }
        }
      }
      !!biggestDataSector && !!biggestDataSector._normalizedCartesianCenter && undefined;
      if (dataSectorsInconsistency) {
        setCheck(errors.array, errors.size_0++, 'Inconsistency in layers data sectors');
        return false;
      }
    }
  }
  return true;
}

function $checkLayersRenderState(this$static, errors, enableLayers){
  var i_0, layer, layerErrors, layerRenderState, layerRenderStateType, layerSetNotReadyFlag;
  layerSetNotReadyFlag = false;
  for (i_0 = 0; i_0 < this$static._layers.size_0; i_0++) {
    layer = dynamicCast($get_2(this$static._layers, i_0), Q$Layer);
    if (layer._enable) {
      setCheck(enableLayers.array, enableLayers.size_0++, layer);
      layerRenderState = layer.getRenderState();
      layerRenderStateType = layerRenderState._type;
      if (layerRenderStateType != 0) {
        if (layerRenderStateType == 2) {
          layerErrors = layerRenderState._errors;
          $addAll(errors, layerErrors);
        }
        layerSetNotReadyFlag = true;
      }
    }
  }
  return !layerSetNotReadyFlag;
}

function $createLayerTilesRenderParameters(this$static, forceFirstLevelTilesRenderOnStart, errors){
  var enableLayers;
  if (!$checkLayersDataSector(this$static, forceFirstLevelTilesRenderOnStart, errors)) {
    return null;
  }
  enableLayers = new ArrayList_0;
  if (!$checkLayersRenderState(this$static, errors, enableLayers)) {
    return null;
  }
  return $checkAndComposeLayerTilesRenderParameters(enableLayers, errors);
}

function $createTileImageProvider(this$static, rc, layerTilesRenderParameters){
  var compositeTileImageProvider, i_0, layer, layerTileImageProvider, layersSize, singleTileImageProvider;
  singleTileImageProvider = null;
  compositeTileImageProvider = null;
  layersSize = this$static._layers.size_0;
  for (i_0 = 0; i_0 < layersSize; i_0++) {
    layer = dynamicCast($get_2(this$static._layers, i_0), Q$Layer);
    if (layer._enable) {
      layerTileImageProvider = layer.createTileImageProvider(rc, layerTilesRenderParameters);
      if (layerTileImageProvider) {
        if (compositeTileImageProvider) {
          $add_5(compositeTileImageProvider._children, layerTileImageProvider);
          compositeTileImageProvider._childrenSize = compositeTileImageProvider._children.size_0;
        }
         else if (!singleTileImageProvider) {
          singleTileImageProvider = layerTileImageProvider;
        }
         else {
          compositeTileImageProvider = new CompositeTileImageProvider_0;
          $add_5(compositeTileImageProvider._children, singleTileImageProvider);
          compositeTileImageProvider._childrenSize = compositeTileImageProvider._children.size_0;
          $add_5(compositeTileImageProvider._children, layerTileImageProvider);
          compositeTileImageProvider._childrenSize = compositeTileImageProvider._children.size_0;
        }
      }
    }
  }
  return !compositeTileImageProvider?singleTileImageProvider:compositeTileImageProvider;
}

function $getInfo_0(this$static){
  var i_0, infoSize, j, layer, layerInfo, layersCount;
  $clear(this$static._infos);
  layersCount = this$static._layers.size_0;
  for (i_0 = 0; i_0 < layersCount; i_0++) {
    layer = dynamicCast($get_2(this$static._layers, i_0), Q$Layer);
    if (layer._enable) {
      layerInfo = layer._layerInfo;
      infoSize = layerInfo.size_0;
      for (j = 0; j < infoSize; j++) {
        $add_5(this$static._infos, (checkIndex(j, layerInfo.size_0) , dynamicCast(layerInfo.array[j], Q$Info)));
      }
    }
  }
  return this$static._infos;
}

function $getRenderState_0(this$static){
  var busyFlag, child, childErrors, childRenderState, childRenderStateType, errorFlag, i_0, layersCount;
  $clear(this$static._errors);
  busyFlag = false;
  errorFlag = false;
  layersCount = this$static._layers.size_0;
  for (i_0 = 0; i_0 < layersCount; i_0++) {
    child = dynamicCast($get_2(this$static._layers, i_0), Q$Layer);
    if (child._enable) {
      childRenderState = child.getRenderState();
      childRenderStateType = childRenderState._type;
      if (childRenderStateType == 2) {
        errorFlag = true;
        childErrors = childRenderState._errors;
        $addAll(this$static._errors, childErrors);
      }
       else 
        childRenderStateType == 1 && (busyFlag = true);
    }
  }
  if (errorFlag) {
    return $clinit_RenderState() , new RenderState_0(this$static._errors);
  }
   else if (busyFlag) {
    return $clinit_RenderState() , $clinit_RenderState() , BUSY;
  }
  return $clinit_RenderState() , $clinit_RenderState() , READY;
}

function $getTileImageProvider(this$static, rc, layerTilesRenderParameters){
  !this$static._tileImageProvider && (this$static._tileImageProvider = $createTileImageProvider(this$static, rc, layerTilesRenderParameters));
  return this$static._tileImageProvider;
}

function $initialize_4(this$static, context){
  var i_0, layersCount;
  this$static._context = context;
  layersCount = this$static._layers.size_0;
  for (i_0 = 0; i_0 < layersCount; i_0++) {
    dynamicCast($get_2(this$static._layers, i_0), Q$Layer).initialize_0(context);
  }
}

function $layersChanged(this$static){
  if (this$static._tileImageProvider) {
    $_release(this$static._tileImageProvider);
    this$static._tileImageProvider = null;
  }
  !!this$static._listener && $changed(this$static._listener);
}

function $onTerrainTouchEvent_0(this$static, position, tile){
  var i_0, layer;
  for (i_0 = this$static._layers.size_0 - 1; i_0 >= 0; i_0--) {
    layer = dynamicCast($get_2(this$static._layers, i_0), Q$Layer);
    if ($isAvailable(layer)) {
      new LayerTouchEvent_0(position, tile._sector);
      if ($onLayerTouchEventListener(layer)) {
        return true;
      }
    }
  }
  return false;
}

function $setChangeListener(this$static, listener){
  !!this$static._listener && $logError(_instance_3, 'Listener already set', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  this$static._listener = listener;
}

function $setChangedInfoListener(this$static, changedInfoListener){
  if (this$static._changedInfoListener) {
    $logError(_instance_3, 'Changed Info Listener of LayerSet already set', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  this$static._changedInfoListener = changedInfoListener;
  !!this$static._changedInfoListener && $changedInfo_0(this$static._changedInfoListener, $getInfo_0(this$static));
}

function LayerSet_0(){
  this._layers = new ArrayList_0;
  this._errors = new ArrayList_0;
  this._infos = new ArrayList_0;
  this._listener = null;
  this._context = null;
  this._tileImageProvider = null;
  this._changedInfoListener = null;
}

defineSeed(593, 1, {}, LayerSet_0);
function LayerTilesRenderParameters_0(topSector, topSectorSplitsByLatitude, topSectorSplitsByLongitude, firstLevel, maxLevel, tileTextureResolution, tileMeshResolution, mercator){
  this._topSector = new Sector_1(topSector);
  this._topSectorSplitsByLatitude = topSectorSplitsByLatitude;
  this._topSectorSplitsByLongitude = topSectorSplitsByLongitude;
  this._firstLevel = firstLevel;
  this._maxLevel = maxLevel;
  this._maxLevelForPoles = 4;
  this._tileTextureResolution = tileTextureResolution;
  this._tileMeshResolution = tileMeshResolution;
  this._mercator = mercator;
}

defineSeed(594, 1, makeCastMap([Q$LayerTilesRenderParameters]), LayerTilesRenderParameters_0);
_._firstLevel = 0;
_._maxLevel = 0;
_._maxLevelForPoles = 0;
_._mercator = false;
_._topSectorSplitsByLatitude = 0;
_._topSectorSplitsByLongitude = 0;
function LayerTouchEvent_0(position, sector){
  new Geodetic3D_2(position);
  new Sector_1(sector);
}

defineSeed(595, 1, {}, LayerTouchEvent_0);
defineSeed(597, 1, {});
function $dispose_9(this$static){
  this$static._initializer = null;
  this$static._ownedTexCoords && !!this$static._texCoords && $dispose_19(this$static._texCoords);
  this$static._texCoords = null;
  $releaseGLTextureId(this$static);
}

function $modifyGLState_0(this$static, state){
  var scale, translation;
  if (!this$static._initialized) {
    $initialize_0(this$static._initializer);
    scale = $getScale(this$static._initializer);
    this$static._scaleU = scale._x;
    this$static._scaleV = scale._y;
    translation = $getTranslation(this$static._initializer);
    this$static._translationU = translation._x;
    this$static._translationV = translation._y;
    this$static._texCoords = $createTextCoords(this$static._initializer);
    this$static._initializer = null;
    this$static._initialized = true;
  }
  if (this$static._texCoords) {
    $clearGLFeatureGroup(state, ($clinit_GLFeatureGroupName() , COLOR_GROUP));
    this$static._scaleU != 1 || this$static._scaleV != 1 || this$static._translationU != 0 || this$static._translationV != 0?$addGLFeature(state, new TextureGLFeature_1(this$static._glTextureId._id, this$static._texCoords, this$static._transparent, this$static._glTextureId._isPremultiplied?_one:_srcAlpha, _oneMinusSrcAlpha, this$static._translationU, this$static._translationV, this$static._scaleU, this$static._scaleV, 0, 0, 0), false):$addGLFeature(state, new TextureGLFeature_0(this$static._glTextureId._id, this$static._texCoords, this$static._transparent, this$static._glTextureId._isPremultiplied?_one:_srcAlpha, _oneMinusSrcAlpha), false);
  }
   else {
    $logError(_instance_3, 'LazyTextureMapping::bind() with _texCoords == NULL', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  }
}

function $releaseGLTextureId(this$static){
  if (this$static._glTextureId) {
    $dispose_15(this$static._glTextureId);
    this$static._glTextureId = null;
  }
}

function $setGLTextureId(this$static, glTextureId){
  $releaseGLTextureId(this$static);
  this$static._glTextureId = glTextureId;
}

function LazyTextureMapping_0(initializer, ownedTexCoords, transparent){
  this._initializer = initializer;
  this._glTextureId = null;
  this._initialized = false;
  this._texCoords = null;
  this._translationU = 0;
  this._translationV = 0;
  this._scaleU = 1;
  this._scaleV = 1;
  this._ownedTexCoords = ownedTexCoords;
  this._transparent = transparent;
}

defineSeed(596, 597, makeCastMap([Q$LazyTextureMapping]), LazyTextureMapping_0);
_._initialized = false;
_._ownedTexCoords = false;
_._scaleU = 0;
_._scaleV = 0;
_._translationU = 0;
_._translationV = 0;
_._transparent = false;
function $dispose_10(this$static){
  var i_0, mapping;
  this$static._ownedMesh && !!this$static._mesh && this$static._mesh.dispose();
  if (this$static._mappings) {
    for (i_0 = 0; i_0 < this$static._mappings.size_0; i_0++) {
      mapping = dynamicCast($get_2(this$static._mappings, i_0), Q$LazyTextureMapping);
      !!mapping && $dispose_9(mapping);
    }
    this$static._mappings = null;
  }
  $_release(this$static._glState);
}

function $getCurrentTextureMapping(this$static){
  var i_0, i0, levelsCount, mapping, newCurrentLevel;
  if (!this$static._mappings) {
    return null;
  }
  if (this$static._currentLevel < 0) {
    newCurrentLevel = -1;
    levelsCount = this$static._mappings.size_0;
    for (i_0 = 0; i_0 < levelsCount; i_0++) {
      mapping = dynamicCast($get_2(this$static._mappings, i_0), Q$LazyTextureMapping);
      if (mapping) {
        if (mapping._glTextureId) {
          newCurrentLevel = i_0;
          break;
        }
      }
    }
    if (newCurrentLevel >= 0) {
      this$static._currentLevel = newCurrentLevel;
      $modifyGLState_0(dynamicCast($get_2(this$static._mappings, this$static._currentLevel), Q$LazyTextureMapping), this$static._glState);
      if (this$static._currentLevel < levelsCount - 1) {
        for (i0 = levelsCount - 1; i0 > this$static._currentLevel; i0--) {
          mapping = dynamicCast($get_2(this$static._mappings, i0), Q$LazyTextureMapping);
          !!mapping && $dispose_9(mapping);
          $remove_7(this$static._mappings, i0);
        }
        $trimToSize(this$static._mappings);
      }
    }
  }
  return this$static._currentLevel >= 0?dynamicCast($get_2(this$static._mappings, this$static._currentLevel), Q$LazyTextureMapping):null;
}

function $getTopLevelTextureId(this$static){
  var mapping;
  mapping = $getCurrentTextureMapping(this$static);
  if (mapping) {
    if (this$static._currentLevel == 0) {
      return mapping._glTextureId;
    }
  }
  return null;
}

function $setGLTextureIdForLevel(this$static, level, glTextureId){
  if (this$static._mappings.size_0 > 0) {
    if (glTextureId) {
      if (this$static._currentLevel < 0 || level < this$static._currentLevel) {
        $setGLTextureId(dynamicCast($get_2(this$static._mappings, level), Q$LazyTextureMapping), glTextureId);
        this$static._currentLevel = -1;
        return true;
      }
    }
  }
  return false;
}

function LeveledTexturedMesh_0(mesh, mappings){
  Mesh_0.call(this);
  this._mesh = mesh;
  this._ownedMesh = false;
  this._mappings = mappings;
  this._currentLevel = -1;
  this._glState = new GLState_0;
  if (!this._mappings) {
    throw new RuntimeException_1("LeveledTexturedMesh: mappings can't be NULL!");
  }
  if (this._mappings.size_0 <= 0) {
    throw new RuntimeException_1('LeveledTexturedMesh: empty mappings');
  }
}

defineSeed(598, 369, makeCastMap([Q$Mesh]), LeveledTexturedMesh_0);
_.dispose = function dispose_61(){
  $dispose_10(this);
}
;
_.getBoundingVolume = function getBoundingVolume_3(){
  return !this._mesh?null:this._mesh.getBoundingVolume();
}
;
_.rawRender = function rawRender_5(rc, parentGLState){
  var mapping;
  mapping = $getCurrentTextureMapping(this);
  if (!mapping) {
    $logError(_instance_3, 'LeveledTexturedMesh: No Texture Mapping', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    $render(this._mesh, rc, parentGLState);
  }
   else {
    $setParent_1(this._glState, parentGLState);
    $render(this._mesh, rc, this._glState);
  }
}
;
_._currentLevel = 0;
_._ownedMesh = false;
defineSeed(600, 379, makeCastMap([Q$Layer]));
_.createURL = function createURL_0(tile){
  var column, isb, level, numRows, path, row, subdomainsIndex, subdomainsSize;
  level = tile._level;
  column = tile._column;
  numRows = round_int(pow_0(2, level));
  row = numRows - tile._row - 1;
  isb = new StringBuilder_WebGL_0;
  $addString(isb, this._protocol);
  subdomainsSize = this._subdomains.size_0;
  if (subdomainsSize > 0) {
    subdomainsIndex = (level + column + row < 0?-(level + column + row):level + column + row) % subdomainsSize;
    $addString(isb, dynamicCast($get_2(this._subdomains, subdomainsIndex), Q$String));
  }
  $addString(isb, this._domain);
  isb._string += '/';
  isb._string += level;
  isb._string += '/';
  isb._string += column;
  isb._string += '/';
  isb._string += row;
  isb._string += '.';
  $addString(isb, this._imageFormat);
  path = isb._string;
  return new URL_2(path);
}
;
_.description_0 = function description_16(){
  return '[MercatorTiledLayer]';
}
;
_.getDataSector = function getDataSector_0(){
  return $clinit_Sector() , $clinit_Sector() , FULL_SPHERE;
}
;
_.getRenderState = function getRenderState_2(){
  return $clinit_RenderState() , $clinit_RenderState() , READY;
}
;
_.rawContribution = function rawContribution_0(tile){
  var requestedImageSector, tileP;
  tileP = $getParentTileOfSuitableLevel(this, tile);
  if (!tileP) {
    return null;
  }
  if (tile == tileP) {
    return this._transparency < 1?fullCoverageTransparent(this._transparency):($clinit_TileImageContribution() , ++FULL_COVERAGE_OPAQUE._referenceCounter , $clinit_TileImageContribution() , FULL_COVERAGE_OPAQUE);
  }
  requestedImageSector = tileP._sector;
  return this._transparency < 1?partialCoverageTransparent(requestedImageSector, this._transparency):($clinit_TileImageContribution() , new TileImageContribution_0(requestedImageSector, false, 1));
}
;
function MapQuestLayer_0(subdomains){
  MapQuestLayer_1.call(this, subdomains, new ArrayList_0);
}

function MapQuestLayer_1(subdomains, layerInfo){
  RasterLayer_0.call(this, new LayerTilesRenderParameters_0(($clinit_Sector() , $clinit_Sector() , FULL_SPHERE), 1, 1, 2, 19, new Vector2I_0(256, 256), new Vector2S_0(16, 16), true), layerInfo);
  this._protocol = 'http://';
  this._domain = 'mqcdn.com/tiles/1.0.0/map';
  this._subdomains = subdomains;
  this._imageFormat = 'jpg';
}

function newOSM(){
  var result;
  return new MapQuestLayer_0((result = new ArrayList_0 , setCheck(result.array, result.size_0++, 'otile1.') , setCheck(result.array, result.size_0++, 'otile2.') , setCheck(result.array, result.size_0++, 'otile3.') , setCheck(result.array, result.size_0++, 'otile4.') , result));
}

defineSeed(599, 600, makeCastMap([Q$Layer]), MapQuestLayer_0);
_.description_0 = function description_17(){
  return '[MapQuestLayer]';
}
;
_.getRenderState = function getRenderState_3(){
  return $clinit_RenderState() , $clinit_RenderState() , READY;
}
;
function $createMultiplication(this$static, that){
  var m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33, that00, that01, that02, that03, that10, that11, that12, that13, that20, that21, that22, that23, that30, that31, that32, that33;
  that00 = that._m00;
  that10 = that._m10;
  that20 = that._m20;
  that30 = that._m30;
  that01 = that._m01;
  that11 = that._m11;
  that21 = that._m21;
  that31 = that._m31;
  that02 = that._m02;
  that12 = that._m12;
  that22 = that._m22;
  that32 = that._m32;
  that03 = that._m03;
  that13 = that._m13;
  that23 = that._m23;
  that33 = that._m33;
  m00 = this$static._m00 * that00 + this$static._m01 * that10 + this$static._m02 * that20 + this$static._m03 * that30;
  m01 = this$static._m00 * that01 + this$static._m01 * that11 + this$static._m02 * that21 + this$static._m03 * that31;
  m02 = this$static._m00 * that02 + this$static._m01 * that12 + this$static._m02 * that22 + this$static._m03 * that32;
  m03 = this$static._m00 * that03 + this$static._m01 * that13 + this$static._m02 * that23 + this$static._m03 * that33;
  m10 = this$static._m10 * that00 + this$static._m11 * that10 + this$static._m12 * that20 + this$static._m13 * that30;
  m11 = this$static._m10 * that01 + this$static._m11 * that11 + this$static._m12 * that21 + this$static._m13 * that31;
  m12 = this$static._m10 * that02 + this$static._m11 * that12 + this$static._m12 * that22 + this$static._m13 * that32;
  m13 = this$static._m10 * that03 + this$static._m11 * that13 + this$static._m12 * that23 + this$static._m13 * that33;
  m20 = this$static._m20 * that00 + this$static._m21 * that10 + this$static._m22 * that20 + this$static._m23 * that30;
  m21 = this$static._m20 * that01 + this$static._m21 * that11 + this$static._m22 * that21 + this$static._m23 * that31;
  m22 = this$static._m20 * that02 + this$static._m21 * that12 + this$static._m22 * that22 + this$static._m23 * that32;
  m23 = this$static._m20 * that03 + this$static._m21 * that13 + this$static._m22 * that23 + this$static._m23 * that33;
  m30 = this$static._m30 * that00 + this$static._m31 * that10 + this$static._m32 * that20 + this$static._m33 * that30;
  m31 = this$static._m30 * that01 + this$static._m31 * that11 + this$static._m32 * that21 + this$static._m33 * that31;
  m32 = this$static._m30 * that02 + this$static._m31 * that12 + this$static._m32 * that22 + this$static._m33 * that32;
  m33 = this$static._m30 * that03 + this$static._m31 * that13 + this$static._m32 * that23 + this$static._m33 * that33;
  return new Matrix44D_0(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33);
}

function $getColumnMajorFloatArray(this$static){
  if (this$static._columnMajorFloatArray == null) {
    this$static._columnMajorFloatArray = initDim(_3F_classLit, makeCastMap([Q$Serializable]), -1, 16, 1);
    this$static._columnMajorFloatArray[0] = this$static._m00;
    this$static._columnMajorFloatArray[1] = this$static._m10;
    this$static._columnMajorFloatArray[2] = this$static._m20;
    this$static._columnMajorFloatArray[3] = this$static._m30;
    this$static._columnMajorFloatArray[4] = this$static._m01;
    this$static._columnMajorFloatArray[5] = this$static._m11;
    this$static._columnMajorFloatArray[6] = this$static._m21;
    this$static._columnMajorFloatArray[7] = this$static._m31;
    this$static._columnMajorFloatArray[8] = this$static._m02;
    this$static._columnMajorFloatArray[9] = this$static._m12;
    this$static._columnMajorFloatArray[10] = this$static._m22;
    this$static._columnMajorFloatArray[11] = this$static._m32;
    this$static._columnMajorFloatArray[12] = this$static._m03;
    this$static._columnMajorFloatArray[13] = this$static._m13;
    this$static._columnMajorFloatArray[14] = this$static._m23;
    this$static._columnMajorFloatArray[15] = this$static._m33;
  }
  return this$static._columnMajorFloatArray;
}

function Matrix44D_0(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33){
  RCObject_0.call(this);
  this._m00 = m00;
  this._m01 = m01;
  this._m02 = m02;
  this._m03 = m03;
  this._m10 = m10;
  this._m11 = m11;
  this._m12 = m12;
  this._m13 = m13;
  this._m20 = m20;
  this._m21 = m21;
  this._m22 = m22;
  this._m23 = m23;
  this._m30 = m30;
  this._m31 = m31;
  this._m32 = m32;
  this._m33 = m33;
  this._columnMajorFloatArray = null;
  this._columnMajorFloatBuffer = null;
}

function Matrix44D_1(m_0){
  RCObject_0.call(this);
  this._m00 = m_0._m00;
  this._m01 = m_0._m01;
  this._m02 = m_0._m02;
  this._m03 = m_0._m03;
  this._m10 = m_0._m10;
  this._m11 = m_0._m11;
  this._m12 = m_0._m12;
  this._m13 = m_0._m13;
  this._m20 = m_0._m20;
  this._m21 = m_0._m21;
  this._m22 = m_0._m22;
  this._m23 = m_0._m23;
  this._m30 = m_0._m30;
  this._m31 = m_0._m31;
  this._m32 = m_0._m32;
  this._m33 = m_0._m33;
  this._columnMajorFloatArray = null;
  this._columnMajorFloatBuffer = null;
}

defineSeed(601, 413, makeCastMap([Q$Matrix44D, Q$RCObject]), Matrix44D_0, Matrix44D_1);
_.dispose = function dispose_62(){
  this._columnMajorFloatArray = null;
  !!this._columnMajorFloatBuffer && $dispose_19(this._columnMajorFloatBuffer);
  $dispose_1(this);
}
;
_.getColumnMajorFloatBuffer = function getColumnMajorFloatBuffer(){
  !this._columnMajorFloatBuffer && (this._columnMajorFloatBuffer = new FloatBuffer_WebGL_0(this._m00, this._m10, this._m20, this._m30, this._m01, this._m11, this._m21, this._m31, this._m02, this._m12, this._m22, this._m32, this._m03, this._m13, this._m23, this._m33));
  return this._columnMajorFloatBuffer;
}
;
_._m00 = 0;
_._m01 = 0;
_._m02 = 0;
_._m03 = 0;
_._m10 = 0;
_._m11 = 0;
_._m12 = 0;
_._m13 = 0;
_._m20 = 0;
_._m21 = 0;
_._m22 = 0;
_._m23 = 0;
_._m30 = 0;
_._m31 = 0;
_._m32 = 0;
_._m33 = 0;
function Matrix44DProvider_0(){
  RCObject_0.call(this);
}

defineSeed(603, 413, makeCastMap([Q$Matrix44DProvider, Q$RCObject]));
_.dispose = function dispose_63(){
  $dispose_1(this);
}
;
function $setMatrix_0(this$static, matrix){
  if (!matrix) {
    throw new RuntimeException_1('Setting NULL in Matrix44D Holder');
  }
  if (matrix != this$static._matrix) {
    !!this$static._matrix && $_release(this$static._matrix);
    this$static._matrix = matrix;
    ++this$static._matrix._referenceCounter;
  }
}

function Matrix44DHolder_0(matrix){
  Matrix44DProvider_0.call(this);
  this._matrix = matrix;
  if (!matrix) {
    throw new RuntimeException_1('Setting NULL in Matrix44D Holder');
  }
  ++this._matrix._referenceCounter;
}

defineSeed(602, 603, makeCastMap([Q$Matrix44DProvider, Q$RCObject]), Matrix44DHolder_0);
_.dispose = function dispose_64(){
  $_release(this._matrix);
  $dispose_1(this);
}
;
_.getMatrix = function getMatrix(){
  return this._matrix;
}
;
function $getMatrix(this$static){
  var i_0, m_0, m2, m3;
  if (this$static._modelview) {
    for (i_0 = 0; i_0 < this$static._matricesSize; i_0++) {
      m_0 = this$static._providers[i_0].getMatrix();
      !m_0 && $logError(_instance_3, 'Modelview multiplication failure', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
      if (this$static._matrices[i_0] != m_0) {
        $_release(this$static._modelview);
        this$static._modelview = null;
        $pullMatrixes(this$static);
        break;
      }
    }
  }
  if (!this$static._modelview) {
    this$static._modelview = new Matrix44D_1(this$static._matrices[0]);
    for (i_0 = 1; i_0 < this$static._matricesSize; i_0++) {
      m2 = this$static._matrices[i_0];
      m3 = $createMultiplication(this$static._modelview, m2);
      $_release(this$static._modelview);
      this$static._modelview = m3;
    }
  }
  return this$static._modelview;
}

function $pullMatrixes(this$static){
  var j, newMatrix;
  for (j = 0; j < this$static._matricesSize; j++) {
    newMatrix = this$static._providers[j].getMatrix();
    if (newMatrix != this$static._matrices[j]) {
      !!this$static._matrices[j] && $_release(this$static._matrices[j]);
      this$static._matrices[j] = newMatrix;
      ++this$static._matrices[j]._referenceCounter;
    }
  }
}

function Matrix44DMultiplicationHolder_0(providers, matricesSize){
  var i_0;
  Matrix44DProvider_0.call(this);
  this._matricesSize = matricesSize;
  this._modelview = null;
  this._matrices = initDim(_3Lorg_glob3_mobile_generated_Matrix44D_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Matrix44D, this._matricesSize, 0);
  this._providers = initDim(_3Lorg_glob3_mobile_generated_Matrix44DProvider_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Matrix44DProvider, this._matricesSize, 0);
  for (i_0 = 0; i_0 < this._matricesSize; i_0++) {
    this._matrices[i_0] = null;
    setCheck(this._providers, i_0, providers[i_0]);
    ++this._providers[i_0]._referenceCounter;
  }
  $pullMatrixes(this);
}

defineSeed(604, 603, makeCastMap([Q$Matrix44DProvider, Q$RCObject]), Matrix44DMultiplicationHolder_0);
_.dispose = function dispose_65(){
  var j;
  for (j = 0; j < this._matricesSize; j++) {
    !!this._matrices[j] && $_release(this._matrices[j]);
    $_release(this._providers[j]);
  }
  !!this._modelview && $_release(this._modelview);
  $dispose_1(this);
}
;
_.getMatrix = function getMatrix_0(){
  return $getMatrix(this);
}
;
_._matricesSize = 0;
function $add_18(this$static, provider){
  $add_5(this$static._providers, provider);
  ++provider._referenceCounter;
}

function $create_3(this$static){
  var i_0, providersSize, ps;
  providersSize = this$static._providers.size_0;
  ps = initDim(_3Lorg_glob3_mobile_generated_Matrix44DProvider_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Matrix44DProvider, providersSize, 0);
  for (i_0 = 0; i_0 < providersSize; i_0++) {
    setCheck(ps, i_0, dynamicCast($get_2(this$static._providers, i_0), Q$Matrix44DProvider));
  }
  return new Matrix44DMultiplicationHolder_0(ps, providersSize);
}

function $dispose_11(this$static){
  var i_0, providersSize;
  providersSize = this$static._providers.size_0;
  for (i_0 = 0; i_0 < providersSize; i_0++) {
    $_release(dynamicCast($get_2(this$static._providers, i_0), Q$Matrix44DProvider));
  }
}

function Matrix44DMultiplicationHolderBuilder_0(){
  this._providers = new ArrayList_0;
}

defineSeed(605, 1, {}, Matrix44DMultiplicationHolderBuilder_0);
function $meetsRenderCriteria_0(this$static, rc, prc, tile){
  var elapsedTime, hasSubtiles, result;
  hasSubtiles = !!tile._subtiles;
  if (!hasSubtiles) {
    if (this$static._splitsInFrameCounter > 0) {
      elapsedTime = $elapsedTimeInMilliseconds(rc._frameStartTimer);
      if (gt(elapsedTime, this$static._maxFrameTimeInMs)) {
        return true;
      }
    }
  }
  result = this$static._tileLODTester.meetsRenderCriteria(rc, prc, tile);
  !result && !hasSubtiles && ++this$static._splitsInFrameCounter;
  return result;
}

function $renderStarted(this$static){
  this$static._splitsInFrameCounter = 0;
  this$static._tileLODTester.renderStarted();
}

function MaxFrameTimeTileLODTester_0(maxFrameTime, tileLODTester){
  DecoratorTileLODTester_0.call(this, tileLODTester);
  this._maxFrameTimeInMs = maxFrameTime._milliseconds;
  this._splitsInFrameCounter = 0;
}

defineSeed(606, 444, {}, MaxFrameTimeTileLODTester_0);
_.meetsRenderCriteria = function meetsRenderCriteria_0(rc, prc, tile){
  return $meetsRenderCriteria_0(this, rc, prc, tile);
}
;
_.renderStarted = function renderStarted_0(){
  $renderStarted(this);
}
;
_._maxFrameTimeInMs = P0_longLit;
_._splitsInFrameCounter = 0;
function $meetsRenderCriteria_1(this$static, tile){
  if (this$static._maxLevel < 0) {
    return true;
  }
  if (tile._level >= this$static._maxLevel) {
    return true;
  }
  if (tile._level >= this$static._maxLevelForPoles && $touchesPoles(tile._sector)) {
    return true;
  }
  return false;
}

function $onLayerTilesRenderParametersChanged_0(this$static, ltrp){
  if (!ltrp) {
    this$static._maxLevel = -1;
    this$static._maxLevelForPoles = -1;
  }
   else {
    this$static._maxLevel = ltrp._maxLevel;
    this$static._maxLevelForPoles = ltrp._maxLevelForPoles;
  }
}

function MaxLevelTileLODTester_0(){
  this._maxLevel = -1;
  this._maxLevelForPoles = -1;
}

defineSeed(607, 445, {}, MaxLevelTileLODTester_0);
_.meetsRenderCriteria = function meetsRenderCriteria_1(rc, prc, tile){
  return $meetsRenderCriteria_1(this, tile);
}
;
_.onLayerTilesRenderParametersChanged = function onLayerTilesRenderParametersChanged_0(ltrp){
  $onLayerTilesRenderParametersChanged_0(this, ltrp);
}
;
_.onTileHasChangedMesh = function onTileHasChangedMesh_0(tile){
}
;
_.renderStarted = function renderStarted_1(){
}
;
_._maxLevel = 0;
_._maxLevelForPoles = 0;
function $clinit_MercatorUtils(){
  $clinit_MercatorUtils = nullMethod;
  new Angle_0(85.0511287798, 1.4844222297452172);
  new Angle_0(-85.0511287798, -1.4844222297452172);
  new Angle_0(85.0511287798, 1.4844222297452172);
  new Angle_0(-85.0511287798, -1.4844222297452172);
}

function calculateSplitLatitude(lowerLatitude, upperLatitude){
  var exp_0, atan_0;
  $clinit_MercatorUtils();
  var middleV;
  middleV = (getMercatorV(lowerLatitude) + getMercatorV(upperLatitude)) / 2;
  return exp_0 = Math.exp(-6.283185307179586 * (1 - middleV - 0.5)) , atan_0 = Math.atan(exp_0) , new Angle_0((1.5707963267948966 - 2 * atan_0) * 57.29577951308232, 1.5707963267948966 - 2 * atan_0);
}

function getMercatorV(latitude){
  $clinit_MercatorUtils();
  var latSin;
  if (latitude._degrees >= 85.0511287798) {
    return 0;
  }
  if (latitude._degrees <= -85.0511287798) {
    return 1;
  }
  latSin = sin_0(latitude._radians);
  return 1 - (Math.log((1 + latSin) / (1 - latSin)) / 12.566370614359172 + 0.5);
}

function $isVisible(rc, prc, tile){
  var mesh;
  mesh = $getTessellatorMesh(tile, rc, prc);
  if (!mesh) {
    return false;
  }
  return mesh.getBoundingVolume().touchesFrustum(prc._frustumInModelCoordinates);
}

function MeshBoundingVolumeTileVisibilityTester_0(){
}

defineSeed(609, 447, {}, MeshBoundingVolumeTileVisibilityTester_0);
function $setMesh(this$static, mesh){
  if (this$static._mesh != mesh) {
    !!this$static._mesh && $dispose_7(this$static._mesh);
    this$static._mesh = mesh;
  }
}

function MeshHolder_0(mesh){
  Mesh_0.call(this);
  this._mesh = mesh;
}

defineSeed(610, 369, makeCastMap([Q$Mesh, Q$MeshHolder]), MeshHolder_0);
_.dispose = function dispose_66(){
  !!this._mesh && $dispose_7(this._mesh);
}
;
_.getBoundingVolume = function getBoundingVolume_4(){
  return $getBoundingVolume(this._mesh);
}
;
_.rawRender = function rawRender_6(rc, parentGLState){
  $render(this._mesh, rc, parentGLState);
}
;
function $addMesh_0(this$static, mesh){
  $add_5(this$static._meshes, mesh);
}

function $drainLoadQueue(this$static){
  var i_0, loadQueueSize;
  loadQueueSize = this$static._loadQueue.size_0;
  for (i_0 = 0; i_0 < loadQueueSize; i_0++) {
    throwClassCastExceptionUnlessNull($get_2(this$static._loadQueue, i_0));
    $requestMeshBuffer(this$static, null.nullField, null.nullField, null.nullField, null.nullField, null.nullField, null.nullField);
  }
  $clear(this$static._loadQueue);
}

function $requestMeshBuffer(this$static, url_0, priority, pointSize, deltaHeight, color_0, isBSON){
  var downloader;
  downloader = this$static._context._downloader;
  $requestBuffer(downloader, url_0, priority, new MeshRenderer_MeshBufferDownloadListener_0(this$static, pointSize, deltaHeight, color_0, this$static._context._threadUtils, isBSON, this$static._context));
}

function MeshRenderer_0(){
  DefaultRenderer_0.call(this);
  this._meshes = new ArrayList_0;
  this._loadQueue = new ArrayList_0;
  this._glState = new GLState_0;
  this._context = null;
}

defineSeed(611, 449, makeCastMap([Q$Renderer]), MeshRenderer_0);
_.onChangedContext = function onChangedContext_0(){
  !!this._context && $drainLoadQueue(this);
}
;
_.onResizeViewportEvent = function onResizeViewportEvent_4(ec, width_0, height){
}
;
_.render = function render_8(rc, glState){
  var boundingVolume, camera, frustum, i_0, mesh, meshesCount, f;
  meshesCount = this._meshes.size_0;
  if (meshesCount > 0) {
    camera = rc._currentCamera;
    f = dynamicCast($getGLFeature(this._glState, 13), Q$ModelViewGLFeature);
    !f?$addGLFeature(this._glState, new ModelViewGLFeature_0(camera), true):$setMatrix(f, $asMatrix44D($getModelViewMatrix(camera)));
    frustum = $getFrustumInModelCoordinates(camera);
    $setParent_1(this._glState, glState);
    for (i_0 = 0; i_0 < meshesCount; i_0++) {
      mesh = dynamicCast($get_2(this._meshes, i_0), Q$Mesh);
      boundingVolume = mesh.getBoundingVolume();
      !!boundingVolume && boundingVolume.touchesFrustum(frustum) && $render(mesh, rc, this._glState);
    }
  }
}
;
function MeshRenderer_MeshBufferDownloadListener_0(meshRenderer, pointSize, deltaHeight, color_0, threadUtils, isBSON, context){
  this._meshRenderer = meshRenderer;
  this._pointSize = pointSize;
  this._deltaHeight = deltaHeight;
  this._color = color_0;
  this._threadUtils = threadUtils;
  this._isBSON = isBSON;
  this._context = context;
}

defineSeed(612, 382, {}, MeshRenderer_MeshBufferDownloadListener_0);
_.dispose = function dispose_67(){
  this._color = null;
  this._color = null;
}
;
_.onCancel = function onCancel_0(url_0){
  $logInfo(_instance_3, 'Canceled download of "%s"', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [url_0._path]));
}
;
_.onCanceledDownload = function onCanceledDownload_0(url_0, buffer, expired){
}
;
_.onDownload = function onDownload_0(url_0, buffer, expired){
  $logInfo(_instance_3, 'Downloaded Mesh buffer from "%s" (%db)', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [url_0._path, valueOf_0(buffer._buffer.length)]));
  $invokeTask(this._threadUtils, new IThreadUtils_BackgroundTask_0(new MeshRenderer_MeshParserAsyncTask_0(this._meshRenderer, url_0, buffer, this._pointSize, this._deltaHeight, this._color, this._isBSON, this._context)));
  this._color = null;
}
;
_.onError = function onError_0(url_0){
  $logError(_instance_3, 'Error downloading "%s"', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [url_0._path]));
}
;
_._deltaHeight = 0;
_._isBSON = false;
_._pointSize = 0;
function $interpolateColor(from, middle, to, d){
  if (d <= 0) {
    return from;
  }
  if (d >= 1) {
    return to;
  }
  if (d <= 0.5) {
    return $mixedWith(from, middle, d * 2);
  }
  return $mixedWith(middle, to, (d - 0.5) * 2);
}

function $onPostExecute(this$static){
  if (!this$static._mesh) {
    $logError(_instance_3, 'Error parsing Mesh from "%s"', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [this$static._url._path]));
  }
   else {
    $logInfo(_instance_3, 'Adding Mesh to _meshRenderer', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    $addMesh_0(this$static._meshRenderer, this$static._mesh);
    this$static._mesh = null;
  }
}

function $parseMesh(this$static, jsonBaseObject){
  var coordinatesSize, height, i_0, i0, i1, indices, indicesSize, jsonCoordinates, jsonIndices, jsonNormals, jsonObject, latInDegrees, lonInDegrees, normals, normalsSize, vertices;
  jsonObject = jsonBaseObject.asObject();
  if (!jsonObject) {
    $logError(_instance_3, 'Invalid format for \'base object\' of "%s"', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [this$static._url._path]));
  }
   else {
    jsonCoordinates = $getAsArray(jsonObject, 'coordinates');
    if (!jsonCoordinates) {
      $logError(_instance_3, 'Invalid format for \'coordinates\' of "%s"', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [this$static._url._path]));
      $logInfo(_instance_3, '"%s"', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [$description_2(jsonObject)]));
    }
     else {
      vertices = new FloatBufferBuilderFromGeodetic_2(this$static._context._planet, ($clinit_Vector3D() , zero));
      coordinatesSize = jsonCoordinates._entries.size_0;
      for (i1 = 0; i1 < coordinatesSize; i1 += 3) {
        latInDegrees = $getAsNumber(jsonCoordinates, i1, 0);
        lonInDegrees = $getAsNumber(jsonCoordinates, i1 + 1, 0);
        height = $getAsNumber(jsonCoordinates, i1 + 2, 0);
        $add_13(vertices, new Angle_0(latInDegrees, latInDegrees / 180 * 3.141592653589793), new Angle_0(lonInDegrees, lonInDegrees / 180 * 3.141592653589793), height);
      }
      jsonNormals = $getAsArray(jsonObject, 'normals');
      normalsSize = jsonNormals._entries.size_0;
      normals = new FloatBuffer_WebGL_1(normalsSize);
      for (i0 = 0; i0 < normalsSize; i0++) {
        $put_1(normals, i0, $getAsNumber(jsonNormals, i0, 0));
      }
      jsonIndices = $getAsArray(jsonObject, 'indices');
      indicesSize = jsonIndices._entries.size_0;
      indices = new ShortBuffer_WebGL_0(indicesSize);
      for (i_0 = 0; i_0 < indicesSize; i_0++) {
        $jsPut(indices, i_0, round_short($getAsNumber(jsonIndices, i_0, 0)));
      }
      this$static._mesh = new IndexedMesh_1(_triangles, new Vector3D_0(vertices._cx, vertices._cy, vertices._cz), new FloatBuffer_WebGL_2(vertices._values._array, vertices._values._size), indices, this$static._color, normals);
      this$static._color = null;
    }
  }
}

function $parsePointCloudMesh(this$static, jsonBaseObject){
  var averagePoint, blue, colors, colorsBuilder, colorsSize, fromColor, green, height, i_0, i0, interpolatedColor, jsonAveragePoint, jsonColors, jsonObject, jsonPoints, latInDegrees, lonInDegrees, maxHeight, middleColor, minHeight, red, size_0, toColor, verticesBuilder;
  jsonObject = jsonBaseObject.asObject();
  if (!jsonObject) {
    $logError(_instance_3, 'Invalid format for PointCloud', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  }
   else {
    size_0 = round_int($getAsNumber_1(jsonObject, 'size', -1));
    if (size_0 <= 0) {
      $logError(_instance_3, 'Invalid size for PointCloud', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    }
     else {
      averagePoint = null;
      jsonAveragePoint = $getAsArray(jsonObject, 'averagePoint');
      if (!!jsonAveragePoint && jsonAveragePoint._entries.size_0 == 3) {
        lonInDegrees = $getAsNumber(jsonAveragePoint, 0, 0);
        latInDegrees = $getAsNumber(jsonAveragePoint, 1, 0);
        height = $getAsNumber(jsonAveragePoint, 2, 0);
        averagePoint = new Geodetic3D_0(new Angle_0(latInDegrees, latInDegrees / 180 * 3.141592653589793), new Angle_0(lonInDegrees, lonInDegrees / 180 * 3.141592653589793), height + this$static._deltaHeight);
      }
       else {
        $logError(_instance_3, 'Invalid averagePoint for PointCloud', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
      }
      jsonPoints = $getAsArray(jsonObject, 'points');
      if (!jsonPoints || size_0 * 3 != jsonPoints._entries.size_0) {
        $logError(_instance_3, 'Invalid points for PointCloud', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
      }
       else {
        verticesBuilder = !averagePoint?new FloatBufferBuilderFromGeodetic_2(this$static._context._planet, ($clinit_Vector3D() , zero)):new FloatBufferBuilderFromGeodetic_1(this$static._context._planet, averagePoint);
        minHeight = $getAsNumber(jsonPoints, 2, 0);
        maxHeight = minHeight;
        for (i_0 = 0; i_0 < size_0 * 3; i_0 += 3) {
          lonInDegrees = $getAsNumber(jsonPoints, i_0, 0);
          latInDegrees = $getAsNumber(jsonPoints, i_0 + 1, 0);
          height = $getAsNumber(jsonPoints, i_0 + 2, 0);
          $add_13(verticesBuilder, new Angle_0(latInDegrees, latInDegrees / 180 * 3.141592653589793), new Angle_0(lonInDegrees, lonInDegrees / 180 * 3.141592653589793), height + this$static._deltaHeight);
          height < minHeight && (minHeight = height);
          height > maxHeight && (maxHeight = height);
        }
        jsonColors = $getAsArray(jsonObject, 'colors');
        if (!jsonColors) {
          fromColor = new Color_0(1, 0, 0, 1);
          middleColor = new Color_0(0, 1, 0, 1);
          toColor = new Color_0(0, 0, 1, 1);
          colorsBuilder = new FloatBufferBuilderFromColor_0;
          for (i0 = 0; i0 < size_0 * 3; i0 += 3) {
            height = $getAsNumber(jsonPoints, i0 + 2, 0);
            interpolatedColor = $interpolateColor(fromColor, middleColor, toColor, (height - maxHeight) / (minHeight - maxHeight));
            $push_back(colorsBuilder._values, interpolatedColor._red);
            $push_back(colorsBuilder._values, interpolatedColor._green);
            $push_back(colorsBuilder._values, interpolatedColor._blue);
            $push_back(colorsBuilder._values, interpolatedColor._alpha);
          }
          colors = new FloatBuffer_WebGL_2(colorsBuilder._values._array, colorsBuilder._values._size);
        }
         else {
          colorsBuilder = new FloatBufferBuilderFromColor_0;
          colorsSize = jsonColors._entries.size_0;
          for (i0 = 0; i0 < colorsSize; i0 += 3) {
            red = round_int($getAsNumber(jsonColors, i0, 0));
            green = round_int($getAsNumber(jsonColors, i0 + 1, 0));
            blue = round_int($getAsNumber(jsonColors, i0 + 2, 0));
            $push_back(colorsBuilder._values, red / 255);
            $push_back(colorsBuilder._values, green / 255);
            $push_back(colorsBuilder._values, blue / 255);
            $push_back(colorsBuilder._values, 1);
          }
          colors = new FloatBuffer_WebGL_2(colorsBuilder._values._array, colorsBuilder._values._size);
        }
        this$static._mesh = new DirectMesh_1(_points, new Vector3D_0(verticesBuilder._cx, verticesBuilder._cy, verticesBuilder._cz), new FloatBuffer_WebGL_2(verticesBuilder._values._array, verticesBuilder._values._size), 1, this$static._pointSize, null, colors, true);
      }
    }
  }
}

function $runInBackground(this$static){
  var jsonBaseObject;
  jsonBaseObject = this$static._isBSON?parse_1(this$static._buffer):$parse($getAsString_0(this$static._buffer));
  if (jsonBaseObject) {
    switch (null.nullMethod()) {
      case 0:
        $parsePointCloudMesh(this$static, jsonBaseObject);
        break;
      case 1:
        $parseMesh(this$static, jsonBaseObject);
    }
    !!jsonBaseObject && jsonBaseObject.dispose();
  }
  this$static._buffer = null;
}

function MeshRenderer_MeshParserAsyncTask_0(meshRenderer, url_0, buffer, pointSize, deltaHeight, color_0, isBSON, context){
  this._meshRenderer = meshRenderer;
  this._url = url_0;
  this._buffer = buffer;
  this._pointSize = pointSize;
  this._deltaHeight = deltaHeight;
  this._isBSON = isBSON;
  this._context = context;
  this._mesh = null;
  this._color = color_0;
}

defineSeed(613, 477, {}, MeshRenderer_MeshParserAsyncTask_0);
_._deltaHeight = 0;
_._isBSON = false;
_._pointSize = 0;
function ModelGLFeature_0(model){
  GLCameraGroupFeature_0.call(this, model, 3);
}

defineSeed(614, 483, makeCastMap([Q$GLCameraGroupFeature, Q$GLFeature, Q$RCObject]), ModelGLFeature_0);
_.dispose = function dispose_68(){
  $_release(this._matrixHolder);
  !!this._values && $dispose_6(this._values);
  $dispose_1(this);
}
;
function ModelTransformGLFeature_0(transform){
  GLCameraGroupFeature_0.call(this, transform, 5);
}

defineSeed(615, 483, makeCastMap([Q$GLCameraGroupFeature, Q$GLFeature, Q$RCObject]), ModelTransformGLFeature_0);
_.dispose = function dispose_69(){
  $_release(this._matrixHolder);
  !!this._values && $dispose_6(this._values);
  $dispose_1(this);
}
;
function ModelViewGLFeature_0(camera){
  GLCameraGroupFeature_0.call(this, $asMatrix44D($getModelViewMatrix(camera)), 13);
}

defineSeed(616, 483, makeCastMap([Q$GLCameraGroupFeature, Q$GLFeature, Q$ModelViewGLFeature, Q$RCObject]), ModelViewGLFeature_0);
_.dispose = function dispose_70(){
  $_release(this._matrixHolder);
  !!this._values && $dispose_6(this._values);
  $dispose_1(this);
}
;
function $create_4(this$static, errors){
  if (!this$static._topSector) {
    setCheck(errors.array, errors.size_0++, "Can't find any enabled Layer");
    return null;
  }
  return new LayerTilesRenderParameters_0(this$static._topSector, this$static._topSectorSplitsByLatitude, this$static._topSectorSplitsByLongitude, this$static._firstLevel, this$static._maxLevel, new Vector2I_0(this$static._tileTextureWidth, this$static._tileTextureHeight), new Vector2S_0(this$static._tileMeshWidth, this$static._tileMeshHeight), this$static._mercator);
}

function $update_0(this$static, layer, errors){
  var foundI, i_0, layerParametersVector, parameters;
  layerParametersVector = layer.getLayerTilesRenderParametersVector();
  if (!this$static._topSector) {
    return $update_1(this$static, (checkIndex(0, layerParametersVector.size_0) , dynamicCast(layerParametersVector.array[0], Q$LayerTilesRenderParameters)), errors);
  }
  foundI = -1;
  for (i_0 = 0; i_0 < layerParametersVector.size_0; i_0++) {
    parameters = (checkIndex(i_0, layerParametersVector.size_0) , dynamicCast(layerParametersVector.array[i_0], Q$LayerTilesRenderParameters));
    if (parameters._mercator == this$static._mercator) {
      foundI = i_0;
      break;
    }
  }
  if (foundI < 0) {
    $add_5(errors, "Can't find a compatible LayerTilesRenderParameters in layer " + layer.description_0());
    return false;
  }
  layer.selectLayerTilesRenderParameters(foundI);
  return $update_1(this$static, (checkIndex(foundI, layerParametersVector.size_0) , dynamicCast(layerParametersVector.array[foundI], Q$LayerTilesRenderParameters)), errors);
}

function $update_1(this$static, parameters, errors){
  if (!this$static._topSector) {
    this$static._topSector = new Sector_1(parameters._topSector);
    this$static._topSectorSplitsByLatitude = parameters._topSectorSplitsByLatitude;
    this$static._topSectorSplitsByLongitude = parameters._topSectorSplitsByLongitude;
    this$static._firstLevel = parameters._firstLevel;
    this$static._maxLevel = parameters._maxLevel;
    this$static._tileTextureWidth = parameters._tileTextureResolution._x;
    this$static._tileTextureHeight = parameters._tileTextureResolution._y;
    this$static._tileMeshWidth = parameters._tileMeshResolution._x;
    this$static._tileMeshHeight = parameters._tileMeshResolution._y;
    this$static._mercator = parameters._mercator;
    return true;
  }
  if (this$static._mercator != parameters._mercator) {
    setCheck(errors.array, errors.size_0++, "Inconsistency in Layer's Parameters: mercator");
    return false;
  }
  if (!$isEquals_3(this$static._topSector, parameters._topSector)) {
    setCheck(errors.array, errors.size_0++, "Inconsistency in Layer's Parameters: topSector");
    return false;
  }
  if (this$static._topSectorSplitsByLatitude != parameters._topSectorSplitsByLatitude) {
    setCheck(errors.array, errors.size_0++, "Inconsistency in Layer's Parameters: topSectorSplitsByLatitude");
    return false;
  }
  if (this$static._topSectorSplitsByLongitude != parameters._topSectorSplitsByLongitude) {
    setCheck(errors.array, errors.size_0++, "Inconsistency in Layer's Parameters: topSectorSplitsByLongitude");
    return false;
  }
  if (this$static._tileTextureWidth != parameters._tileTextureResolution._x || this$static._tileTextureHeight != parameters._tileTextureResolution._y) {
    setCheck(errors.array, errors.size_0++, "Inconsistency in Layer's Parameters: tileTextureResolution");
    return false;
  }
  if (this$static._tileMeshWidth != parameters._tileMeshResolution._x || this$static._tileMeshHeight != parameters._tileMeshResolution._y) {
    setCheck(errors.array, errors.size_0++, "Inconsistency in Layer's Parameters: tileMeshResolution");
    return false;
  }
  if (this$static._maxLevel < parameters._maxLevel) {
    $logWarning(_instance_3, "Inconsistency in Layer's Parameters: maxLevel (upgrading from %d to %d)", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(this$static._maxLevel), valueOf_0(parameters._maxLevel)]));
    this$static._maxLevel = parameters._maxLevel;
  }
  if (this$static._firstLevel < parameters._firstLevel) {
    $logWarning(_instance_3, "Inconsistency in Layer's Parameters: firstLevel (upgrading from %d to %d)", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(this$static._firstLevel), valueOf_0(parameters._firstLevel)]));
    this$static._firstLevel = parameters._firstLevel;
  }
  return true;
}

function MutableLayerTilesRenderParameters_0(){
  this._topSector = null;
  this._topSectorSplitsByLatitude = 0;
  this._topSectorSplitsByLongitude = 0;
  this._firstLevel = 0;
  this._maxLevel = 0;
  this._tileTextureWidth = 0;
  this._tileTextureHeight = 0;
  this._tileMeshWidth = 0;
  this._tileMeshHeight = 0;
  this._mercator = false;
}

defineSeed(617, 1, {}, MutableLayerTilesRenderParameters_0);
_._firstLevel = 0;
_._maxLevel = 0;
_._mercator = false;
_._tileMeshHeight = 0;
_._tileMeshWidth = 0;
_._tileTextureHeight = 0;
_._tileTextureWidth = 0;
_._topSectorSplitsByLatitude = 0;
_._topSectorSplitsByLongitude = 0;
function $asMatrix44D(this$static){
  !this$static._matrix44D && (this$static._matrix44D = new Matrix44D_0(this$static._m00, this$static._m10, this$static._m20, this$static._m30, this$static._m01, this$static._m11, this$static._m21, this$static._m31, this$static._m02, this$static._m12, this$static._m22, this$static._m32, this$static._m03, this$static._m13, this$static._m23, this$static._m33));
  return this$static._matrix44D;
}

function $copyValue(this$static, m_0){
  if (!!this$static._matrix44D && this$static._matrix44D == m_0._matrix44D) {
    return;
  }
  this$static._isValid = m_0._isValid;
  this$static._m00 = m_0._m00;
  this$static._m01 = m_0._m01;
  this$static._m02 = m_0._m02;
  this$static._m03 = m_0._m03;
  this$static._m10 = m_0._m10;
  this$static._m11 = m_0._m11;
  this$static._m12 = m_0._m12;
  this$static._m13 = m_0._m13;
  this$static._m20 = m_0._m20;
  this$static._m21 = m_0._m21;
  this$static._m22 = m_0._m22;
  this$static._m23 = m_0._m23;
  this$static._m30 = m_0._m30;
  this$static._m31 = m_0._m31;
  this$static._m32 = m_0._m32;
  this$static._m33 = m_0._m33;
  !!this$static._matrix44D && $_release(this$static._matrix44D);
  this$static._matrix44D = m_0._matrix44D;
  !!this$static._matrix44D && ++this$static._matrix44D._referenceCounter;
}

function $copyValueOfMultiplication(this$static, m1, m2){
  var m1_00, m1_01, m1_02, m1_03, m1_10, m1_11, m1_12, m1_13, m1_20, m1_21, m1_22, m1_23, m1_30, m1_31, m1_32, m1_33, m2_00, m2_01, m2_02, m2_03, m2_10, m2_11, m2_12, m2_13, m2_20, m2_21, m2_22, m2_23, m2_30, m2_31, m2_32, m2_33;
  m1_00 = m1._m00;
  m1_10 = m1._m10;
  m1_20 = m1._m20;
  m1_30 = m1._m30;
  m1_01 = m1._m01;
  m1_11 = m1._m11;
  m1_21 = m1._m21;
  m1_31 = m1._m31;
  m1_02 = m1._m02;
  m1_12 = m1._m12;
  m1_22 = m1._m22;
  m1_32 = m1._m32;
  m1_03 = m1._m03;
  m1_13 = m1._m13;
  m1_23 = m1._m23;
  m1_33 = m1._m33;
  m2_00 = m2._m00;
  m2_10 = m2._m10;
  m2_20 = m2._m20;
  m2_30 = m2._m30;
  m2_01 = m2._m01;
  m2_11 = m2._m11;
  m2_21 = m2._m21;
  m2_31 = m2._m31;
  m2_02 = m2._m02;
  m2_12 = m2._m12;
  m2_22 = m2._m22;
  m2_32 = m2._m32;
  m2_03 = m2._m03;
  m2_13 = m2._m13;
  m2_23 = m2._m23;
  m2_33 = m2._m33;
  this$static._m00 = m1_00 * m2_00 + m1_01 * m2_10 + m1_02 * m2_20 + m1_03 * m2_30;
  this$static._m01 = m1_00 * m2_01 + m1_01 * m2_11 + m1_02 * m2_21 + m1_03 * m2_31;
  this$static._m02 = m1_00 * m2_02 + m1_01 * m2_12 + m1_02 * m2_22 + m1_03 * m2_32;
  this$static._m03 = m1_00 * m2_03 + m1_01 * m2_13 + m1_02 * m2_23 + m1_03 * m2_33;
  this$static._m10 = m1_10 * m2_00 + m1_11 * m2_10 + m1_12 * m2_20 + m1_13 * m2_30;
  this$static._m11 = m1_10 * m2_01 + m1_11 * m2_11 + m1_12 * m2_21 + m1_13 * m2_31;
  this$static._m12 = m1_10 * m2_02 + m1_11 * m2_12 + m1_12 * m2_22 + m1_13 * m2_32;
  this$static._m13 = m1_10 * m2_03 + m1_11 * m2_13 + m1_12 * m2_23 + m1_13 * m2_33;
  this$static._m20 = m1_20 * m2_00 + m1_21 * m2_10 + m1_22 * m2_20 + m1_23 * m2_30;
  this$static._m21 = m1_20 * m2_01 + m1_21 * m2_11 + m1_22 * m2_21 + m1_23 * m2_31;
  this$static._m22 = m1_20 * m2_02 + m1_21 * m2_12 + m1_22 * m2_22 + m1_23 * m2_32;
  this$static._m23 = m1_20 * m2_03 + m1_21 * m2_13 + m1_22 * m2_23 + m1_23 * m2_33;
  this$static._m30 = m1_30 * m2_00 + m1_31 * m2_10 + m1_32 * m2_20 + m1_33 * m2_30;
  this$static._m31 = m1_30 * m2_01 + m1_31 * m2_11 + m1_32 * m2_21 + m1_33 * m2_31;
  this$static._m32 = m1_30 * m2_02 + m1_31 * m2_12 + m1_32 * m2_22 + m1_33 * m2_32;
  this$static._m33 = m1_30 * m2_03 + m1_31 * m2_13 + m1_32 * m2_23 + m1_33 * m2_33;
  if (this$static._matrix44D) {
    $_release(this$static._matrix44D);
    this$static._matrix44D = null;
  }
}

function $description_3(this$static){
  var f, i_0, isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'MUTABLE MATRIX 44D: ';
  f = $getColumnMajorFloatArray((!this$static._matrix44D && (this$static._matrix44D = new Matrix44D_0(this$static._m00, this$static._m10, this$static._m20, this$static._m30, this$static._m01, this$static._m11, this$static._m21, this$static._m31, this$static._m02, this$static._m12, this$static._m22, this$static._m32, this$static._m03, this$static._m13, this$static._m23, this$static._m33)) , this$static._matrix44D));
  for (i_0 = 0; i_0 < 16; i_0++) {
    $addDouble(isb, f[i_0]);
    i_0 < 15 && (isb._string += ', ' , isb);
  }
  s = isb._string;
  return s;
}

function $dispose_12(this$static){
  !!this$static._matrix44D && $_release(this$static._matrix44D);
}

function $inversed(this$static){
  var a0, a1, a2, a3, a4, a5, b0, b1, b2, b3, b4, b5, determinant, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33;
  a0 = this$static._m00 * this$static._m11 - this$static._m01 * this$static._m10;
  a1 = this$static._m00 * this$static._m12 - this$static._m02 * this$static._m10;
  a2 = this$static._m00 * this$static._m13 - this$static._m03 * this$static._m10;
  a3 = this$static._m01 * this$static._m12 - this$static._m02 * this$static._m11;
  a4 = this$static._m01 * this$static._m13 - this$static._m03 * this$static._m11;
  a5 = this$static._m02 * this$static._m13 - this$static._m03 * this$static._m12;
  b0 = this$static._m20 * this$static._m31 - this$static._m21 * this$static._m30;
  b1 = this$static._m20 * this$static._m32 - this$static._m22 * this$static._m30;
  b2 = this$static._m20 * this$static._m33 - this$static._m23 * this$static._m30;
  b3 = this$static._m21 * this$static._m32 - this$static._m22 * this$static._m31;
  b4 = this$static._m21 * this$static._m33 - this$static._m23 * this$static._m31;
  b5 = this$static._m22 * this$static._m33 - this$static._m23 * this$static._m32;
  determinant = a0 * b5 - a1 * b4 + a2 * b3 + a3 * b2 - a4 * b1 + a5 * b0;
  if (determinant == 0) {
    return new MutableMatrix44D_3;
  }
  m00 = (this$static._m11 * b5 - this$static._m12 * b4 + this$static._m13 * b3) / determinant;
  m10 = (-this$static._m10 * b5 + this$static._m12 * b2 - this$static._m13 * b1) / determinant;
  m20 = (this$static._m10 * b4 - this$static._m11 * b2 + this$static._m13 * b0) / determinant;
  m30 = (-this$static._m10 * b3 + this$static._m11 * b1 - this$static._m12 * b0) / determinant;
  m01 = (-this$static._m01 * b5 + this$static._m02 * b4 - this$static._m03 * b3) / determinant;
  m11 = (this$static._m00 * b5 - this$static._m02 * b2 + this$static._m03 * b1) / determinant;
  m21 = (-this$static._m00 * b4 + this$static._m01 * b2 - this$static._m03 * b0) / determinant;
  m31 = (this$static._m00 * b3 - this$static._m01 * b1 + this$static._m02 * b0) / determinant;
  m02 = (this$static._m31 * a5 - this$static._m32 * a4 + this$static._m33 * a3) / determinant;
  m12 = (-this$static._m30 * a5 + this$static._m32 * a2 - this$static._m33 * a1) / determinant;
  m22 = (this$static._m30 * a4 - this$static._m31 * a2 + this$static._m33 * a0) / determinant;
  m32 = (-this$static._m30 * a3 + this$static._m31 * a1 - this$static._m32 * a0) / determinant;
  m03 = (-this$static._m21 * a5 + this$static._m22 * a4 - this$static._m23 * a3) / determinant;
  m13 = (this$static._m20 * a5 - this$static._m22 * a2 + this$static._m23 * a1) / determinant;
  m23 = (-this$static._m20 * a4 + this$static._m21 * a2 - this$static._m23 * a0) / determinant;
  m33 = (this$static._m20 * a3 - this$static._m21 * a1 + this$static._m22 * a0) / determinant;
  return new MutableMatrix44D_1(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33);
}

function $isIdentity(this$static){
  var identity;
  identity = new MutableMatrix44D_1(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  return this$static._m00 == identity._m00 && this$static._m01 == identity._m01 && this$static._m02 == identity._m02 && this$static._m03 == identity._m03 && this$static._m10 == identity._m10 && this$static._m11 == identity._m11 && this$static._m12 == identity._m12 && this$static._m13 == identity._m13 && this$static._m20 == identity._m20 && this$static._m21 == identity._m21 && this$static._m22 == identity._m22 && this$static._m23 == identity._m23 && this$static._m30 == identity._m30 && this$static._m31 == identity._m31 && this$static._m32 == identity._m32 && this$static._m33 == identity._m33;
}

function $multiply(this$static, that){
  var m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33, that00, that01, that02, that03, that10, that11, that12, that13, that20, that21, that22, that23, that30, that31, that32, that33;
  if ($isIdentity(this$static)) {
    return that;
  }
  if ($isIdentity(that)) {
    return this$static;
  }
  that00 = that._m00;
  that10 = that._m10;
  that20 = that._m20;
  that30 = that._m30;
  that01 = that._m01;
  that11 = that._m11;
  that21 = that._m21;
  that31 = that._m31;
  that02 = that._m02;
  that12 = that._m12;
  that22 = that._m22;
  that32 = that._m32;
  that03 = that._m03;
  that13 = that._m13;
  that23 = that._m23;
  that33 = that._m33;
  m00 = this$static._m00 * that00 + this$static._m01 * that10 + this$static._m02 * that20 + this$static._m03 * that30;
  m01 = this$static._m00 * that01 + this$static._m01 * that11 + this$static._m02 * that21 + this$static._m03 * that31;
  m02 = this$static._m00 * that02 + this$static._m01 * that12 + this$static._m02 * that22 + this$static._m03 * that32;
  m03 = this$static._m00 * that03 + this$static._m01 * that13 + this$static._m02 * that23 + this$static._m03 * that33;
  m10 = this$static._m10 * that00 + this$static._m11 * that10 + this$static._m12 * that20 + this$static._m13 * that30;
  m11 = this$static._m10 * that01 + this$static._m11 * that11 + this$static._m12 * that21 + this$static._m13 * that31;
  m12 = this$static._m10 * that02 + this$static._m11 * that12 + this$static._m12 * that22 + this$static._m13 * that32;
  m13 = this$static._m10 * that03 + this$static._m11 * that13 + this$static._m12 * that23 + this$static._m13 * that33;
  m20 = this$static._m20 * that00 + this$static._m21 * that10 + this$static._m22 * that20 + this$static._m23 * that30;
  m21 = this$static._m20 * that01 + this$static._m21 * that11 + this$static._m22 * that21 + this$static._m23 * that31;
  m22 = this$static._m20 * that02 + this$static._m21 * that12 + this$static._m22 * that22 + this$static._m23 * that32;
  m23 = this$static._m20 * that03 + this$static._m21 * that13 + this$static._m22 * that23 + this$static._m23 * that33;
  m30 = this$static._m30 * that00 + this$static._m31 * that10 + this$static._m32 * that20 + this$static._m33 * that30;
  m31 = this$static._m30 * that01 + this$static._m31 * that11 + this$static._m32 * that21 + this$static._m33 * that31;
  m32 = this$static._m30 * that02 + this$static._m31 * that12 + this$static._m32 * that22 + this$static._m33 * that32;
  m33 = this$static._m30 * that03 + this$static._m31 * that13 + this$static._m32 * that23 + this$static._m33 * that33;
  return new MutableMatrix44D_1(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33);
}

function $unproject(this$static, pixel3D, vpWidth, vpHeight){
  var in0, in1, in2, m_0, objx, objy, objz, out0, out1, out2, out3, winx, winy, winz;
  winx = pixel3D._x;
  winy = pixel3D._y;
  winz = pixel3D._z;
  in0 = winx * 2 / vpWidth - 1;
  in1 = winy * 2 / vpHeight - 1;
  in2 = 2 * winz - 1;
  m_0 = $inversed(this$static);
  out0 = m_0._m00 * in0 + m_0._m01 * in1 + m_0._m02 * in2 + m_0._m03;
  out1 = m_0._m10 * in0 + m_0._m11 * in1 + m_0._m12 * in2 + m_0._m13;
  out2 = m_0._m20 * in0 + m_0._m21 * in1 + m_0._m22 * in2 + m_0._m23;
  out3 = m_0._m30 * in0 + m_0._m31 * in1 + m_0._m32 * in2 + m_0._m33;
  if (out3 == 0) {
    return $clinit_Vector3D() , new Vector3D_0(NaN, NaN, NaN);
  }
  objx = out0 / out3;
  objy = out1 / out3;
  objz = out2 / out3;
  return new Vector3D_0(objx, objy, objz);
}

function MutableMatrix44D_0(){
  this._isValid = true;
  this._matrix44D = null;
  this._m00 = 0;
  this._m01 = 0;
  this._m02 = 0;
  this._m03 = 0;
  this._m10 = 0;
  this._m11 = 0;
  this._m12 = 0;
  this._m13 = 0;
  this._m20 = 0;
  this._m21 = 0;
  this._m22 = 0;
  this._m23 = 0;
  this._m30 = 0;
  this._m31 = 0;
  this._m32 = 0;
  this._m33 = 0;
}

function MutableMatrix44D_1(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33){
  this._isValid = true;
  this._matrix44D = null;
  this._m00 = m00;
  this._m01 = m01;
  this._m02 = m02;
  this._m03 = m03;
  this._m10 = m10;
  this._m11 = m11;
  this._m12 = m12;
  this._m13 = m13;
  this._m20 = m20;
  this._m21 = m21;
  this._m22 = m22;
  this._m23 = m23;
  this._m30 = m30;
  this._m31 = m31;
  this._m32 = m32;
  this._m33 = m33;
  this._matrix44D = null;
}

function MutableMatrix44D_2(m_0){
  this._isValid = m_0._isValid;
  this._m00 = m_0._m00;
  this._m01 = m_0._m01;
  this._m02 = m_0._m02;
  this._m03 = m_0._m03;
  this._m10 = m_0._m10;
  this._m11 = m_0._m11;
  this._m12 = m_0._m12;
  this._m13 = m_0._m13;
  this._m20 = m_0._m20;
  this._m21 = m_0._m21;
  this._m22 = m_0._m22;
  this._m23 = m_0._m23;
  this._m30 = m_0._m30;
  this._m31 = m_0._m31;
  this._m32 = m_0._m32;
  this._m33 = m_0._m33;
  this._matrix44D = m_0._matrix44D;
  !!this._matrix44D && ++this._matrix44D._referenceCounter;
}

function MutableMatrix44D_3(){
  this._isValid = false;
  this._matrix44D = null;
}

function createGeneralRotationMatrix(angle, axis_0, point){
  var R, T1, T2;
  T1 = createTranslationMatrix(new Vector3D_0(-point._x, -point._y, -point._z));
  R = createRotationMatrix(angle, axis_0);
  T2 = new MutableMatrix44D_1(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, point._x, point._y, point._z, 1);
  return $multiply($multiply(T2, R), T1);
}

function createModelMatrix(pos, center, up){
  var pe, u, v, w;
  w = $normalized(new MutableVector3D_1(center._x - pos._x, center._y - pos._y, center._z - pos._z));
  pe = w._x * up._x + w._y * up._y + w._z * up._z;
  v = $normalized($sub_0(up, new MutableVector3D_1(w._x * pe, w._y * pe, w._z * pe)));
  u = new MutableVector3D_1(w._y * v._z - w._z * v._y, w._z * v._x - w._x * v._z, w._x * v._y - w._y * v._x);
  return new MutableMatrix44D_1(u._x, v._x, -w._x, 0, u._y, v._y, -w._y, 0, u._z, v._z, -w._z, 0, -(pos._x * u._x + pos._y * u._y + pos._z * u._z), -(pos._x * v._x + pos._y * v._y + pos._z * v._z), pos._x * w._x + pos._y * w._y + pos._z * w._z, 1);
}

function createOrthographicProjectionMatrix(left, right, bottom, top_0, znear, zfar){
  var fn, rl, tb;
  rl = right - left;
  tb = top_0 - bottom;
  fn = zfar - znear;
  return new MutableMatrix44D_1(2 / rl, 0, 0, 0, 0, 2 / tb, 0, 0, 0, 0, -2 / fn, 0, -(right + left) / rl, -(top_0 + bottom) / tb, -(zfar + znear) / fn, 1);
}

function createProjectionMatrix(left, right, bottom, top_0, znear, zfar){
  var fn, rl, tb;
  rl = right - left;
  tb = top_0 - bottom;
  fn = zfar - znear;
  return new MutableMatrix44D_1(2 * znear / rl, 0, 0, 0, 0, 2 * znear / tb, 0, 0, (right + left) / rl, (top_0 + bottom) / tb, -(zfar + znear) / fn, -1, 0, 0, -2 * zfar / fn * znear, 0);
}

function createProjectionMatrix_0(data_0){
  return createProjectionMatrix(data_0._left, data_0._right, data_0._bottom, data_0._top, data_0._znear, data_0._zfar);
}

function createRotationMatrix(angle, axis_0){
  var a, c, s;
  a = $normalized_0(axis_0);
  c = cos_0(angle._radians);
  s = sin_0(angle._radians);
  return new MutableMatrix44D_1(a._x * a._x * (1 - c) + c, a._x * a._y * (1 - c) + a._z * s, a._x * a._z * (1 - c) - a._y * s, 0, a._y * a._x * (1 - c) - a._z * s, a._y * a._y * (1 - c) + c, a._y * a._z * (1 - c) + a._x * s, 0, a._x * a._z * (1 - c) + a._y * s, a._y * a._z * (1 - c) - a._x * s, a._z * a._z * (1 - c) + c, 0, 0, 0, 0, 1);
}

function createTranslationMatrix(t){
  return new MutableMatrix44D_1(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, t._x, t._y, t._z, 1);
}

defineSeed(618, 1, {}, MutableMatrix44D_0, MutableMatrix44D_1, MutableMatrix44D_2, MutableMatrix44D_3);
_.toString$ = function toString_58(){
  return $description_3(this);
}
;
_._isValid = false;
_._m00 = 0;
_._m01 = 0;
_._m02 = 0;
_._m03 = 0;
_._m10 = 0;
_._m11 = 0;
_._m12 = 0;
_._m13 = 0;
_._m20 = 0;
_._m21 = 0;
_._m22 = 0;
_._m23 = 0;
_._m30 = 0;
_._m31 = 0;
_._m32 = 0;
_._m33 = 0;
function MutableVector2F_0(){
  this._x = 0;
  this._y = 0;
}

function MutableVector2F_1(x_0, y_0){
  this._x = x_0;
  this._y = y_0;
}

defineSeed(619, 1, {}, MutableVector2F_0, MutableVector2F_1);
_._x = 0;
_._y = 0;
function $set_2(this$static, x_0, y_0){
  this$static._x = x_0;
  this$static._y = y_0;
}

function MutableVector2I_0(){
  this._x = 0;
  this._y = 0;
}

function MutableVector2I_1(x_0, y_0){
  this._x = x_0;
  this._y = y_0;
}

defineSeed(620, 1, {}, MutableVector2I_0, MutableVector2I_1);
_._x = 0;
_._y = 0;
function $addInPlace(this$static, that){
  this$static._x += that._x;
  this$static._y += that._y;
  this$static._z += that._z;
}

function $angleBetween(this$static, other){
  var c, v1, v2;
  v1 = $normalized(this$static);
  v2 = $normalized(other);
  c = v1._x * v2._x + v1._y * v2._y + v1._z * v2._z;
  c > 1?(c = 1):c < -1 && (c = -1);
  return fromRadians(acos_0(c));
}

function $asVector3D(this$static){
  return new Vector3D_0(this$static._x, this$static._y, this$static._z);
}

function $copyFrom_1(this$static, that){
  this$static._x = that._x;
  this$static._y = that._y;
  this$static._z = that._z;
}

function $copyFrom_2(this$static, that){
  this$static._x = that._x;
  this$static._y = that._y;
  this$static._z = that._z;
}

function $cross(this$static, other){
  return new MutableVector3D_1(this$static._y * other._z - this$static._z * other._y, this$static._z * other._x - this$static._x * other._z, this$static._x * other._y - this$static._y * other._x);
}

function $dot(this$static, v){
  return this$static._x * v._x + this$static._y * v._y + this$static._z * v._z;
}

function $equalTo(this$static, v){
  return v._x == this$static._x && v._y == this$static._y && v._z == this$static._z;
}

function $isNan(this$static){
  return this$static._x != this$static._x || this$static._y != this$static._y || this$static._z != this$static._z;
}

function $length(this$static){
  return sqrt_0(this$static._x * this$static._x + this$static._y * this$static._y + this$static._z * this$static._z);
}

function $normalize(this$static){
  var d;
  d = sqrt_0(this$static._x * this$static._x + this$static._y * this$static._y + this$static._z * this$static._z);
  this$static._x /= d;
  this$static._y /= d;
  this$static._z /= d;
}

function $normalized(this$static){
  var d;
  d = sqrt_0(this$static._x * this$static._x + this$static._y * this$static._y + this$static._z * this$static._z);
  return new MutableVector3D_1(this$static._x / d, this$static._y / d, this$static._z / d);
}

function $putSub(this$static, a, b){
  this$static._x = a._x - b._x;
  this$static._y = a._y - b._y;
  this$static._z = a._z - b._z;
}

function $rotateAroundAxis(this$static, axis_0, theta){
  var cosTheta, m_0, ms, sinTheta, u, v, w;
  u = axis_0._x;
  v = axis_0._y;
  w = axis_0._z;
  cosTheta = cos_0(theta._radians);
  sinTheta = sin_0(theta._radians);
  ms = axis_0._x * axis_0._x + axis_0._y * axis_0._y + axis_0._z * axis_0._z;
  m_0 = sqrt_0(ms);
  return new MutableVector3D_1((u * (u * this$static._x + v * this$static._y + w * this$static._z) + (this$static._x * (v * v + w * w) - u * (v * this$static._y + w * this$static._z)) * cosTheta + m_0 * (-w * this$static._y + v * this$static._z) * sinTheta) / ms, (v * (u * this$static._x + v * this$static._y + w * this$static._z) + (this$static._y * (u * u + w * w) - v * (u * this$static._x + w * this$static._z)) * cosTheta + m_0 * (w * this$static._x - u * this$static._z) * sinTheta) / ms, (w * (u * this$static._x + v * this$static._y + w * this$static._z) + (this$static._z * (u * u + v * v) - w * (u * this$static._x + v * this$static._y)) * cosTheta + m_0 * (-(v * this$static._x) + u * this$static._y) * sinTheta) / ms);
}

function $set_3(this$static, x_0, y_0, z_0){
  this$static._x = x_0;
  this$static._y = y_0;
  this$static._z = z_0;
}

function $sub_0(this$static, v){
  return new MutableVector3D_1(this$static._x - v._x, this$static._y - v._y, this$static._z - v._z);
}

function $times_0(this$static){
  return new MutableVector3D_1(-this$static._x, -this$static._y, -this$static._z);
}

function $times_1(this$static, v){
  return new MutableVector3D_1(this$static._x * v._x, this$static._y * v._y, this$static._z * v._z);
}

function $transformedBy(this$static, m_0, homogeneus){
  return new MutableVector3D_1(this$static._x * m_0._m00 + this$static._y * m_0._m01 + this$static._z * m_0._m02 + homogeneus * m_0._m03, this$static._x * m_0._m10 + this$static._y * m_0._m11 + this$static._z * m_0._m12 + homogeneus * m_0._m13, this$static._x * m_0._m20 + this$static._y * m_0._m21 + this$static._z * m_0._m22 + homogeneus * m_0._m23);
}

function MutableVector3D_0(){
  this._x = 0;
  this._y = 0;
  this._z = 0;
}

function MutableVector3D_1(x_0, y_0, z_0){
  this._x = x_0;
  this._y = y_0;
  this._z = z_0;
}

function angleInRadiansBetween(a, b){
  var c, aLength, a_x, a_y, a_z, bLength, b_x, b_y, b_z;
  c = (aLength = sqrt_0(a._x * a._x + a._y * a._y + a._z * a._z) , a_x = a._x / aLength , a_y = a._y / aLength , a_z = a._z / aLength , bLength = sqrt_0(b._x * b._x + b._y * b._y + b._z * b._z) , b_x = b._x / bLength , b_y = b._y / bLength , b_z = b._z / bLength , a_x * b_x + a_y * b_y + a_z * b_z);
  c > 1?(c = 1):c < -1 && (c = -1);
  return acos_0(c);
}

defineSeed(621, 1, {}, MutableVector3D_0, MutableVector3D_1);
_._x = 0;
_._y = 0;
_._z = 0;
function OrTileLODTester_0(left, right){
  this._left = left;
  this._right = right;
}

defineSeed(622, 445, {}, OrTileLODTester_0);
_.meetsRenderCriteria = function meetsRenderCriteria_2(rc, prc, tile){
  if ($meetsRenderCriteria_1(this._left, tile)) {
    return true;
  }
  return $meetsRenderCriteria(this._right, rc, prc, tile);
}
;
_.onLayerTilesRenderParametersChanged = function onLayerTilesRenderParametersChanged_1(ltrp){
  $onLayerTilesRenderParametersChanged_0(this._left, ltrp);
  $onLayerTilesRenderParametersChanged(this._right, ltrp);
}
;
_.onTileHasChangedMesh = function onTileHasChangedMesh_1(tile){
  $onTileHasChangedMesh(this._right, tile);
}
;
_.renderStarted = function renderStarted_2(){
  this._right._tileLODTester.renderStarted();
}
;
function $signedDistance(this$static, point){
  return this$static._normal._x * point._x + this$static._normal._y * point._y + this$static._normal._z * point._z + this$static._d;
}

function $signedDistance_0(this$static, point){
  return this$static._normalF._x * point._x + this$static._normalF._y * point._y + this$static._normalF._z * point._z + this$static._dF;
}

function $transformedByTranspose(this$static, M){
  var a, b, c, d;
  a = this$static._normal._x * M._m00 + this$static._normal._y * M._m10 + this$static._normal._z * M._m20 + this$static._d * M._m30;
  b = this$static._normal._x * M._m01 + this$static._normal._y * M._m11 + this$static._normal._z * M._m21 + this$static._d * M._m31;
  c = this$static._normal._x * M._m02 + this$static._normal._y * M._m12 + this$static._normal._z * M._m22 + this$static._d * M._m32;
  d = this$static._normal._x * M._m03 + this$static._normal._y * M._m13 + this$static._normal._z * M._m23 + this$static._d * M._m33;
  return new Plane_0(a, b, c, d);
}

function Plane_0(a, b, c, d){
  this._normal = new Vector3D_1($normalized_0(new Vector3D_0(a, b, c)));
  this._d = d;
  this._normalF = $normalized_1(new Vector3F_0(a, b, c));
  this._dF = d;
}

function Plane_1(normal, d){
  this._normal = new Vector3D_1($normalized_0(normal));
  this._d = d;
  this._normalF = $normalized_1(new Vector3F_0(normal._x, normal._y, normal._z));
  this._dF = d;
}

function fromPoints(point0, point1, point2){
  var d, normal;
  normal = $normalized_0($cross_0(new Vector3D_0(point1._x - point0._x, point1._y - point0._y, point1._z - point0._z), new Vector3D_0(point2._x - point0._x, point2._y - point0._y, point2._z - point0._z)));
  d = -(normal._x * point0._x + normal._y * point0._y + normal._z * point0._z);
  return new Plane_1(normal, d);
}

defineSeed(623, 1, {}, Plane_0, Plane_1);
_._d = 0;
_._dF = 0;
function PlanetRenderContext_0(){
}

defineSeed(624, 1, {}, PlanetRenderContext_0);
_._logTilesPetitions = false;
_._nowInMS = P0_longLit;
_._renderTileMeshes = false;
_._texHeightSquared = 0;
_._texWidthSquared = 0;
_._tileDownloadPriority = P0_longLit;
_._verticalExaggeration = 0;
function $addVisibleSectorListener(this$static, stabilizationInterval){
  $add_5(this$static._visibleSectorListeners, new VisibleSectorListenerEntry_0(stabilizationInterval));
}

function $changed(this$static){
  if (!this$static._recreateTilesPending) {
    this$static._recreateTilesPending = true;
    !this$static._context?$logError(_instance_3, '_context is not initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [])):$invokeTask(this$static._context._threadUtils, new RecreateTilesTask_0(this$static));
  }
}

function $changedInfo_0(this$static, info){
  !!this$static._changedInfoListener && this$static._changedInfoListener.changedRendererInfo(this$static._rendererIdentifier, info);
}

function $clearFirstLevelTiles(this$static){
  var firstLevelTilesCount, i_0, tile;
  firstLevelTilesCount = this$static._firstLevelTiles.size_0;
  for (i_0 = 0; i_0 < firstLevelTilesCount; i_0++) {
    tile = dynamicCast($get_2(this$static._firstLevelTiles, i_0), Q$Tile);
    $toBeDeleted(tile, this$static._texturizer, this$static._elevationDataProvider);
    !!tile && $dispose_17(tile);
  }
  $clear(this$static._firstLevelTiles);
}

function $createFirstLevelTiles(this$static, firstLevelTiles, tile, firstLevel){
  var child, children, childrenSize, i_0;
  if (tile._level == firstLevel) {
    setCheck(firstLevelTiles.array, firstLevelTiles.size_0++, tile);
  }
   else {
    children = $createSubTiles(tile, false);
    childrenSize = children.size_0;
    for (i_0 = 0; i_0 < childrenSize; i_0++) {
      child = (checkIndex(i_0, children.size_0) , dynamicCast(children.array[i_0], Q$Tile));
      $createFirstLevelTiles(this$static, firstLevelTiles, child, firstLevel);
    }
    !!tile && $dispose_17(tile);
  }
}

function $createFirstLevelTiles_0(this$static, context){
  var col, deltaLan, deltaLon, fromLatitude, fromLongitude, i_0, parameters, row, sector, tile, tileHeight, tileLatFrom, tileLatTo, tileLonFrom, tileLonTo, tileLower, tileUpper, tileWidth, topLevelTiles, topLevelTilesSize, topSectorSplitsByLatitude, topSectorSplitsByLongitude;
  parameters = $getLayerTilesRenderParameters(this$static);
  if (!parameters) {
    return;
  }
  topLevelTiles = new ArrayList_0;
  fromLatitude = parameters._topSector._lower._latitude;
  fromLongitude = parameters._topSector._lower._longitude;
  deltaLan = parameters._topSector._deltaLatitude;
  deltaLon = parameters._topSector._deltaLongitude;
  topSectorSplitsByLatitude = parameters._topSectorSplitsByLatitude;
  topSectorSplitsByLongitude = parameters._topSectorSplitsByLongitude;
  tileHeight = $div(deltaLan, topSectorSplitsByLatitude);
  tileWidth = $div(deltaLon, topSectorSplitsByLongitude);
  for (row = 0; row < topSectorSplitsByLatitude; row++) {
    tileLatFrom = $add_7($times(tileHeight, row), fromLatitude);
    tileLatTo = $add_7(tileLatFrom, tileHeight);
    for (col = 0; col < topSectorSplitsByLongitude; col++) {
      tileLonFrom = $add_7($times(tileWidth, col), fromLongitude);
      tileLonTo = $add_7(tileLonFrom, tileWidth);
      tileLower = new Geodetic2D_0(tileLatFrom, tileLonFrom);
      tileUpper = new Geodetic2D_0(tileLatTo, tileLonTo);
      sector = new Sector_0(tileLower, tileUpper);
      if (!this$static._renderedSector || $touchesWith(sector, this$static._renderedSector)) {
        tile = new Tile_0(this$static._texturizer, null, sector, parameters._mercator, 0, row, col, this$static);
        parameters._firstLevel == 0?$add_5(this$static._firstLevelTiles, tile):(setCheck(topLevelTiles.array, topLevelTiles.size_0++, tile) , true);
      }
    }
  }
  if (parameters._firstLevel > 0) {
    topLevelTilesSize = topLevelTiles.size_0;
    for (i_0 = 0; i_0 < topLevelTilesSize; i_0++) {
      tile = (checkIndex(i_0, topLevelTiles.size_0) , dynamicCast(topLevelTiles.array[i_0], Q$Tile));
      $createFirstLevelTiles(this$static, this$static._firstLevelTiles, tile, parameters._firstLevel);
    }
  }
  sort_0(this$static._firstLevelTiles, new PlanetRenderer$1_0);
  $logInfo(context._logger, 'Created %d first level tiles', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(this$static._firstLevelTiles.size_0)]));
  this$static._firstLevelTiles.size_0 > 64 && $logWarning(context._logger, '%d tiles are many for the first level. We recommend a number of those less than 64. You can review some parameters (Render Sector and/or First Level) to reduce the number of tiles.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(this$static._firstLevelTiles.size_0)]));
  this$static._firstLevelTilesJustCreated = true;
}

function $getLayerTilesRenderParameters(this$static){
  if (this$static._layerTilesRenderParametersDirty) {
    $clear(this$static._errors);
    this$static._layerTilesRenderParameters = null;
    this$static._layerTilesRenderParameters = $createLayerTilesRenderParameters(this$static._layerSet, this$static._tilesRenderParameters._forceFirstLevelTilesRenderOnStart, this$static._errors);
    !this$static._layerTilesRenderParameters && $logError(_instance_3, "LayerSet returned a NULL for LayerTilesRenderParameters, can't render planet", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    this$static._layerTilesRenderParametersDirty = false;
    $onLayerTilesRenderParametersChanged(this$static._tileLODTester, this$static._layerTilesRenderParameters);
  }
  return this$static._layerTilesRenderParameters;
}

function $onTileHasChangedMesh_0(this$static, tile){
  $onTileHasChangedMesh(this$static._tileLODTester, tile);
}

function $pruneFirstLevelTiles(this$static){
  var firstLevelTilesCount, i_0, tile;
  firstLevelTilesCount = this$static._firstLevelTiles.size_0;
  for (i_0 = 0; i_0 < firstLevelTilesCount; i_0++) {
    tile = dynamicCast($get_2(this$static._firstLevelTiles, i_0), Q$Tile);
    $prune(tile, this$static._texturizer, this$static._elevationDataProvider);
  }
}

function $recreateTiles(this$static){
  $pruneFirstLevelTiles(this$static);
  $clearFirstLevelTiles(this$static);
  this$static._layerTilesRenderParameters = null;
  this$static._layerTilesRenderParameters = null;
  this$static._layerTilesRenderParametersDirty = true;
  this$static._firstRender = true;
  this$static._allFirstLevelTilesAreTextureSolved = false;
  $createFirstLevelTiles_0(this$static, this$static._context);
  this$static._recreateTilesPending = false;
}

function $sectorElevationChanged(elevationData){
  !!elevationData && $acceptVisitor(elevationData);
}

function PlanetRenderer_0(tessellator, elevationDataProvider, verticalExaggeration, texturizer, layerSet, tilesRenderParameters, showStatistics, tileDownloadPriority, renderedSector, renderTileMeshes, logTilesPetitions, changedInfoListener, touchEventTypeOfTerrainTouchListener, tileLODTester, tileVisibilityTester){
  DefaultRenderer_0.call(this);
  this._statistics = new TilesStatistics_0;
  this._firstLevelTiles = new ArrayList_0;
  this._visibleSectorListeners = new ArrayList_0;
  this._errors = new ArrayList_0;
  this._terrainTouchListeners = new ArrayList_0;
  this._toVisit = new ArrayList_0;
  this._toVisitInNextIteration = new ArrayList_0;
  this._tessellator = tessellator;
  this._elevationDataProvider = elevationDataProvider;
  this._verticalExaggeration = verticalExaggeration;
  this._texturizer = texturizer;
  this._layerSet = layerSet;
  this._tilesRenderParameters = tilesRenderParameters;
  this._showStatistics = showStatistics;
  this._firstLevelTilesJustCreated = false;
  this._lastSplitTimer = null;
  this._lastCamera = null;
  this._firstRender = false;
  this._lastVisibleSector = null;
  this._tileDownloadPriority = tileDownloadPriority;
  this._allFirstLevelTilesAreTextureSolved = false;
  this._recreateTilesPending = false;
  this._glState = new GLState_0;
  this._renderedSector = $isEquals_3(renderedSector, ($clinit_Sector() , $clinit_Sector() , FULL_SPHERE))?null:new Sector_1(renderedSector);
  this._layerTilesRenderParameters = null;
  this._layerTilesRenderParametersDirty = true;
  this._renderTileMeshes = renderTileMeshes;
  this._logTilesPetitions = logTilesPetitions;
  this._touchEventTypeOfTerrainTouchListener = touchEventTypeOfTerrainTouchListener;
  this._tileLODTester = tileLODTester;
  this._tileVisibilityTester = tileVisibilityTester;
  this._context = null;
  this._changedInfoListener = changedInfoListener;
  $setChangeListener(this._layerSet, this);
  $setChangedInfoListener(this._layerSet, this);
  this._rendererIdentifier = -1;
  if (!this._tileLODTester) {
    throw new RuntimeException_1("TileLODTester can't be NULL");
  }
  if (!this._tileVisibilityTester) {
    throw new RuntimeException_1("TileVisibilityTester can't be NULL");
  }
  this._prc = new PlanetRenderContext_0;
}

defineSeed(625, 449, makeCastMap([Q$Renderer]), PlanetRenderer_0);
_.getPlanetRenderer = function getPlanetRenderer_1(){
  return this;
}
;
_.getRenderState_0 = function getRenderState_4(rc){
  var firstLevelTilesCount, i_0, i0, layerSetRenderState, layerTilesRenderParameters, texturizerRenderState, tile;
  if (!this._tessellator) {
    return error_0('Tessellator is null');
  }
  if (!this._texturizer) {
    return error_0('Texturizer is null');
  }
  layerTilesRenderParameters = $getLayerTilesRenderParameters(this);
  if (!layerTilesRenderParameters) {
    if (this._errors.size_0 == 0) {
      if (this._tilesRenderParameters._forceFirstLevelTilesRenderOnStart) {
        return $clinit_RenderState() , $clinit_RenderState() , BUSY;
      }
    }
     else {
      return $clinit_RenderState() , new RenderState_0(this._errors);
    }
  }
  layerSetRenderState = $getRenderState_0(this._layerSet);
  if (layerSetRenderState._type != 0) {
    return layerSetRenderState;
  }
  texturizerRenderState = $getRenderState(this._texturizer, this._layerSet);
  if (texturizerRenderState._type != 0) {
    return texturizerRenderState;
  }
  if (this._firstLevelTilesJustCreated) {
    this._firstLevelTilesJustCreated = false;
    firstLevelTilesCount = this._firstLevelTiles.size_0;
    if (this._tilesRenderParameters._forceFirstLevelTilesRenderOnStart) {
      $clear_0(this._statistics);
      this._prc._tileLODTester = this._tileLODTester;
      this._prc._tileVisibilityTester = this._tileVisibilityTester;
      this._prc._frustumInModelCoordinates = null;
      this._prc._verticalExaggeration = this._verticalExaggeration;
      this._prc._layerTilesRenderParameters = layerTilesRenderParameters;
      this._prc._texturizer = this._texturizer;
      this._prc._tilesRenderParameters = this._tilesRenderParameters;
      this._prc._lastSplitTimer = this._lastSplitTimer;
      this._prc._elevationDataProvider = this._elevationDataProvider;
      this._prc._tessellator = this._tessellator;
      this._prc._layerSet = this._layerSet;
      this._prc._tileDownloadPriority = this._tileDownloadPriority;
      this._prc._texWidthSquared = -1;
      this._prc._texHeightSquared = -1;
      this._prc._nowInMS = N1_longLit;
      this._prc._renderTileMeshes = this._renderTileMeshes;
      this._prc._logTilesPetitions = this._logTilesPetitions;
      for (i0 = 0; i0 < firstLevelTilesCount; i0++) {
        tile = dynamicCast($get_2(this._firstLevelTiles, i0), Q$Tile);
        $prepareForFullRendering(tile, rc, this._prc);
      }
    }
    for (i_0 = 0; i_0 < firstLevelTilesCount; i_0++) {
      dynamicCast($get_2(this._firstLevelTiles, i_0), Q$Tile);
    }
  }
  if (this._tilesRenderParameters._forceFirstLevelTilesRenderOnStart && !this._allFirstLevelTilesAreTextureSolved) {
    firstLevelTilesCount = this._firstLevelTiles.size_0;
    for (i_0 = 0; i_0 < firstLevelTilesCount; i_0++) {
      tile = dynamicCast($get_2(this._firstLevelTiles, i_0), Q$Tile);
      if (!tile._textureSolved) {
        return $clinit_RenderState() , $clinit_RenderState() , BUSY;
      }
    }
    this._allFirstLevelTilesAreTextureSolved = true;
  }
  return $clinit_RenderState() , $clinit_RenderState() , READY;
}
;
_.getSurfaceElevationProvider = function getSurfaceElevationProvider_1(){
  return this;
}
;
_.initialize_0 = function initialize_9(context){
  this._context = context;
  $pruneFirstLevelTiles(this);
  $clearFirstLevelTiles(this);
  $createFirstLevelTiles_0(this, context);
  this._lastSplitTimer = new Timer_WebGL_0;
  $initialize_4(this._layerSet, context);
  $initialize_1(this._texturizer, context);
  !!this._elevationDataProvider && $initialize_5(this._elevationDataProvider, context);
}
;
_.isPlanetRenderer = function isPlanetRenderer_1(){
  return true;
}
;
_.onResizeViewportEvent = function onResizeViewportEvent_5(ec, width_0, height){
}
;
_.onTouchEvent_0 = function onTouchEvent_5(ec, touchEvent){
  var firstLevelTilesCount, i_0, j, normalizedPixel, origin, pixel, planet, position, positionCartesian, ray, terrainTouchListenersSize, tile, tileDimension;
  if (!this._lastCamera) {
    return false;
  }
  if (touchEvent._eventType == this._touchEventTypeOfTerrainTouchListener) {
    pixel = dynamicCast($get_2(touchEvent._touchs, 0), Q$Touch)._pos;
    ray = $pixel2Ray(this._lastCamera, pixel);
    origin = $asVector3D(this._lastCamera._position);
    planet = ec._planet;
    positionCartesian = $closestIntersection(planet, origin, ray);
    if (positionCartesian._x != positionCartesian._x || positionCartesian._y != positionCartesian._y || positionCartesian._z != positionCartesian._z) {
      $logWarning(_instance_3, 'PlanetRenderer::onTouchEvent: positionCartesian ( - planet->closestIntersection(origin, ray) - ) is NaN', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
      return false;
    }
    position = planet.toGeodetic3D(positionCartesian);
    firstLevelTilesCount = this._firstLevelTiles.size_0;
    for (i_0 = 0; i_0 < firstLevelTilesCount; i_0++) {
      tile = $getDeepestTileContaining(dynamicCast($get_2(this._firstLevelTiles, i_0), Q$Tile), position);
      if (tile) {
        tileDimension = new Vector2I_0(256, 256);
        normalizedPixel = $getNormalizedPixelFromPosition(tile, new Geodetic2D_0(position._latitude, position._longitude), tileDimension);
        $logInfo(_instance_3, 'Touched on %s', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [$description_7(tile)]));
        $logInfo(_instance_3, 'Touched on position %s', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [$description_1(position)]));
        $logInfo(_instance_3, 'Touched on pixels %s', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [$description_8(normalizedPixel)]));
        $logInfo(_instance_3, 'Camera position=%s heading=%f pitch=%f', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [$description_1($getGeodeticPosition(this._lastCamera)), ($clinit_Double() , new Double_0($getHeadingPitchRoll(this._lastCamera)._heading._degrees)), new Double_0($getHeadingPitchRoll(this._lastCamera)._pitch._degrees)]));
        if ($onTerrainTouchEvent(position, tile, this._layerSet)) {
          return true;
        }
        terrainTouchListenersSize = this._terrainTouchListeners.size_0;
        for (j = terrainTouchListenersSize - 1; j >= 0; j--) {
          throwClassCastExceptionUnlessNull($get_2(this._terrainTouchListeners, j));
          if (null.nullMethod()) {
            return true;
          }
        }
        return false;
      }
    }
  }
  return false;
}
;
_.render = function render_9(rc, glState){
  var correctionFactor, entry, factor, firstLevelTilesCount, frustumInModelCoordinates, i_0, i0, i1, layerTilesRenderParameters, nowInMS, previousLastVisibleSector, texHeight, texHeightSquared, texWidth, texWidthSquared, tile, toVisitInNextIterationSize, toVisitSize, visibleSectorListenersCount, camera, f;
  layerTilesRenderParameters = $getLayerTilesRenderParameters(this);
  if (!layerTilesRenderParameters) {
    return;
  }
  camera = rc._currentCamera;
  f = dynamicCast($getGLFeature(this._glState, 13), Q$ModelViewGLFeature);
  !f?$addGLFeature(this._glState, new ModelViewGLFeature_0(camera), true):$setMatrix(f, $asMatrix44D($getModelViewMatrix(camera)));
  $setParent_1(this._glState, glState);
  this._lastCamera = rc._currentCamera;
  $clear_0(this._statistics);
  $getDeviceInfo(_instance_1);
  factor = this._tilesRenderParameters._texturePixelsPerInch;
  correctionFactor = 96 / factor;
  texWidth = correctionFactor * layerTilesRenderParameters._tileTextureResolution._x;
  texHeight = correctionFactor * layerTilesRenderParameters._tileTextureResolution._y;
  texWidthSquared = texWidth * texWidth;
  texHeightSquared = texHeight * texHeight;
  firstLevelTilesCount = this._firstLevelTiles.size_0;
  frustumInModelCoordinates = $getFrustumInModelCoordinates(this._lastCamera);
  nowInMS = fromDouble(currentTimeMillis0());
  this._prc._tileLODTester = this._tileLODTester;
  this._prc._tileVisibilityTester = this._tileVisibilityTester;
  this._prc._frustumInModelCoordinates = frustumInModelCoordinates;
  this._prc._verticalExaggeration = this._verticalExaggeration;
  this._prc._layerTilesRenderParameters = layerTilesRenderParameters;
  this._prc._texturizer = this._texturizer;
  this._prc._tilesRenderParameters = this._tilesRenderParameters;
  this._prc._lastSplitTimer = this._lastSplitTimer;
  this._prc._elevationDataProvider = this._elevationDataProvider;
  this._prc._tessellator = this._tessellator;
  this._prc._layerSet = this._layerSet;
  this._prc._tileDownloadPriority = this._tileDownloadPriority;
  this._prc._texWidthSquared = texWidthSquared;
  this._prc._texHeightSquared = texHeightSquared;
  this._prc._nowInMS = nowInMS;
  this._prc._renderTileMeshes = this._renderTileMeshes;
  this._prc._logTilesPetitions = this._logTilesPetitions;
  $renderStarted(this._tileLODTester);
  if (this._firstRender && this._tilesRenderParameters._forceFirstLevelTilesRenderOnStart) {
    for (i_0 = 0; i_0 < firstLevelTilesCount; i_0++) {
      tile = dynamicCast($get_2(this._firstLevelTiles, i_0), Q$Tile);
      $render_5(tile, rc, this._prc, this._glState, this._statistics, null);
    }
  }
   else {
    $clear(this._toVisit);
    for (i1 = 0; i1 < firstLevelTilesCount; i1++) {
      $add_5(this._toVisit, dynamicCast($get_2(this._firstLevelTiles, i1), Q$Tile));
    }
    while (this._toVisit.size_0 != 0) {
      $clear(this._toVisitInNextIteration);
      toVisitSize = this._toVisit.size_0;
      for (i_0 = 0; i_0 < toVisitSize; i_0++) {
        tile = dynamicCast($get_2(this._toVisit, i_0), Q$Tile);
        $render_5(tile, rc, this._prc, this._glState, this._statistics, this._toVisitInNextIteration);
      }
      $clear(this._toVisit);
      toVisitInNextIterationSize = this._toVisitInNextIteration.size_0;
      for (i0 = 0; i0 < toVisitInNextIterationSize; i0++) {
        $add_5(this._toVisit, dynamicCast($get_2(this._toVisitInNextIteration, i0), Q$Tile));
      }
    }
  }
  this._firstRender = false;
  this._showStatistics && $log_3(this._statistics, rc._logger);
  previousLastVisibleSector = this._lastVisibleSector;
  this._lastVisibleSector = $updateVisibleSector(this._statistics, this._lastVisibleSector);
  if (previousLastVisibleSector != this._lastVisibleSector) {
    if (this._lastVisibleSector) {
      visibleSectorListenersCount = this._visibleSectorListeners.size_0;
      for (i_0 = 0; i_0 < visibleSectorListenersCount; i_0++) {
        entry = dynamicCast($get_2(this._visibleSectorListeners, i_0), Q$VisibleSectorListenerEntry);
        $tryToNotifyListener(entry, this._lastVisibleSector, rc);
      }
    }
  }
}
;
_.setChangedRendererInfoListener = function setChangedRendererInfoListener_1(changedInfoListener, rendererIdentifier){
  !!this._changedInfoListener && $logWarning(_instance_3, 'Changed Renderer Info Listener of PlanetRenderer already set', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  this._rendererIdentifier = rendererIdentifier;
  this._changedInfoListener = changedInfoListener;
  !!this._changedInfoListener && this._changedInfoListener.changedRendererInfo(rendererIdentifier, $getInfo_0(this._layerSet));
}
;
_.start_2 = function start_10(rc){
  this._firstRender = true;
}
;
_.stop_1 = function stop_9(rc){
  this._firstRender = false;
}
;
_._allFirstLevelTilesAreTextureSolved = false;
_._firstLevelTilesJustCreated = false;
_._firstRender = false;
_._layerTilesRenderParametersDirty = false;
_._logTilesPetitions = false;
_._recreateTilesPending = false;
_._renderTileMeshes = false;
_._showStatistics = false;
_._tileDownloadPriority = P0_longLit;
_._verticalExaggeration = 0;
function $compare(i_0, j){
  var columnI, columnJ, rowI, rowJ;
  rowI = i_0._row;
  rowJ = j._row;
  if (rowI < rowJ) {
    return -1;
  }
  if (rowI > rowJ) {
    return 1;
  }
  columnI = i_0._column;
  columnJ = j._column;
  if (columnI < columnJ) {
    return -1;
  }
  if (columnI > columnJ) {
    return 1;
  }
  return 0;
}

function PlanetRenderer$1_0(){
}

defineSeed(626, 1, {}, PlanetRenderer$1_0);
_.compare = function compare_4(i_0, j){
  return $compare(dynamicCast(i_0, Q$Tile), dynamicCast(j, Q$Tile));
}
;
function $create_5(this$static){
  var geoVectorLayer, geoVectorLayersSize, i_0, i0, layerSet, planetRenderer, layerSet_0, proj, timed, maxLevel, gradual, composite;
  layerSet = (!this$static._layerSet && (this$static._layerSet = (layerSet_0 = new LayerSet_0 , $addLayer(layerSet_0, newOSM(new TimeInterval_0(P9a7ec800_longLit))) , layerSet_0)) , this$static._layerSet);
  geoVectorLayersSize = this$static._geoVectorLayers.size_0;
  for (i_0 = 0; i_0 < geoVectorLayersSize; i_0++) {
    geoVectorLayer = throwClassCastExceptionUnlessNull($get_2(this$static._geoVectorLayers, i_0));
    $addLayer(layerSet, geoVectorLayer);
  }
  planetRenderer = new PlanetRenderer_0((!this$static._tileTessellator && (this$static._tileTessellator = new PlanetTileTessellator_0($getRenderedSector(this$static))) , this$static._tileTessellator), this$static._elevationDataProvider, (this$static._verticalExaggeration <= 0 && (this$static._verticalExaggeration = 1) , this$static._verticalExaggeration), (!this$static._texturizer && (this$static._texturizer = new DefaultTileTexturizer_0(new DefaultChessCanvasImageBuilder_0(new Color_0(0, 0, 0, 1), new Color_0(1, 1, 1, 1)))) , this$static._texturizer), layerSet, (!this$static._parameters && (this$static._parameters = new TilesRenderParameters_0(this$static._renderDebug, this$static._forceFirstLevelTilesRenderOnStart, this$static._incrementalTileQuality, this$static._quality)) , this$static._parameters), this$static._showStatistics, this$static._tileDownloadPriority, $getRenderedSector(this$static), this$static._renderTileMeshes, this$static._logTilesPetitions, this$static._changedInfoListener, this$static._touchEventTypeOfTerrainTouchListener, (!this$static._tileLODTester && (this$static._tileLODTester = (proj = new ProjectedCornersDistanceTileLODTester_0 , timed = new TimedCacheTileLODTester_0(new TimeInterval_0(P1f4_longLit), proj) , maxLevel = new MaxLevelTileLODTester_0 , gradual = new GradualSplitsTileLODTester_0(new TimeInterval_0(Pa_longLit), timed) , composite = new OrTileLODTester_0(maxLevel, gradual) , new MaxFrameTimeTileLODTester_0(new TimeInterval_0(P19_longLit), composite))) , this$static._tileLODTester), (!this$static._tileVisibilityTester && (this$static._tileVisibilityTester = new TimedCacheTileVisibilityTester_0(new TimeInterval_0(P3e8_longLit), new MeshBoundingVolumeTileVisibilityTester_0)) , this$static._tileVisibilityTester));
  for (i0 = 0; i0 < (!this$static._visibleSectorListeners && (this$static._visibleSectorListeners = new ArrayList_0) , this$static._visibleSectorListeners).size_0; i0++) {
    $addVisibleSectorListener(planetRenderer, (throwClassCastExceptionUnlessNull($get_2((!this$static._visibleSectorListeners && (this$static._visibleSectorListeners = new ArrayList_0) , this$static._visibleSectorListeners), i0)) , new TimeInterval_0(dynamicCast($get_2((!this$static._stabilizationMilliSeconds && (this$static._stabilizationMilliSeconds = new ArrayList_0) , this$static._stabilizationMilliSeconds), i0), Q$Long).value_0)));
  }
  this$static._parameters = null;
  this$static._layerSet = null;
  this$static._texturizer = null;
  this$static._tileTessellator = null;
  this$static._visibleSectorListeners = null;
  this$static._visibleSectorListeners = null;
  this$static._stabilizationMilliSeconds = null;
  this$static._stabilizationMilliSeconds = null;
  this$static._elevationDataProvider = null;
  !!this$static._renderedSector && !!this$static._renderedSector._normalizedCartesianCenter && undefined;
  this$static._renderedSector = null;
  $clear(this$static._geoVectorLayers);
  return planetRenderer;
}

function $getRenderedSector(this$static){
  if (!this$static._renderedSector) {
    return $clinit_Sector() , $clinit_Sector() , FULL_SPHERE;
  }
  return this$static._renderedSector;
}

function $setElevationDataProvider(this$static, elevationDataProvider){
  if (this$static._elevationDataProvider) {
    $logError(_instance_3, 'LOGIC ERROR: _elevationDataProvider already initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  this$static._elevationDataProvider = elevationDataProvider;
}

function $setLayerSet(this$static, layerSet){
  if (this$static._layerSet) {
    $logError(_instance_3, 'LOGIC ERROR: _layerSet already initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  this$static._layerSet = layerSet;
}

function $setRenderDebug(this$static, renderDebug){
  this$static._renderDebug = renderDebug;
}

function $setRenderedSector(this$static, sector){
  if (this$static._renderedSector) {
    $logError(_instance_3, 'LOGIC ERROR: _renderedSector already initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  this$static._renderedSector = new Sector_1(sector);
}

function $setVerticalExaggeration(this$static, verticalExaggeration){
  if (this$static._verticalExaggeration > 0) {
    $logError(_instance_3, 'LOGIC ERROR: _verticalExaggeration already initialized', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return;
  }
  this$static._verticalExaggeration = verticalExaggeration;
}

function PlanetRendererBuilder_0(){
  this._geoVectorLayers = new ArrayList_0;
  this._showStatistics = false;
  this._renderDebug = false;
  this._forceFirstLevelTilesRenderOnStart = true;
  this._incrementalTileQuality = false;
  this._quality = ($clinit_Quality() , QUALITY_LOW);
  this._parameters = null;
  this._layerSet = null;
  this._texturizer = null;
  this._tileTessellator = null;
  this._visibleSectorListeners = null;
  this._stabilizationMilliSeconds = null;
  this._tileDownloadPriority = P2710_longLit;
  this._elevationDataProvider = null;
  this._verticalExaggeration = 0;
  this._renderedSector = null;
  this._renderTileMeshes = true;
  this._logTilesPetitions = false;
  this._changedInfoListener = null;
  this._touchEventTypeOfTerrainTouchListener = ($clinit_TouchEventType() , LongPress);
  this._tileLODTester = null;
  this._tileVisibilityTester = null;
}

defineSeed(627, 1, {}, PlanetRendererBuilder_0);
_._forceFirstLevelTilesRenderOnStart = false;
_._incrementalTileQuality = false;
_._logTilesPetitions = false;
_._renderDebug = false;
_._renderTileMeshes = false;
_._showStatistics = false;
_._tileDownloadPriority = P0_longLit;
_._verticalExaggeration = 0;
function $getTextCoord(tile, position){
  return $getTextCoord_0(tile, position._latitude, position._longitude);
}

defineSeed(629, 1, {});
function $calculateResolution(prc, tile, renderedSector){
  var latRatio, lonRatio, meshRes, mutableResolution, resX, resY, resolution, sector;
  sector = tile._sector;
  mutableResolution = $asMutableVector2I($asVector2I(prc._layerTilesRenderParameters._tileMeshResolution));
  !!tile._elevationData && (mutableResolution = $asMutableVector2I($getExtent(tile._elevationData)));
  resolution = new Vector2I_0(mutableResolution._x, mutableResolution._y);
  latRatio = sector._deltaLatitude._degrees / renderedSector._deltaLatitude._degrees;
  lonRatio = sector._deltaLongitude._degrees / renderedSector._deltaLongitude._degrees;
  resX = round_short(ceil_0(resolution._x / lonRatio));
  resX < 2 && (resX = 2);
  resY = round_short(ceil_0(resolution._y / latRatio));
  resY < 2 && (resY = 2);
  meshRes = new Vector2S_0(resX, resY);
  return meshRes;
}

function $createEastSkirt(meshSector, meshResolution, skirtHeight, vertices, indices, textCoords){
  var firstSkirtVertex, g, j, skirtIndex, southEastCorner, surfaceIndex, uv, y_0;
  firstSkirtVertex = narrow_short(~~(vertices._values._size / 3));
  southEastCorner = narrow_short(meshResolution._x * meshResolution._y - 1);
  skirtIndex = firstSkirtVertex;
  surfaceIndex = southEastCorner;
  for (j = narrow_short(meshResolution._y - 1); j >= 0; j--) {
    y_0 = j / (meshResolution._y - 1);
    g = new Geodetic2D_0(linearInterpolation(meshSector._lower._latitude, meshSector._upper._latitude, 1 - y_0), linearInterpolation(meshSector._lower._longitude, meshSector._upper._longitude, 1));
    $add_13(vertices, g._latitude, g._longitude, skirtHeight);
    uv = $getVector2D(textCoords, surfaceIndex);
    $push_back(textCoords._values, uv._x);
    $push_back(textCoords._values, uv._y);
    $push_back_0(indices._values, surfaceIndex);
    $push_back_0(indices._values, skirtIndex);
    ++skirtIndex;
    surfaceIndex = surfaceIndex - meshResolution._x;
  }
  $add_19(indices, narrow_short(surfaceIndex + meshResolution._x));
  $add_19(indices, narrow_short(surfaceIndex + meshResolution._x));
}

function $createNorthSkirt(meshSector, meshResolution, skirtHeight, vertices, indices, textCoords){
  var firstSkirtVertex, g, i_0, northEastCorner, skirtIndex, surfaceIndex, uv, x_0;
  firstSkirtVertex = narrow_short(~~(vertices._values._size / 3));
  northEastCorner = narrow_short(meshResolution._x - 1);
  skirtIndex = firstSkirtVertex;
  surfaceIndex = northEastCorner;
  $push_back_0(indices._values, northEastCorner);
  for (i_0 = narrow_short(meshResolution._x - 1); i_0 >= 0; i_0--) {
    x_0 = i_0 / (meshResolution._x - 1);
    g = new Geodetic2D_0(linearInterpolation(meshSector._lower._latitude, meshSector._upper._latitude, 1), linearInterpolation(meshSector._lower._longitude, meshSector._upper._longitude, x_0));
    $add_13(vertices, g._latitude, g._longitude, skirtHeight);
    uv = $getVector2D(textCoords, surfaceIndex);
    $push_back(textCoords._values, uv._x);
    $push_back(textCoords._values, uv._y);
    $push_back_0(indices._values, surfaceIndex);
    $push_back_0(indices._values, skirtIndex);
    ++skirtIndex;
    surfaceIndex = narrow_short(surfaceIndex - 1);
  }
  $add_19(indices, narrow_short(surfaceIndex + 1));
  $add_19(indices, narrow_short(surfaceIndex + 1));
}

function $createSouthSkirt(meshSector, meshResolution, skirtHeight, vertices, indices, textCoords){
  var firstSkirtVertex, g, i_0, skirtIndex, southWestCorner, surfaceIndex, uv, x_0;
  firstSkirtVertex = narrow_short(~~(vertices._values._size / 3));
  southWestCorner = narrow_short(meshResolution._x * (meshResolution._y - 1));
  skirtIndex = firstSkirtVertex;
  surfaceIndex = southWestCorner;
  $push_back_0(indices._values, southWestCorner);
  for (i_0 = 0; i_0 < meshResolution._x; i_0++) {
    x_0 = i_0 / (meshResolution._x - 1);
    g = new Geodetic2D_0(linearInterpolation(meshSector._lower._latitude, meshSector._upper._latitude, 0), linearInterpolation(meshSector._lower._longitude, meshSector._upper._longitude, x_0));
    $add_13(vertices, g._latitude, g._longitude, skirtHeight);
    uv = $getVector2D(textCoords, surfaceIndex);
    $add_10(textCoords, uv._x, uv._y);
    $push_back_0(indices._values, surfaceIndex);
    $add_19(indices, skirtIndex++);
    surfaceIndex = narrow_short(surfaceIndex + 1);
  }
  $add_19(indices, narrow_short(surfaceIndex - 1));
  $add_19(indices, narrow_short(surfaceIndex - 1));
}

function $createSurface(tileSector, meshSector, meshResolution, elevationData, verticalExaggeration, mercator, vertices, indices, textCoords, data_0){
  var i_0, j, j0, jTimesResolution, lat, lon, m_u, m_v, mercatorDeltaGlobalV, mercatorGlobalV, mercatorLowerGlobalV, mercatorUpperGlobalV, minElevation, u, v;
  minElevation = $createSurfaceVertices(new Vector2S_0(meshResolution._x, meshResolution._y), meshSector, elevationData, verticalExaggeration, vertices, data_0);
  if (mercator) {
    mercatorLowerGlobalV = getMercatorV(tileSector._lower._latitude);
    mercatorUpperGlobalV = getMercatorV(tileSector._upper._latitude);
    mercatorDeltaGlobalV = mercatorLowerGlobalV - mercatorUpperGlobalV;
    for (j0 = 0; j0 < meshResolution._y; j0++) {
      v = j0 / (meshResolution._y - 1);
      for (i_0 = 0; i_0 < meshResolution._x; i_0++) {
        u = i_0 / (meshResolution._x - 1);
        lat = linearInterpolation(meshSector._lower._latitude, meshSector._upper._latitude, 1 - v);
        lon = linearInterpolation(meshSector._lower._longitude, meshSector._upper._longitude, u);
        m_u = (lon._radians - tileSector._lower._longitude._radians) / tileSector._deltaLongitude._radians;
        mercatorGlobalV = getMercatorV(lat);
        m_v = (mercatorGlobalV - mercatorUpperGlobalV) / mercatorDeltaGlobalV;
        $add_10(textCoords, m_u, m_v);
      }
    }
  }
   else {
    for (j0 = 0; j0 < meshResolution._y; j0++) {
      v = j0 / (meshResolution._y - 1);
      for (i_0 = 0; i_0 < meshResolution._x; i_0++) {
        u = i_0 / (meshResolution._x - 1);
        $add_10(textCoords, u, v);
      }
    }
  }
  for (j = 0; j < meshResolution._y - 1; j++) {
    jTimesResolution = narrow_short(j * meshResolution._x);
    j > 0 && $push_back_0(indices._values, jTimesResolution);
    for (i_0 = 0; i_0 < meshResolution._x; i_0++) {
      $add_19(indices, narrow_short(jTimesResolution + i_0));
      $add_19(indices, narrow_short(jTimesResolution + i_0 + meshResolution._x));
    }
    $add_19(indices, ~~(jTimesResolution + 2 * meshResolution._x - 1 << 16) >> 16);
  }
  return minElevation;
}

function $createSurfaceVertices(meshResolution, meshSector, elevationData, verticalExaggeration, vertices, data_0){
  var averageElevation, elevation, i_0, j, maxElevation, minElevation, position, rawElevation, u, v;
  minElevation = 1.7976931348623157E308;
  maxElevation = -1.7976931348623157E308;
  averageElevation = 0;
  for (j = 0; j < meshResolution._y; j++) {
    v = j / (meshResolution._y - 1);
    for (i_0 = 0; i_0 < meshResolution._x; i_0++) {
      u = i_0 / (meshResolution._x - 1);
      position = new Geodetic2D_0(linearInterpolation(meshSector._lower._latitude, meshSector._upper._latitude, 1 - v), linearInterpolation(meshSector._lower._longitude, meshSector._upper._longitude, u));
      elevation = 0;
      if (elevationData) {
        rawElevation = $getElevationAt(elevationData, position._latitude, position._longitude);
        elevation = rawElevation != rawElevation?0:rawElevation * verticalExaggeration;
        elevation < minElevation && (minElevation = elevation);
        elevation > maxElevation && (maxElevation = elevation);
        averageElevation += elevation;
      }
      $add_13(vertices, position._latitude, position._longitude, elevation);
    }
  }
  minElevation == 1.7976931348623157E308 && (minElevation = 0);
  data_0._averageHeight = averageElevation / (meshResolution._x * meshResolution._y);
  return minElevation;
}

function $createTextCoords_0(tile){
  var data_0;
  data_0 = tile._tessellatorData;
  if (!data_0 || !data_0._textCoords) {
    $logError(_instance_3, 'Logic error on PlanetTileTessellator::createTextCoord', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return null;
  }
  return $create_0(data_0._textCoords);
}

function $createTileDebugMesh(this$static, rc, prc, tile){
  var border, c, data_0, grid, gridLineWidth, i_0, i0, indicesBorder, indicesGrid, j, j0, j1, j2, j3, levelColor, meshResolution, meshSector, rowOffset, vertices;
  meshSector = $getRenderedSectorForTile(this$static, tile);
  meshResolution = $calculateResolution(prc, tile, meshSector);
  vertices = new FloatBufferBuilderFromGeodetic_2(rc._planet, ($clinit_Vector3D() , zero));
  data_0 = new TileTessellatorMeshData_0;
  $createSurfaceVertices(meshResolution, meshSector, tile._elevationData, prc._verticalExaggeration, vertices, data_0);
  indicesBorder = new ShortBufferBuilder_0;
  for (j0 = 0; j0 < meshResolution._x; j0++) {
    $push_back_0(indicesBorder._values, j0);
  }
  for (i_0 = 2; i_0 < meshResolution._y + 1; i_0++) {
    $add_19(indicesBorder, narrow_short(i_0 * meshResolution._x - 1));
  }
  for (j1 = narrow_short(meshResolution._x * meshResolution._y - 2); j1 >= meshResolution._x * (meshResolution._y - 1); j1--) {
    $push_back_0(indicesBorder._values, j1);
  }
  for (j3 = ~~(meshResolution._x * (meshResolution._y - 1) - meshResolution._x << 16) >> 16; j3 >= 0; j3 = j3 - meshResolution._x) {
    $push_back_0(indicesBorder._values, j3);
  }
  indicesGrid = new ShortBufferBuilder_0;
  for (i0 = 0; i0 < meshResolution._y - 1; i0++) {
    rowOffset = narrow_short(i0 * meshResolution._x);
    for (j = 0; j < meshResolution._x; j++) {
      $add_19(indicesGrid, narrow_short(rowOffset + j));
      $add_19(indicesGrid, narrow_short(rowOffset + j + meshResolution._x));
    }
    for (j2 = narrow_short(2 * meshResolution._x - 1); j2 >= meshResolution._x; j2--) {
      $add_19(indicesGrid, narrow_short(rowOffset + j2));
    }
  }
  levelColor = $wheelStep(new Color_0(0, 0, 1, 1), tile._level % 5);
  gridLineWidth = tile._elevationDataLevel == tile._level || !tile._elevationData?1:3;
  border = new IndexedMesh_2(_lineStrip, new Vector3D_0(vertices._cx, vertices._cy, vertices._cz), new FloatBuffer_WebGL_2(vertices._values._array, vertices._values._size), new ShortBuffer_WebGL_1(indicesBorder._values._array, indicesBorder._values._size), 2, new Color_0(1, 0, 0, 1), null, false, null, true, 1, 1);
  grid = new IndexedMesh_2(_lineStrip, new Vector3D_0(vertices._cx, vertices._cy, vertices._cz), new FloatBuffer_WebGL_2(vertices._values._array, vertices._values._size), new ShortBuffer_WebGL_1(indicesGrid._values._array, indicesGrid._values._size), gridLineWidth, new Color_1(levelColor), null, false, null, true, 1, 1);
  c = new CompositeMesh_0;
  $addMesh(c, grid);
  $addMesh(c, border);
  return c;
}

function $createTileMesh(this$static, rc, prc, tile, elevationData, data_0){
  var absoluteSkirtHeight, indices, indicesB, meshResolution, meshSector, minElevation, planet, relativeSkirtHeight, result, textCoords, tileSector, vertices, verticesB;
  tileSector = tile._sector;
  meshSector = $getRenderedSectorForTile(this$static, tile);
  meshResolution = $calculateResolution(prc, tile, meshSector);
  planet = rc._planet;
  vertices = new FloatBufferBuilderFromGeodetic_0(planet, meshSector._center);
  indices = new ShortBufferBuilder_0;
  textCoords = new FloatBufferBuilderFromCartesian2D_0;
  minElevation = $createSurface(tileSector, meshSector, meshResolution, elevationData, prc._verticalExaggeration, tile._mercator, vertices, indices, textCoords, data_0);
  if (this$static._skirted) {
    relativeSkirtHeight = minElevation - skirtDepthForSector(planet, tileSector);
    absoluteSkirtHeight = 0;
    !!this$static._renderedSector && (absoluteSkirtHeight = -skirtDepthForSector(planet, this$static._renderedSector));
    $createEastSkirt(meshSector, meshResolution, $needsEastSkirt(this$static, tileSector)?relativeSkirtHeight:absoluteSkirtHeight, vertices, indices, textCoords);
    $createNorthSkirt(meshSector, meshResolution, $needsNorthSkirt(this$static, tileSector)?relativeSkirtHeight:absoluteSkirtHeight, vertices, indices, textCoords);
    $createWestSkirt(meshSector, meshResolution, $needsWestSkirt(this$static, tileSector)?relativeSkirtHeight:absoluteSkirtHeight, vertices, indices, textCoords);
    $createSouthSkirt(meshSector, meshResolution, $needsSouthSkirt(this$static, tileSector)?relativeSkirtHeight:absoluteSkirtHeight, vertices, indices, textCoords);
  }
  $setTessellatorData(tile, new PlanetTileTessellatorData_0(textCoords));
  verticesB = new FloatBuffer_WebGL_2(vertices._values._array, vertices._values._size);
  indicesB = new ShortBuffer_WebGL_1(indices._values._array, indices._values._size);
  result = new IndexedGeometryMesh_0(_triangleStrip, new Vector3D_0(vertices._cx, vertices._cy, vertices._cz), verticesB, indicesB);
  return result;
}

function $createWestSkirt(meshSector, meshResolution, skirtHeight, vertices, indices, textCoords){
  var firstSkirtVertex, g, j, skirtIndex, surfaceIndex, uv, y_0;
  firstSkirtVertex = narrow_short(~~(vertices._values._size / 3));
  skirtIndex = firstSkirtVertex;
  surfaceIndex = 0;
  $push_back_0(indices._values, surfaceIndex);
  for (j = 0; j < meshResolution._y; j++) {
    y_0 = j / (meshResolution._y - 1);
    g = new Geodetic2D_0(linearInterpolation(meshSector._lower._latitude, meshSector._upper._latitude, 1 - y_0), linearInterpolation(meshSector._lower._longitude, meshSector._upper._longitude, 0));
    $add_13(vertices, g._latitude, g._longitude, skirtHeight);
    uv = $getVector2D(textCoords, surfaceIndex);
    $push_back(textCoords._values, uv._x);
    $push_back(textCoords._values, uv._y);
    $push_back_0(indices._values, surfaceIndex);
    $push_back_0(indices._values, skirtIndex);
    ++skirtIndex;
    surfaceIndex = surfaceIndex + meshResolution._x;
  }
  $add_19(indices, narrow_short(surfaceIndex - meshResolution._x));
  $add_19(indices, narrow_short(surfaceIndex - meshResolution._x));
}

function $getRenderedSectorForTile(this$static, tile){
  if (!this$static._renderedSector) {
    return tile._sector;
  }
  return $intersection(tile._sector, this$static._renderedSector);
}

function $getTextCoord_0(tile, latitude, longitude){
  var deltaGlobalV, globalV, linearUV, localV, lowerGlobalV, sector, upperGlobalV;
  sector = tile._sector;
  linearUV = new Vector2F_0((longitude._radians - sector._lower._longitude._radians) / sector._deltaLongitude._radians, (sector._upper._latitude._radians - latitude._radians) / sector._deltaLatitude._radians);
  if (!tile._mercator) {
    return linearUV;
  }
  lowerGlobalV = getMercatorV(sector._lower._latitude);
  upperGlobalV = getMercatorV(sector._upper._latitude);
  deltaGlobalV = lowerGlobalV - upperGlobalV;
  globalV = getMercatorV(latitude);
  localV = (globalV - upperGlobalV) / deltaGlobalV;
  return new Vector2F_0(linearUV._x, localV);
}

function $getTileMeshResolution(this$static, prc, tile){
  var sector;
  sector = $getRenderedSectorForTile(this$static, tile);
  return $calculateResolution(prc, tile, sector);
}

function $needsEastSkirt(this$static, tileSector){
  if (!this$static._renderedSector) {
    return true;
  }
  return $greaterThan(this$static._renderedSector._upper._longitude, tileSector._upper._longitude);
}

function $needsNorthSkirt(this$static, tileSector){
  if (!this$static._renderedSector) {
    return true;
  }
  return $greaterThan(this$static._renderedSector._upper._latitude, tileSector._upper._latitude);
}

function $needsSouthSkirt(this$static, tileSector){
  if (!this$static._renderedSector) {
    return true;
  }
  return $lowerThan(this$static._renderedSector._lower._latitude, tileSector._lower._latitude);
}

function $needsWestSkirt(this$static, tileSector){
  if (!this$static._renderedSector) {
    return true;
  }
  return $lowerThan(this$static._renderedSector._lower._longitude, tileSector._lower._longitude);
}

function PlanetTileTessellator_0(sector){
  this._skirted = true;
  this._renderedSector = $isEquals_3(sector, ($clinit_Sector() , $clinit_Sector() , FULL_SPHERE))?null:new Sector_1(sector);
}

function skirtDepthForSector(planet, sector){
  var diagonalLength, nw, se, sideLength;
  se = planet.toCartesian_0(new Geodetic2D_0(sector._lower._latitude, sector._upper._longitude));
  nw = planet.toCartesian_0(new Geodetic2D_0(sector._upper._latitude, sector._lower._longitude));
  diagonalLength = $length_1(new Vector3D_0(nw._x - se._x, nw._y - se._y, nw._z - se._z));
  sideLength = diagonalLength * 0.70710678118;
  return sideLength / 20;
}

defineSeed(628, 629, {}, PlanetTileTessellator_0);
_._skirted = false;
function PlanetTileTessellatorData_0(textCoords){
  this._textCoords = textCoords;
}

defineSeed(630, 1, {}, PlanetTileTessellatorData_0);
function $getData(tile, rc){
  var data_0, mediumHeight;
  data_0 = dynamicCast(2 >= tile._dataSize?null:tile._data[2], Q$ProjectedCornersDistanceTileLODTester$PvtData);
  if (!data_0) {
    mediumHeight = tile._tileTessellatorMeshData._averageHeight;
    data_0 = new ProjectedCornersDistanceTileLODTester$PvtData_0(tile, mediumHeight, rc._planet);
    $setData(tile, data_0);
  }
  return data_0;
}

function ProjectedCornersDistanceTileLODTester_0(){
}

defineSeed(631, 445, {}, ProjectedCornersDistanceTileLODTester_0);
_.meetsRenderCriteria = function meetsRenderCriteria_3(rc, prc, tile){
  return $evaluate($getData(tile, rc), rc._currentCamera, prc._texHeightSquared, prc._texWidthSquared);
}
;
_.onLayerTilesRenderParametersChanged = function onLayerTilesRenderParametersChanged_2(ltrp){
}
;
_.onTileHasChangedMesh = function onTileHasChangedMesh_2(tile){
}
;
_.renderStarted = function renderStarted_3(){
}
;
function TileData_0(id_0){
  this._id = id_0;
}

defineSeed(633, 1, makeCastMap([Q$TileData]));
_._id = 0;
function $evaluate(this$static, camera, texHeightSquared, texWidthSquared){
  var distanceInPixelsEast, distanceInPixelsNorth, distanceInPixelsSouth, distanceInPixelsSquaredArcEast, distanceInPixelsSquaredArcNorth, distanceInPixelsSquaredArcSouth, distanceInPixelsSquaredArcWest, distanceInPixelsWest;
  distanceInPixelsNorth = $getEstimatedPixelDistance(camera, this$static._northWestPoint, this$static._northEastPoint);
  distanceInPixelsSquaredArcNorth = distanceInPixelsNorth * distanceInPixelsNorth * this$static._northArcSegmentRatioSquared;
  if (distanceInPixelsSquaredArcNorth > texWidthSquared) {
    return false;
  }
  distanceInPixelsSouth = $getEstimatedPixelDistance(camera, this$static._southWestPoint, this$static._southEastPoint);
  distanceInPixelsSquaredArcSouth = distanceInPixelsSouth * distanceInPixelsSouth * this$static._southArcSegmentRatioSquared;
  if (distanceInPixelsSquaredArcSouth > texWidthSquared) {
    return false;
  }
  distanceInPixelsWest = $getEstimatedPixelDistance(camera, this$static._northWestPoint, this$static._southWestPoint);
  distanceInPixelsSquaredArcWest = distanceInPixelsWest * distanceInPixelsWest * this$static._westArcSegmentRatioSquared;
  if (distanceInPixelsSquaredArcWest > texHeightSquared) {
    return false;
  }
  distanceInPixelsEast = $getEstimatedPixelDistance(camera, this$static._northEastPoint, this$static._southEastPoint);
  distanceInPixelsSquaredArcEast = distanceInPixelsEast * distanceInPixelsEast * this$static._eastArcSegmentRatioSquared;
  if (distanceInPixelsSquaredArcEast > texHeightSquared) {
    return false;
  }
  return true;
}

function ProjectedCornersDistanceTileLODTester$PvtData_0(tile, mediumHeight, planet){
  var normalNE, normalNW, normalSE, normalSW;
  TileData_0.call(this, 2);
  this._northWestPoint = new Vector3D_1(planet.toCartesian_1($getNW(tile._sector), mediumHeight));
  this._northEastPoint = new Vector3D_1(planet.toCartesian_1(tile._sector._upper, mediumHeight));
  this._southWestPoint = new Vector3D_1(planet.toCartesian_1(tile._sector._lower, mediumHeight));
  this._southEastPoint = new Vector3D_1(planet.toCartesian_1($getSE(tile._sector), mediumHeight));
  normalNW = planet.centricSurfaceNormal(this._northWestPoint);
  normalNE = planet.centricSurfaceNormal(this._northEastPoint);
  normalSW = planet.centricSurfaceNormal(this._southWestPoint);
  normalSE = planet.centricSurfaceNormal(this._southEastPoint);
  this._northArcSegmentRatioSquared = getSquaredArcSegmentRatio(normalNW, normalNE);
  this._southArcSegmentRatioSquared = getSquaredArcSegmentRatio(normalSW, normalSE);
  this._eastArcSegmentRatioSquared = getSquaredArcSegmentRatio(normalNE, normalSE);
  this._westArcSegmentRatioSquared = getSquaredArcSegmentRatio(normalNW, normalSW);
}

function getSquaredArcSegmentRatio(a, b){
  var angleInRadians, arcSegmentRatio, halfAngleSin;
  angleInRadians = angleInRadiansBetween_0(a, b);
  halfAngleSin = Math.sin(angleInRadians / 2);
  arcSegmentRatio = halfAngleSin == 0?1:angleInRadians / (2 * halfAngleSin);
  return arcSegmentRatio * arcSegmentRatio;
}

defineSeed(632, 633, makeCastMap([Q$ProjectedCornersDistanceTileLODTester$PvtData, Q$TileData]), ProjectedCornersDistanceTileLODTester$PvtData_0);
_._eastArcSegmentRatioSquared = 0;
_._northArcSegmentRatioSquared = 0;
_._southArcSegmentRatioSquared = 0;
_._westArcSegmentRatioSquared = 0;
function ProjectionGLFeature_0(projection){
  GLCameraGroupFeature_0.call(this, projection, 4);
}

defineSeed(634, 483, makeCastMap([Q$GLCameraGroupFeature, Q$GLFeature, Q$ProjectionGLFeature, Q$RCObject]), ProjectionGLFeature_0);
_.dispose = function dispose_71(){
  $_release(this._matrixHolder);
  !!this._values && $dispose_6(this._values);
  $dispose_1(this);
}
;
function $aboveLevel(this$static, sector, level){
  var i_0, maxLevel;
  maxLevel = 0;
  for (i_0 = 0; i_0 < this$static._pyrComposition.size_0; i_0++)
    $touchesWith(sector, $getSector(dynamicCast($get_2(this$static._pyrComposition, i_0), Q$PyramidElevationDataProvider$PyramidComposition))) && (maxLevel = $max_2(maxLevel, dynamicCast($get_2(this$static._pyrComposition, i_0), Q$PyramidElevationDataProvider$PyramidComposition)._pyramidLevel));
  if (level > maxLevel)
    return true;
  else {
    if (!$touchesWith(sector, this$static._sector))
      return true;
    return false;
  }
}

function $cancelRequest(this$static, requestId){
  $cancelRequest_1(this$static._downloader, requestId);
}

function $initialize_5(this$static, context){
  this$static._downloader = context._downloader;
  $requestBuffer(this$static._downloader, new URL_2(this$static._layer + 'meta.json'), P2710_longLit, (new TimeInterval_0(P9a7ec800_longLit) , new PyramidElevationDataProvider$MetadataListener_0(this$static._pyrComposition)));
}

function $requestElevationData(this$static, sector, level, row, column, extent, listener){
  var path, istr;
  if (!this$static._downloader || $aboveLevel(this$static, sector, level)) {
    return N1_longLit;
  }
  path = (istr = new StringBuilder_WebGL_0 , $addString(istr, this$static._layer) , istr._string += level , istr._string += '/' , istr._string += column , istr._string += '/' , istr._string += row , istr._string += '.json' , istr._string);
  return $requestBuffer(this$static._downloader, new URL_2(path), sub_0(P186a0_longLit, fromInt(level)), (new TimeInterval_0(P9a7ec800_longLit) , new PyramidElevationDataProvider_BufferDownloadListener_0(sector, extent, listener, this$static._deltaHeight)));
}

function PyramidElevationDataProvider_0(layer, sector){
  this._enabled = true;
  this._sector = new Sector_1(sector);
  this._layer = layer;
  this._pyrComposition = new ArrayList_0;
  this._deltaHeight = 0;
}

defineSeed(635, 458, {}, PyramidElevationDataProvider_0);
_._deltaHeight = 0;
function PyramidElevationDataProvider$MetadataListener_0(itself){
  this._itself = itself;
}

defineSeed(636, 382, {}, PyramidElevationDataProvider$MetadataListener_0);
_.onCancel = function onCancel_1(url_0){
}
;
_.onCanceledDownload = function onCanceledDownload_1(url_0, data_0, expired){
}
;
_.onDownload = function onDownload_1(url_0, buffer, expired){
  var array, i_0, parser, str, integer;
  str = $getAsString_0(buffer);
  parser = _instance_2;
  array = $getAsArray($parse(str).asObject(), 'sectors');
  if (!array) {
    throw new RuntimeException_1('Problem parsing at PyramidElevationDataProvider::MetadataListener::onDownload().');
  }
  for (i_0 = 0; i_0 < array._entries.size_0; i_0++) {
    $add_5(this._itself, new PyramidElevationDataProvider$PyramidComposition_0($getAsNumber_0($getAsObject_0($getAsObject_0($getAsObject(array, i_0), 'sector'), 'lower'), 'lat').value_1(), $getAsNumber_0($getAsObject_0($getAsObject_0($getAsObject(array, i_0), 'sector'), 'lower'), 'lon').value_1(), $getAsNumber_0($getAsObject_0($getAsObject_0($getAsObject(array, i_0), 'sector'), 'upper'), 'lat').value_1(), $getAsNumber_0($getAsObject_0($getAsObject_0($getAsObject(array, i_0), 'sector'), 'upper'), 'lon').value_1(), (integer = dynamicCast($getAsNumber_0($getAsObject(array, i_0), 'pyrLevel'), Q$JSONInteger) , integer._value)));
  }
}
;
_.onError = function onError_1(url_0){
}
;
function $getSector(this$static){
  return fromDegrees_2(this$static._lowerLat, this$static._lowerLon, this$static._upperLat, this$static._upperLon);
}

function PyramidElevationDataProvider$PyramidComposition_0(lowerLat, lowerLon, upperLat, upperLon, pyramidLevel){
  this._lowerLat = lowerLat;
  this._lowerLon = lowerLon;
  this._upperLat = upperLat;
  this._upperLon = upperLon;
  this._pyramidLevel = pyramidLevel;
}

defineSeed(637, 1, makeCastMap([Q$PyramidElevationDataProvider$PyramidComposition]), PyramidElevationDataProvider$PyramidComposition_0);
_._lowerLat = 0;
_._lowerLon = 0;
_._pyramidLevel = 0;
_._upperLat = 0;
_._upperLon = 0;
function $getElevationData(sector, extent, data_0, deltaHeight){
  var dataArray, height, i_0, shortBuffer, size_0;
  size_0 = extent._x * extent._y;
  dataArray = $getAsArray(data_0, 'data');
  shortBuffer = initDim(_3S_classLit, makeCastMap([Q$Serializable]), -1, size_0, 1);
  for (i_0 = 0; i_0 < size_0; i_0++) {
    height = round_short($getAsNumber(dataArray, i_0, -32768));
    height == 15000?(height = -32768):height == -32768 && (height = -32768);
    shortBuffer[i_0] = height;
  }
  round_short($getAsNumber_1(data_0, 'max', -32768));
  round_short($getAsNumber_1(data_0, 'min', 32767));
  round_short($getAsNumber_1(data_0, 'withChildren', 0));
  round_short($getAsNumber_1(data_0, 'similarity', 0));
  return new ShortBufferElevationData_0(sector, extent, shortBuffer, size_0, deltaHeight);
}

function PyramidElevationDataProvider_BufferDownloadListener_0(sector, extent, listener, deltaHeight){
  this._sector = new Sector_1(sector);
  this._width = extent._x;
  this._height = extent._y;
  this._listener = listener;
  this._autodeleteListener = true;
  this._deltaHeight = deltaHeight;
}

defineSeed(638, 382, {}, PyramidElevationDataProvider_BufferDownloadListener_0);
_.onCancel = function onCancel_2(url_0){
  if (this._listener) {
    new Vector2I_0(this._width, this._height);
    $onCancel_0(this._listener);
    this._autodeleteListener && (this._listener = null);
  }
}
;
_.onCanceledDownload = function onCanceledDownload_2(url_0, data_0, expired){
  this._autodeleteListener && (this._listener = null);
}
;
_.onDownload = function onDownload_2(url_0, buffer, expired){
  var contents, elevationData, jsonContent, resolution;
  contents = $getAsString_0(buffer);
  jsonContent = $parse(contents).asObject();
  resolution = new Vector2I_0(round_int($getAsNumber_1(jsonContent, 'width', 0)), round_int($getAsNumber_1(jsonContent, 'height', 0)));
  elevationData = $getElevationData(this._sector, resolution, jsonContent, this._deltaHeight);
  !elevationData?$onError_0(this._listener):$onData_0(this._listener, elevationData);
  this._autodeleteListener && (this._listener = null);
}
;
_.onError = function onError_2(url_0){
  new Vector2I_0(this._width, this._height);
  $onError_0(this._listener);
  this._autodeleteListener && (this._listener = null);
}
;
_._autodeleteListener = false;
_._deltaHeight = 0;
_._height = 0;
_._width = 0;
function $clinit_Quality(){
  $clinit_Quality = nullMethod;
  QUALITY_LOW = new Quality_0('QUALITY_LOW', 0);
  QUALITY_MEDIUM = new Quality_0('QUALITY_MEDIUM', 1);
  QUALITY_HIGH = new Quality_0('QUALITY_HIGH', 2);
  $VALUES_11 = initValues(_3Lorg_glob3_mobile_generated_Quality_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Quality, [QUALITY_LOW, QUALITY_MEDIUM, QUALITY_HIGH]);
}

function Quality_0(enum$name, enum$ordinal){
  Enum_0.call(this, enum$name, enum$ordinal);
}

function values_12(){
  $clinit_Quality();
  return $VALUES_11;
}

defineSeed(639, 70, makeCastMap([Q$Serializable, Q$Comparable, Q$Enum, Q$Quality]), Quality_0);
var $VALUES_11, QUALITY_HIGH, QUALITY_LOW, QUALITY_MEDIUM;
function $dispose_13(this$static){
  $requestFinish(this$static._rasterLayerTileImageProvider, this$static._tileId);
  this$static._deleteListener && !!this$static._listener && this$static._listener.dispose();
  releaseContribution(this$static._contribution);
}

function $onCancel(this$static){
  this$static._listener.imageCreationCanceled(this$static._tileId);
}

function $onDownload(this$static, url_0, image){
  var contribution;
  contribution = this$static._contribution;
  this$static._contribution = null;
  this$static._listener.imageCreated_0(this$static._tileId, image, url_0._path, contribution);
}

function $onError(this$static, url_0){
  this$static._listener.imageCreationError(this$static._tileId, 'Download error - ' + url_0._path);
}

function RLTIP_ImageDownloadListener_0(rasterLayerTileImageProvider, tileId, contribution, listener, deleteListener){
  this._rasterLayerTileImageProvider = rasterLayerTileImageProvider;
  this._tileId = tileId;
  this._contribution = contribution;
  this._listener = listener;
  this._deleteListener = deleteListener;
}

defineSeed(640, 561, {}, RLTIP_ImageDownloadListener_0);
_._deleteListener = false;
function $requestFinish(this$static, tileId){
  $remove_4(this$static._requestsIdsPerTile, tileId);
}

function RasterLayerTileImageProvider_0(layer, downloader){
  TileImageProvider_0.call(this);
  this._requestsIdsPerTile = new HashMap_0;
  this._layer = layer;
  this._downloader = downloader;
}

defineSeed(641, 412, makeCastMap([Q$RCObject, Q$TileImageProvider]), RasterLayerTileImageProvider_0);
_.cancel_1 = function cancel_6(tileId){
  var requestId;
  requestId = dynamicCast($remove_4(this._requestsIdsPerTile, tileId), Q$Long);
  !!requestId && $cancelRequest_1(this._downloader, requestId.value_0);
}
;
_.contribution = function contribution_1(tile){
  return !this._layer?null:this._layer.rawContribution(tile);
}
;
_.create = function create_4(tile, contribution, resolution, tileDownloadPriority, logDownloadActivity, listener, deleteListener, frameTasksExecutor){
  var requestId, tileId;
  tileId = tile._id;
  requestId = $requestImage(this._layer, tile, this._downloader, tileDownloadPriority, logDownloadActivity, new RLTIP_ImageDownloadListener_0(this, tileId, contribution, listener, deleteListener));
  gte_0(requestId, P0_longLit) && $put(this._requestsIdsPerTile, tileId, valueOf_1(requestId));
}
;
_.dispose = function dispose_72(){
  var entry, entry$iterator;
  for (entry$iterator = new AbstractHashMap$EntrySetIterator_0((new AbstractHashMap$EntrySet_0(this._requestsIdsPerTile)).this$0); $hasNext(entry$iterator.iter);) {
    entry = entry$iterator.last = dynamicCast($next_2(entry$iterator.iter), Q$Map$Entry);
    $cancelRequest_1(this._downloader, dynamicCast(entry.getValue(), Q$Long).value_0);
  }
  $dispose_1(this);
}
;
function RecreateTilesTask_0(planetRenderer){
  this._planetRenderer = planetRenderer;
}

defineSeed(642, 538, {}, RecreateTilesTask_0);
_.run_0 = function run_2(context){
  $recreateTiles(this._planetRenderer);
}
;
function $id(this$static){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'RectangleF|';
  $addDouble(isb, this$static._x);
  isb._string += '|';
  $addDouble(isb, this$static._y);
  isb._string += '|';
  $addDouble(isb, this$static._width);
  isb._string += '|';
  $addDouble(isb, this$static._height);
  s = isb._string;
  return s;
}

function RectangleF_0(x_0, y_0, width_0, height){
  this._x = x_0;
  this._y = y_0;
  this._width = width_0;
  this._height = height;
  (this._width < 0 || this._height < 0) && $logError(_instance_3, 'Invalid rectangle extent', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
}

function calculateInnerRectangleFromSector(wholeSectorWidth, wholeSectorHeight, wholeSector, innerSector){
  var deltaHeightFactor, deltaWidthFactor, heightFactor, heightFactor2, lowerUV, upperUV, widthFactor, widthFactor2;
  if (wholeSector._lower._latitude._degrees != wholeSector._lower._latitude._degrees || innerSector._lower._latitude._degrees != innerSector._lower._latitude._degrees) {
    $logError(_instance_3, 'Testing this case: view code', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return new RectangleF_0(0, 0, wholeSectorWidth, wholeSectorHeight);
  }
  if ($isEquals_0(wholeSector._lower, innerSector._lower) && $isEquals_0(wholeSector._upper, innerSector._upper)) {
    return new RectangleF_0(0, 0, wholeSectorWidth, wholeSectorHeight);
  }
  widthFactor2 = $div_0(innerSector._deltaLongitude, wholeSector._deltaLongitude);
  heightFactor2 = $div_0(innerSector._deltaLatitude, wholeSector._deltaLatitude);
  lowerUV = $getUVCoordinates_0(wholeSector, new Geodetic2D_0(innerSector._upper._latitude, innerSector._lower._longitude));
  upperUV = $getUVCoordinates_0(wholeSector, new Geodetic2D_0(innerSector._lower._latitude, innerSector._upper._longitude));
  widthFactor = upperUV._x - lowerUV._x;
  heightFactor = upperUV._y - lowerUV._y;
  deltaWidthFactor = widthFactor - widthFactor2;
  deltaHeightFactor = heightFactor - heightFactor2;
  (deltaWidthFactor < -1.0E-5 || deltaWidthFactor > 1.0E-5 || deltaHeightFactor < -1.0E-5 || deltaHeightFactor > 1.0E-5) && $logWarning(_instance_3, 'Testing this case (view code): factors are diferents: %f and %f', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [($clinit_Double() , new Double_0(widthFactor - widthFactor2)), new Double_0(heightFactor - heightFactor2)]));
  return new RectangleF_0(lowerUV._x * wholeSectorWidth, lowerUV._y * wholeSectorHeight, widthFactor * wholeSectorWidth, heightFactor * wholeSectorHeight);
}

function fullContains(outerWidth_0, outerHeight_0, innerX, innerY, innerWidth_0, innerHeight_0){
  if (!(innerX >= 0 && innerX <= outerWidth_0)) {
    return false;
  }
  if (!(innerX + innerWidth_0 >= 0 && innerX + innerWidth_0 <= outerWidth_0)) {
    return false;
  }
  if (!(innerY >= 0 && innerY <= outerHeight_0)) {
    return false;
  }
  if (!(innerY + innerHeight_0 >= 0 && innerY + innerHeight_0 <= outerHeight_0)) {
    return false;
  }
  return true;
}

defineSeed(643, 1, {}, RectangleF_0);
_._height = 0;
_._width = 0;
_._x = 0;
_._y = 0;
function $clinit_RenderState(){
  $clinit_RenderState = nullMethod;
  READY = new RenderState_2(0);
  BUSY = new RenderState_2(1);
}

function RenderState_0(errors){
  $clinit_RenderState();
  this._type = 2;
  this._errors = errors;
}

function RenderState_1(that){
  $clinit_RenderState();
  this._type = that._type;
  this._errors = that._errors;
}

function RenderState_2(type_0){
  this._type = type_0;
  this._errors = null;
}

function error_0(error){
  $clinit_RenderState();
  var errors;
  errors = new ArrayList_0;
  setCheck(errors.array, errors.size_0++, error);
  return new RenderState_0(errors);
}

defineSeed(644, 1, {}, RenderState_0, RenderState_1, RenderState_2);
_._type = 0;
var BUSY, READY;
function RenderedSectorCameraConstrainer_0(planetRenderer, maxHeight){
  this._planetRenderer = planetRenderer;
  this._maxHeight = maxHeight;
}

defineSeed(645, 1, makeCastMap([Q$ICameraConstrainer]), RenderedSectorCameraConstrainer_0);
_.onCameraChange = function onCameraChange(planet, previousCamera, nextCamera){
  var center, isValidHeight, isValidPosition, position, sector;
  if (this._planetRenderer) {
    sector = this._planetRenderer._renderedSector;
    position = (!nextCamera._geodeticPosition && (nextCamera._geodeticPosition = new Geodetic3D_2(nextCamera._planet.toGeodetic3D($asVector3D(nextCamera._position)))) , nextCamera._geodeticPosition);
    isValidHeight = position._height <= this._maxHeight;
    if (!sector) {
      isValidHeight || $setGeodeticPosition(nextCamera, new Geodetic3D_0(position._latitude, position._longitude, this._maxHeight));
    }
     else {
      center = $_getGeodeticCenterOfView(nextCamera);
      isValidPosition = $contains_1(sector, center._latitude, center._longitude);
      isValidPosition?isValidHeight || $setGeodeticPosition(nextCamera, new Geodetic3D_0(position._latitude, position._longitude, this._maxHeight)):$copyFrom(nextCamera, previousCamera);
    }
  }
  return true;
}
;
_._maxHeight = 0;
function RotateWithAxisEffect_0(axis_0, angle){
  this._force = 1;
  this._friction = 0.975;
  this._axis = new Vector3D_1(axis_0);
  this._degrees = angle._degrees;
}

defineSeed(646, 455, {}, RotateWithAxisEffect_0);
_.cancel_0 = function cancel_7(when){
}
;
_.dispose = function dispose_73(){
}
;
_.doStep = function doStep_4(rc, when){
  this._force *= this._friction;
  $rotateWithAxis(rc._nextCamera, this._axis, fromDegrees(this._degrees * this._force));
}
;
_.start_1 = function start_11(rc, when){
}
;
_.stop_0 = function stop_10(rc, when){
  $rotateWithAxis(rc._nextCamera, this._axis, fromDegrees(this._degrees * this._force));
}
;
_._degrees = 0;
function $clinit_Sector(){
  $clinit_Sector = nullMethod;
  FULL_SPHERE = fromDegrees_2(-90, -180, 90, 180);
  NAN_SECTOR = fromDegrees_2(NaN, NaN, NaN, NaN);
}

function $contains_1(this$static, latitude, longitude){
  return $isBetween(latitude, this$static._lower._latitude, this$static._upper._latitude) && $isBetween(longitude, this$static._lower._longitude, this$static._upper._longitude);
}

function $description_4(this$static){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += '(Sector ';
  $addString(isb, $description_0(this$static._lower));
  isb._string += ' - ';
  $addString(isb, $description_0(this$static._upper));
  isb._string += ')';
  s = isb._string;
  return s;
}

function $fullContains(this$static, that){
  return $contains_1(this$static, that._upper._latitude, that._upper._longitude) && $contains_1(this$static, that._lower._latitude, that._lower._longitude);
}

function $getAngularAreaInSquaredDegrees(this$static){
  return this$static._deltaLatitude._degrees * this$static._deltaLongitude._degrees;
}

function $getInnerPointLatitude(this$static, v){
  return linearInterpolation(this$static._lower._latitude, this$static._upper._latitude, 1 - v);
}

function $getInnerPointLongitude(this$static, u){
  return linearInterpolation(this$static._lower._longitude, this$static._upper._longitude, u);
}

function $getNW(this$static){
  return new Geodetic2D_0(this$static._upper._latitude, this$static._lower._longitude);
}

function $getSE(this$static){
  return new Geodetic2D_0(this$static._lower._latitude, this$static._upper._longitude);
}

function $getUVCoordinates(this$static, latitude, longitude){
  return new Vector2D_0((longitude._radians - this$static._lower._longitude._radians) / this$static._deltaLongitude._radians, (this$static._upper._latitude._radians - latitude._radians) / this$static._deltaLatitude._radians);
}

function $getUVCoordinates_0(this$static, point){
  return $getUVCoordinates(this$static, point._latitude, point._longitude);
}

function $id_0(this$static){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'Sector|';
  $addDouble(isb, this$static._lower._latitude._degrees);
  isb._string += '|';
  $addDouble(isb, this$static._lower._longitude._degrees);
  isb._string += '|';
  $addDouble(isb, this$static._upper._latitude._degrees);
  isb._string += '|';
  $addDouble(isb, this$static._upper._longitude._degrees);
  isb._string += '|';
  s = isb._string;
  return s;
}

function $intersection(this$static, that){
  var low, lowLat, lowLon, up, upLat, upLon;
  lowLat = max_2(this$static._lower._latitude, that._lower._latitude);
  lowLon = max_2(this$static._lower._longitude, that._lower._longitude);
  upLat = min_1(this$static._upper._latitude, that._upper._latitude);
  upLon = min_1(this$static._upper._longitude, that._upper._longitude);
  if (lowLat._radians < upLat._radians && lowLon._radians < upLon._radians) {
    low = new Geodetic2D_0(lowLat, lowLon);
    up = new Geodetic2D_0(upLat, upLon);
    return new Sector_0(low, up);
  }
  return fromDegrees_2(0, 0, 0, 0);
}

function $isEquals_3(this$static, that){
  return $isEquals_0(this$static._lower, that._lower) && $isEquals_0(this$static._upper, that._upper);
}

function $touchesPoles(this$static){
  return this$static._upper._latitude._degrees >= 89.9 || this$static._lower._latitude._degrees <= -89.9;
}

function $touchesWith(this$static, that){
  if (this$static._upper._latitude._radians < that._lower._latitude._radians || this$static._lower._latitude._radians > that._upper._latitude._radians) {
    return false;
  }
  if (this$static._upper._longitude._radians < that._lower._longitude._radians || this$static._lower._longitude._radians > that._upper._longitude._radians) {
    return false;
  }
  return true;
}

function Sector_0(lower, upper){
  $clinit_Sector();
  this._lower = new Geodetic2D_1(lower);
  this._upper = new Geodetic2D_1(upper);
  this._deltaLatitude = new Angle_1($sub(upper._latitude, lower._latitude));
  this._deltaLongitude = new Angle_1($sub(upper._longitude, lower._longitude));
  this._center = new Geodetic2D_0(midAngle(lower._latitude, upper._latitude), midAngle(lower._longitude, upper._longitude));
  this._deltaRadiusInRadians = -1;
  this._normalizedCartesianCenter = null;
}

function Sector_1(sector){
  $clinit_Sector();
  var normalizedCartesianCenter;
  this._lower = new Geodetic2D_1(sector._lower);
  this._upper = new Geodetic2D_1(sector._upper);
  this._deltaLatitude = new Angle_1(sector._deltaLatitude);
  this._deltaLongitude = new Angle_1(sector._deltaLongitude);
  this._center = new Geodetic2D_1(sector._center);
  this._deltaRadiusInRadians = sector._deltaRadiusInRadians;
  if (!sector._normalizedCartesianCenter) {
    this._normalizedCartesianCenter = null;
  }
   else {
    normalizedCartesianCenter = sector._normalizedCartesianCenter;
    this._normalizedCartesianCenter = new Vector3D_1(normalizedCartesianCenter);
  }
}

function fromDegrees_2(minLat, minLon, maxLat, maxLon){
  $clinit_Sector();
  var lower, upper;
  lower = new Geodetic2D_0(new Angle_0(minLat, minLat / 180 * 3.141592653589793), new Angle_0(minLon, minLon / 180 * 3.141592653589793));
  upper = new Geodetic2D_0(new Angle_0(maxLat, maxLat / 180 * 3.141592653589793), new Angle_0(maxLon, maxLon / 180 * 3.141592653589793));
  return new Sector_0(lower, upper);
}

defineSeed(647, 1, makeCastMap([Q$Sector]), Sector_0, Sector_1);
_.equals$ = function equals_23(obj){
  var other;
  if (this === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (Lorg_glob3_mobile_generated_Sector_2_classLit != getClass__devirtual$(obj)) {
    return false;
  }
  other = dynamicCast(obj, Q$Sector);
  if (!this._lower) {
    if (other._lower) {
      return false;
    }
  }
   else if (!$equals_2(this._lower, other._lower)) {
    return false;
  }
  if (!this._upper) {
    if (other._upper) {
      return false;
    }
  }
   else if (!$equals_2(this._upper, other._upper)) {
    return false;
  }
  return true;
}
;
_.hashCode$ = function hashCode_25(){
  var result;
  result = 31 + (!this._lower?0:$hashCode_0(this._lower));
  result = 31 * result + (!this._upper?0:$hashCode_0(this._upper));
  return result;
}
;
_.toString$ = function toString_59(){
  return $description_4(this);
}
;
_._deltaRadiusInRadians = 0;
var FULL_SPHERE, NAN_SECTOR;
function $clinit_ShaderType(){
  $clinit_ShaderType = nullMethod;
  VERTEX_SHADER = new ShaderType_0('VERTEX_SHADER', 0);
  FRAGMENT_SHADER = new ShaderType_0('FRAGMENT_SHADER', 1);
  $VALUES_12 = initValues(_3Lorg_glob3_mobile_generated_ShaderType_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$ShaderType, [VERTEX_SHADER, FRAGMENT_SHADER]);
}

function ShaderType_0(enum$name, enum$ordinal){
  Enum_0.call(this, enum$name, enum$ordinal);
}

function values_13(){
  $clinit_ShaderType();
  return $VALUES_12;
}

defineSeed(648, 70, makeCastMap([Q$Serializable, Q$Comparable, Q$Enum, Q$ShaderType]), ShaderType_0);
var $VALUES_12, FRAGMENT_SHADER, VERTEX_SHADER;
function $add_19(this$static, value_0){
  $push_back_0(this$static._values, value_0);
}

function $description_5(this$static){
  var i_0, isb, s, v;
  isb = new StringBuilder_WebGL_0;
  isb._string += 'ShortBufferBuilder: ';
  for (i_0 = 0; i_0 < this$static._values._size; i_0++) {
    v = $get_6(this$static._values, i_0);
    isb._string += v;
    isb._string += ', ';
  }
  s = isb._string;
  return s;
}

function ShortBufferBuilder_0(){
  this._values = new ShortBufferBuilder$ShortArrayList_0;
}

defineSeed(649, 1, {}, ShortBufferBuilder_0);
_.toString$ = function toString_60(){
  return $description_5(this);
}
;
function $ensureCapacity_0(this$static, mincap){
  var newcap, olddata;
  if (mincap > this$static._array.length) {
    newcap = (~~(this$static._array.length * 3) >> 1) + 1;
    olddata = this$static._array;
    this$static._array = initDim(_3S_classLit, makeCastMap([Q$Serializable]), -1, newcap < mincap?mincap:newcap, 1);
    arraycopy(olddata, 0, this$static._array, 0, this$static._size);
  }
}

function $get_6(this$static, index_0){
  return this$static._array[index_0];
}

function $push_back_0(this$static, element){
  $ensureCapacity_0(this$static, this$static._size + 1);
  this$static._array[this$static._size++] = element;
}

function ShortBufferBuilder$ShortArrayList_0(){
  this._array = initDim(_3S_classLit, makeCastMap([Q$Serializable]), -1, 1024, 1);
  this._size = 0;
}

defineSeed(650, 1, {}, ShortBufferBuilder$ShortArrayList_0);
_._size = 0;
function $getValueInBufferAt(this$static, index_0){
  var value_0;
  value_0 = this$static._buffer[index_0];
  if (value_0 == -32768) {
    return NaN;
  }
  return value_0;
}

function ShortBufferElevationData_0(sector, extent, buffer, bufferSize, deltaHeight){
  var i_0, size_0;
  ElevationData_0.call(this, sector, extent);
  this._bufferSize = bufferSize;
  this._deltaHeight = deltaHeight;
  this._buffer = buffer;
  this._bufferSize != this._width * this._height && $logError(_instance_3, 'Invalid buffer size', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  size_0 = this._bufferSize;
  for (i_0 = 0; i_0 < size_0; i_0++) {
    if (buffer[i_0] == -32768) {
      break;
    }
  }
}

defineSeed(651, 385, {}, ShortBufferElevationData_0);
_.dispose = function dispose_74(){
  this._buffer = null;
}
;
function SimpleCameraConstrainer_0(){
}

defineSeed(652, 1, makeCastMap([Q$ICameraConstrainer]), SimpleCameraConstrainer_0);
_.onCameraChange = function onCameraChange_0(planet, previousCamera, nextCamera){
  var height, maxHeight, radii;
  radii = $maxAxis(planet.getRadii());
  maxHeight = radii * 9;
  height = (!nextCamera._geodeticPosition && (nextCamera._geodeticPosition = new Geodetic3D_2(nextCamera._planet.toGeodetic3D($asVector3D(nextCamera._position)))) , nextCamera._geodeticPosition)._height;
  (height < 10 || height > maxHeight) && $copyFrom(nextCamera, previousCamera);
  return true;
}
;
function $getCameraPosition(planet, planetRenderer){
  var sector;
  sector = !planetRenderer?null:planetRenderer._renderedSector;
  return !sector?planet.getDefaultCameraPosition(($clinit_Sector() , $clinit_Sector() , FULL_SPHERE)):planet.getDefaultCameraPosition(sector);
}

defineSeed(655, 597, {});
_._rotationCenterU = 0;
_._rotationCenterV = 0;
_._rotationInRadians = 0;
_._scaleU = 0;
_._scaleV = 0;
_._translationU = 0;
_._translationV = 0;
function $dispose_14(this$static){
  this$static._ownedTexCoords && !!this$static._texCoords && $dispose_19(this$static._texCoords);
  $releaseGLTextureId_0(this$static);
}

function $modifyGLState_1(this$static, state){
  var tglf;
  if (!this$static._texCoords) {
    $logError(_instance_3, 'SimpleTextureMapping::bind() with _texCoords == NULL', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  }
   else {
    tglf = dynamicCast($getGLFeature(state, 6), Q$TextureGLFeature);
    if (!!tglf && tglf._texID == this$static._glTextureId._id) {
      $setScale(tglf, this$static._scaleU, this$static._scaleV);
      $setTranslation(tglf, this$static._translationU, this$static._translationV);
      $setRotationAngleInRadiansAndRotationCenter(tglf, this$static._rotationInRadians, this$static._rotationCenterU, this$static._rotationCenterV);
    }
     else {
      $clearGLFeatureGroup(state, ($clinit_GLFeatureGroupName() , COLOR_GROUP));
      this$static._scaleU != 1 || this$static._scaleV != 1 || this$static._translationU != 0 || this$static._translationV != 0 || this$static._rotationInRadians != 0?$addGLFeature(state, new TextureGLFeature_1(this$static._glTextureId._id, this$static._texCoords, this$static._transparent, this$static._glTextureId._isPremultiplied?_one:_srcAlpha, _oneMinusSrcAlpha, this$static._translationU, this$static._translationV, this$static._scaleU, this$static._scaleV, this$static._rotationInRadians, this$static._rotationCenterU, this$static._rotationCenterV), false):$addGLFeature(state, new TextureGLFeature_0(this$static._glTextureId._id, this$static._texCoords, this$static._transparent, this$static._glTextureId._isPremultiplied?_one:_srcAlpha, _oneMinusSrcAlpha), false);
    }
  }
}

function $releaseGLTextureId_0(this$static){
  if (this$static._glTextureId) {
    $dispose_15(this$static._glTextureId);
    this$static._glTextureId = null;
  }
   else {
    $logError(_instance_3, 'Releasing invalid simple texture mapping', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  }
}

function SimpleTextureMapping_0(glTextureId, texCoords){
  this._translationU = 0;
  this._translationV = 0;
  this._scaleU = 1;
  this._scaleV = 1;
  this._rotationInRadians = 0;
  this._rotationCenterU = 0;
  this._rotationCenterV = 0;
  this._glTextureId = glTextureId;
  this._texCoords = texCoords;
  this._ownedTexCoords = true;
  this._transparent = true;
}

defineSeed(654, 655, {}, SimpleTextureMapping_0);
_._ownedTexCoords = false;
_._transparent = false;
function $contains_2(this$static, point){
  return $squaredDistanceTo_0(this$static._center, point) <= this$static._radiusSquared;
}

function $mergedWithBox(this$static, that){
  var lower, maxX, maxY, maxZ, minX, minY, minZ, upper;
  if ($contains_2(this$static, that._lower) && $contains_2(this$static, that._upper)) {
    return new Sphere_0(this$static);
  }
  upper = that._upper;
  lower = that._lower;
  minX = this$static._center._x - this$static._radius;
  lower._x < minX && (minX = lower._x);
  maxX = this$static._center._x + this$static._radius;
  upper._x > maxX && (maxX = upper._x);
  minY = this$static._center._y - this$static._radius;
  lower._y < minY && (minY = lower._y);
  maxY = this$static._center._y + this$static._radius;
  upper._y > maxY && (maxY = upper._y);
  minZ = this$static._center._z - this$static._radius;
  lower._z < minZ && (minZ = lower._z);
  maxZ = this$static._center._z + this$static._radius;
  upper._z > maxZ && (maxZ = upper._z);
  return new Box_0(new Vector3D_0(minX, minY, minZ), new Vector3D_0(maxX, maxY, maxZ));
}

function Sphere_0(that){
  this._center = new Vector3D_1(that._center);
  this._radius = that._radius;
  this._radiusSquared = that._radiusSquared;
}

function Sphere_1(center, radius){
  this._center = new Vector3D_1(center);
  this._radius = radius;
  this._radiusSquared = radius * radius;
}

defineSeed(656, 383, {}, Sphere_0, Sphere_1);
_.mergedWith = function mergedWith_0(that){
  if (!that) {
    return null;
  }
  return that.mergedWithSphere(this);
}
;
_.mergedWithBox = function mergedWithBox_0(that){
  return $mergedWithBox(this, that);
}
;
_.mergedWithSphere = function mergedWithSphere_0(that){
  var center, d, radius, u;
  d = sqrt_0($squaredDistanceTo_0(this._center, that._center));
  if (d + that._radius <= this._radius) {
    return new Sphere_0(this);
  }
  if (d + this._radius <= that._radius) {
    return new Sphere_0(that);
  }
  radius = (d + this._radius + that._radius) / 2;
  u = $normalized_0($sub_2(this._center, that._center));
  center = $add_21(this._center, $times_2(u, radius - this._radius));
  return new Sphere_1(center, radius);
}
;
_.touchesFrustum = function touchesFrustum_0(frustum){
  if ($signedDistance(frustum._nearPlane, this._center) > this._radius)
    return false;
  if ($signedDistance(frustum._farPlane, this._center) > this._radius)
    return false;
  if ($signedDistance(frustum._leftPlane, this._center) > this._radius)
    return false;
  if ($signedDistance(frustum._rightPlane, this._center) > this._radius)
    return false;
  if ($signedDistance(frustum._topPlane, this._center) > this._radius)
    return false;
  if ($signedDistance(frustum._bottomPlane, this._center) > this._radius)
    return false;
  return true;
}
;
_._radius = 0;
_._radiusSquared = 0;
function $closestPointToSphere_0(this$static, pos, ray){
  var D, O2, OU, R0, U2, a_, b, b_, c, c_, co2, rad, rad_, result, t;
  t = 0;
  R0 = this$static._sphere._radius;
  U2 = ray._x * ray._x + ray._y * ray._y + ray._z * ray._z;
  O2 = pos._x * pos._x + pos._y * pos._y + pos._z * pos._z;
  OU = pos._x * ray._x + pos._y * ray._y + pos._z * ray._z;
  b = 2 * OU;
  c = O2 - R0 * R0;
  rad = b * b - 4 * U2 * c;
  if (rad > 0) {
    t = (-b - sqrt_0(rad)) / (2 * U2);
    t < 1 && (t = (-b + sqrt_0(rad)) / (2 * U2));
    t < 1 && (rad = -12345);
  }
  if (rad < 0) {
    D = sqrt_0(O2);
    co2 = R0 * R0 / (D * D);
    a_ = OU * OU - co2 * O2 * U2;
    b_ = 2 * OU * O2 - co2 * 2 * OU * O2;
    c_ = O2 * O2 - co2 * O2 * O2;
    rad_ = b_ * b_ - 4 * a_ * c_;
    t = (-b_ - sqrt_0(rad_)) / (2 * a_);
  }
  result = $add_21(pos, new Vector3D_0(ray._x * t, ray._y * t, ray._z * t));
  return result;
}

function $getMidPoint_0(this$static, P0, P1){
  var midPoint, normal, theta, v0, v1;
  v0 = $toCartesian_1(this$static, P0._latitude, P0._longitude, 0);
  v1 = $toCartesian_1(this$static, P1._latitude, P1._longitude, 0);
  normal = $normalized_0(new Vector3D_0(v0._y * v1._z - v0._z * v1._y, v0._z * v1._x - v0._x * v1._z, v0._x * v1._y - v0._y * v1._x));
  theta = fromRadians(angleInRadiansBetween_0(v0, v1));
  midPoint = $scaleToGeocentricSurface_0(this$static, $rotateAroundAxis_0(v0, normal, $times(theta, 0.5)));
  return $toGeodetic2D_0(midPoint);
}

function $scaleToGeocentricSurface_0(this$static, position){
  return $times_2($normalized_0(position), this$static._sphere._radius);
}

function $toCartesian_1(this$static, latitude, longitude, height){
  var cosLatitude;
  return $times_2((cosLatitude = cos_0(latitude._radians) , new Vector3D_0(cosLatitude * cos_0(longitude._radians), cosLatitude * sin_0(longitude._radians), sin_0(latitude._radians))), this$static._sphere._radius + height);
}

function $toCartesian_2(this$static, geodetic){
  return $toCartesian_1(this$static, geodetic._latitude, geodetic._longitude, 0);
}

function $toGeodetic2D_0(position){
  var n;
  n = $normalized_0(position);
  return new Geodetic2D_0(fromRadians(asin_0(n._z)), fromRadians(atan2_0(n._y, n._x)));
}

function $toGeodetic3D_0(this$static, position){
  var h_0, height, p;
  p = $times_2($normalized_0(position), this$static._sphere._radius);
  h_0 = new Vector3D_0(position._x - p._x, position._y - p._y, position._z - p._z);
  height = h_0._x * position._x + h_0._y * position._y + h_0._z * position._z < 0?-sqrt_0(h_0._x * h_0._x + h_0._y * h_0._y + h_0._z * h_0._z):sqrt_0(h_0._x * h_0._x + h_0._y * h_0._y + h_0._z * h_0._z);
  return new Geodetic3D_1($toGeodetic2D_0(p), height);
}

function SphericalPlanet_0(sphere){
  this._origin = new MutableVector3D_0;
  this._initialPoint = new MutableVector3D_0;
  this._centerPoint = new MutableVector3D_0;
  this._centerRay = new MutableVector3D_0;
  this._initialPoint0 = new MutableVector3D_0;
  this._initialPoint1 = new MutableVector3D_0;
  this._lastDragAxis = new MutableVector3D_0;
  this._sphere = sphere;
  this._radii = new Vector3D_1(new Vector3D_0(sphere._radius, sphere._radius, sphere._radius));
}

defineSeed(657, 461, {}, SphericalPlanet_0);
_.applyCameraConstrainers = function applyCameraConstrainers_0(previousCamera, nextCamera){
}
;
_.beginDoubleDrag = function beginDoubleDrag_0(origin, centerRay, initialRay0, initialRay1){
  var g, g0, g1;
  $copyFrom_2(this._origin, origin);
  $copyFrom_2(this._centerRay, centerRay);
  $copyFrom_2(this._initialPoint0, $closestIntersection(this, origin, initialRay0));
  $copyFrom_2(this._initialPoint1, $closestIntersection(this, origin, initialRay1));
  this._angleBetweenInitialPoints = $angleBetween(this._initialPoint0, this._initialPoint1)._degrees;
  $copyFrom_2(this._centerPoint, $closestIntersection(this, origin, centerRay));
  this._angleBetweenInitialRays = fromRadians(angleInRadiansBetween_0(initialRay0, initialRay1))._degrees;
  g0 = $toGeodetic2D_0($asVector3D(this._initialPoint0));
  g1 = $toGeodetic2D_0($asVector3D(this._initialPoint1));
  g = $getMidPoint_0(this, g0, g1);
  $copyFrom_2(this._initialPoint, $toCartesian_1(this, g._latitude, g._longitude, 0));
}
;
_.beginSingleDrag = function beginSingleDrag_0(origin, initialRay){
  $copyFrom_2(this._origin, origin);
  $copyFrom_2(this._initialPoint, $closestIntersection(this, origin, initialRay));
  this._validSingleDrag = false;
}
;
_.centricSurfaceNormal = function centricSurfaceNormal_0(position){
  return $normalized_0(position);
}
;
_.createDoubleTapEffect = function createDoubleTapEffect_0(origin, centerRay, tapRay){
  var angle, axis_0, centerPoint, distance, height, initialPoint;
  initialPoint = $closestIntersection(this, origin, tapRay);
  if (initialPoint._x != initialPoint._x || initialPoint._y != initialPoint._y || initialPoint._z != initialPoint._z)
    return null;
  centerPoint = $closestIntersection(this, origin, centerRay);
  axis_0 = new Vector3D_0(initialPoint._y * centerPoint._z - initialPoint._z * centerPoint._y, initialPoint._z * centerPoint._x - initialPoint._x * centerPoint._z, initialPoint._x * centerPoint._y - initialPoint._y * centerPoint._x);
  angle = fromRadians(-asin_0(sqrt_0(axis_0._x * axis_0._x + axis_0._y * axis_0._y + axis_0._z * axis_0._z) / sqrt_0(initialPoint._x * initialPoint._x + initialPoint._y * initialPoint._y + initialPoint._z * initialPoint._z) / sqrt_0(centerPoint._x * centerPoint._x + centerPoint._y * centerPoint._y + centerPoint._z * centerPoint._z)));
  height = $toGeodetic3D_0(this, origin)._height;
  distance = height * 0.6;
  return new DoubleTapRotationEffect_0(new TimeInterval_0(P2ee_longLit), axis_0, angle, distance);
}
;
_.createEffectFromLastSingleDrag = function createEffectFromLastSingleDrag_0(){
  if (!this._validSingleDrag || $isNan(this._lastDragAxis))
    return null;
  return new RotateWithAxisEffect_0($asVector3D(this._lastDragAxis), fromRadians(this._lastDragRadiansStep));
}
;
_.distanceToHorizon = function distanceToHorizon_0(position){
  var D, R;
  R = this._sphere._radius;
  D = sqrt_0(position._x * position._x + position._y * position._y + position._z * position._z);
  return Math.sqrt(D * D - R * R);
}
;
_.doubleDrag = function doubleDrag_0(finalRay0, finalRay1){
  var P0, P1, angle, angle0, angle1, angle_n, angle_n1, centerPoint2, d, dAccum, distance, factor, finalPoint, finalRaysAngle, g, initialPoint, matrix, normal, p0, point0, point1, positionCamera, precision, ray0, ray1, rotation, rotationAxis, rotationDelta, sign, translation, translation2, v0, v1, viewDirection;
  if ($isNan(this._initialPoint0) || $isNan(this._initialPoint1))
    return new MutableMatrix44D_3;
  positionCamera = this._origin;
  finalRaysAngle = fromRadians(angleInRadiansBetween_0(finalRay0, finalRay1))._degrees;
  factor = finalRaysAngle / this._angleBetweenInitialRays;
  dAccum = 0;
  distance = $length($sub_0(this._origin, this._centerPoint));
  d = distance * (factor - 1) / factor;
  translation = createTranslationMatrix($times_2($normalized_0($asVector3D(this._centerRay)), d));
  positionCamera = new MutableVector3D_1(positionCamera._x * translation._m00 + positionCamera._y * translation._m01 + positionCamera._z * translation._m02 + translation._m03, positionCamera._x * translation._m10 + positionCamera._y * translation._m11 + positionCamera._z * translation._m12 + translation._m13, positionCamera._x * translation._m20 + positionCamera._y * translation._m21 + positionCamera._z * translation._m22 + translation._m23);
  dAccum += d;
  point0 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), finalRay0);
  point1 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), finalRay1);
  angle0 = fromRadians(angleInRadiansBetween_0(point0, point1))._degrees;
  if (angle0 != angle0)
    return new MutableMatrix44D_3;
  d = (distance - d) * 0.3 <= 0?0 - (distance - d) * 0.3:(distance - d) * 0.3;
  angle0 < this._angleBetweenInitialPoints && (d *= -1);
  $copyValue(translation, createTranslationMatrix($times_2($normalized_0($asVector3D(this._centerRay)), d)));
  positionCamera = new MutableVector3D_1(positionCamera._x * translation._m00 + positionCamera._y * translation._m01 + positionCamera._z * translation._m02 + translation._m03, positionCamera._x * translation._m10 + positionCamera._y * translation._m11 + positionCamera._z * translation._m12 + translation._m13, positionCamera._x * translation._m20 + positionCamera._y * translation._m21 + positionCamera._z * translation._m22 + translation._m23);
  dAccum += d;
  point0 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), finalRay0);
  point1 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), finalRay1);
  angle1 = fromRadians(angleInRadiansBetween_0(point0, point1))._degrees;
  if (angle1 != angle1)
    return new MutableMatrix44D_3;
  precision = pow_0(10, log10(distance) - 8);
  angle_n1 = angle0;
  angle_n = angle1;
  while ($abs(angle_n - this._angleBetweenInitialPoints) > precision) {
    (angle_n1 - angle_n) / (angle_n - this._angleBetweenInitialPoints) < 0 && (d *= -0.5);
    $copyValue(translation, createTranslationMatrix($times_2($normalized_0($asVector3D(this._centerRay)), d)));
    positionCamera = new MutableVector3D_1(positionCamera._x * translation._m00 + positionCamera._y * translation._m01 + positionCamera._z * translation._m02 + translation._m03, positionCamera._x * translation._m10 + positionCamera._y * translation._m11 + positionCamera._z * translation._m12 + translation._m13, positionCamera._x * translation._m20 + positionCamera._y * translation._m21 + positionCamera._z * translation._m22 + translation._m23);
    dAccum += d;
    angle_n1 = angle_n;
    point0 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), finalRay0);
    point1 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), finalRay1);
    angle_n = fromRadians(angleInRadiansBetween_0(point0, point1))._degrees;
    if (angle_n != angle_n)
      return new MutableMatrix44D_3;
  }
  matrix = new MutableMatrix44D_1(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  positionCamera = this._origin;
  viewDirection = this._centerRay;
  ray0 = new MutableVector3D_1(finalRay0._x, finalRay0._y, finalRay0._z);
  ray1 = new MutableVector3D_1(finalRay1._x, finalRay1._y, finalRay1._z);
  initialPoint = $asVector3D(this._initialPoint);
  rotationAxis = $cross_0(initialPoint, $asVector3D(this._centerPoint));
  rotationDelta = fromRadians(-acos_0($dot($normalized(this._initialPoint), $normalized(this._centerPoint))));
  if (rotationDelta._degrees != rotationDelta._degrees)
    return new MutableMatrix44D_3;
  rotation = createRotationMatrix(rotationDelta, rotationAxis);
  positionCamera = new MutableVector3D_1(positionCamera._x * rotation._m00 + positionCamera._y * rotation._m01 + positionCamera._z * rotation._m02 + rotation._m03, positionCamera._x * rotation._m10 + positionCamera._y * rotation._m11 + positionCamera._z * rotation._m12 + rotation._m13, positionCamera._x * rotation._m20 + positionCamera._y * rotation._m21 + positionCamera._z * rotation._m22 + rotation._m23);
  viewDirection = new MutableVector3D_1(viewDirection._x * rotation._m00 + viewDirection._y * rotation._m01 + viewDirection._z * rotation._m02, viewDirection._x * rotation._m10 + viewDirection._y * rotation._m11 + viewDirection._z * rotation._m12, viewDirection._x * rotation._m20 + viewDirection._y * rotation._m21 + viewDirection._z * rotation._m22);
  ray0 = new MutableVector3D_1(ray0._x * rotation._m00 + ray0._y * rotation._m01 + ray0._z * rotation._m02, ray0._x * rotation._m10 + ray0._y * rotation._m11 + ray0._z * rotation._m12, ray0._x * rotation._m20 + ray0._y * rotation._m21 + ray0._z * rotation._m22);
  ray1 = new MutableVector3D_1(ray1._x * rotation._m00 + ray1._y * rotation._m01 + ray1._z * rotation._m02, ray1._x * rotation._m10 + ray1._y * rotation._m11 + ray1._z * rotation._m12, ray1._x * rotation._m20 + ray1._y * rotation._m21 + ray1._z * rotation._m22);
  $copyValueOfMultiplication(matrix, rotation, matrix);
  translation2 = createTranslationMatrix($times_2($normalized_0(new Vector3D_0(viewDirection._x, viewDirection._y, viewDirection._z)), dAccum));
  positionCamera = new MutableVector3D_1(positionCamera._x * translation2._m00 + positionCamera._y * translation2._m01 + positionCamera._z * translation2._m02 + translation2._m03, positionCamera._x * translation2._m10 + positionCamera._y * translation2._m11 + positionCamera._z * translation2._m12 + translation2._m13, positionCamera._x * translation2._m20 + positionCamera._y * translation2._m21 + positionCamera._z * translation2._m22 + translation2._m23);
  $copyValueOfMultiplication(matrix, translation2, matrix);
  centerPoint2 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), new Vector3D_0(viewDirection._x, viewDirection._y, viewDirection._z));
  P0 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), new Vector3D_0(ray0._x, ray0._y, ray0._z));
  P1 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), new Vector3D_0(ray1._x, ray1._y, ray1._z));
  g = $getMidPoint_0(this, $toGeodetic2D_0(P0), $toGeodetic2D_0(P1));
  finalPoint = $toCartesian_1(this, g._latitude, g._longitude, 0);
  rotationAxis = new Vector3D_0(centerPoint2._y * finalPoint._z - centerPoint2._z * finalPoint._y, centerPoint2._z * finalPoint._x - centerPoint2._x * finalPoint._z, centerPoint2._x * finalPoint._y - centerPoint2._y * finalPoint._x);
  rotationDelta = fromRadians(-acos_0($dot_0($normalized_0(centerPoint2), $normalized_0(finalPoint))));
  if (rotationDelta._degrees != rotationDelta._degrees)
    return new MutableMatrix44D_3;
  rotation = createRotationMatrix(rotationDelta, rotationAxis);
  positionCamera = new MutableVector3D_1(positionCamera._x * rotation._m00 + positionCamera._y * rotation._m01 + positionCamera._z * rotation._m02 + rotation._m03, positionCamera._x * rotation._m10 + positionCamera._y * rotation._m11 + positionCamera._z * rotation._m12 + rotation._m13, positionCamera._x * rotation._m20 + positionCamera._y * rotation._m21 + positionCamera._z * rotation._m22 + rotation._m23);
  new MutableVector3D_1(viewDirection._x * rotation._m00 + viewDirection._y * rotation._m01 + viewDirection._z * rotation._m02, viewDirection._x * rotation._m10 + viewDirection._y * rotation._m11 + viewDirection._z * rotation._m12, viewDirection._x * rotation._m20 + viewDirection._y * rotation._m21 + viewDirection._z * rotation._m22);
  ray0 = new MutableVector3D_1(ray0._x * rotation._m00 + ray0._y * rotation._m01 + ray0._z * rotation._m02, ray0._x * rotation._m10 + ray0._y * rotation._m11 + ray0._z * rotation._m12, ray0._x * rotation._m20 + ray0._y * rotation._m21 + ray0._z * rotation._m22);
  new MutableVector3D_1(ray1._x * rotation._m00 + ray1._y * rotation._m01 + ray1._z * rotation._m02, ray1._x * rotation._m10 + ray1._y * rotation._m11 + ray1._z * rotation._m12, ray1._x * rotation._m20 + ray1._y * rotation._m21 + ray1._z * rotation._m22);
  $copyValueOfMultiplication(matrix, rotation, matrix);
  normal = $normalized_0(centerPoint2);
  v0 = $projectionInPlane($sub_2($asVector3D(this._initialPoint0), centerPoint2), normal);
  p0 = $closestIntersection(this, new Vector3D_0(positionCamera._x, positionCamera._y, positionCamera._z), new Vector3D_0(ray0._x, ray0._y, ray0._z));
  v1 = $projectionInPlane(new Vector3D_0(p0._x - centerPoint2._x, p0._y - centerPoint2._y, p0._z - centerPoint2._z), normal);
  angle = fromRadians(angleInRadiansBetween_0(v0, v1))._degrees;
  sign = $dot_0(new Vector3D_0(v1._y * v0._z - v1._z * v0._y, v1._z * v0._x - v1._x * v0._z, v1._x * v0._y - v1._y * v0._x), normal);
  sign < 0 && (angle = -angle);
  rotation = createGeneralRotationMatrix(new Angle_0(angle, angle / 180 * 3.141592653589793), normal, centerPoint2);
  $copyValueOfMultiplication(matrix, rotation, matrix);
  return matrix;
}
;
_.drag = function drag_0(origin, destination){
  var P0, P1, angle, axis_0, rotatedP0, rotation, traslation;
  P0 = $toCartesian_1(this, origin._latitude, origin._longitude, origin._height);
  P1 = $toCartesian_1(this, destination._latitude, destination._longitude, destination._height);
  axis_0 = new Vector3D_0(P0._y * P1._z - P0._z * P1._y, P0._z * P1._x - P0._x * P1._z, P0._x * P1._y - P0._y * P1._x);
  if (sqrt_0(axis_0._x * axis_0._x + axis_0._y * axis_0._y + axis_0._z * axis_0._z) < 0.001)
    return new MutableMatrix44D_3;
  angle = fromRadians(angleInRadiansBetween_0(P0, P1));
  rotation = createRotationMatrix(angle, axis_0);
  rotatedP0 = new Vector3D_0(P0._x * rotation._m00 + P0._y * rotation._m01 + P0._z * rotation._m02 + rotation._m03, P0._x * rotation._m10 + P0._y * rotation._m11 + P0._z * rotation._m12 + rotation._m13, P0._x * rotation._m20 + P0._y * rotation._m21 + P0._z * rotation._m22 + rotation._m23);
  traslation = createTranslationMatrix(new Vector3D_0(P1._x - rotatedP0._x, P1._y - rotatedP0._y, P1._z - rotatedP0._z));
  return $multiply(traslation, rotation);
}
;
_.geodeticSurfaceNormal = function geodeticSurfaceNormal_0(position){
  return $asVector3D($normalized(position));
}
;
_.getDefaultCameraPosition = function getDefaultCameraPosition_0(rendereSector){
  var ane, asw, height;
  asw = $toCartesian_2(this, rendereSector._lower);
  ane = $toCartesian_2(this, rendereSector._upper);
  height = $length_1(new Vector3D_0(asw._x - ane._x, asw._y - ane._y, asw._z - ane._z)) * 1.9;
  return new Geodetic3D_1(rendereSector._center, height);
}
;
_.getNorth = function getNorth_0(){
  return $clinit_Vector3D() , new Vector3D_0(0, 0, 1);
}
;
_.getRadii = function getRadii_0(){
  return this._radii;
}
;
_.intersectionsDistances = function intersectionsDistances_0(originX, originY, originZ, directionX, directionY, directionZ){
  var a, b, c, discriminant, intersections, root1, root2, rootDiscriminant;
  intersections = new ArrayList_0;
  a = directionX * directionX + directionY * directionY + directionZ * directionZ;
  b = 2 * (originX * directionX + originY * directionY + originZ * directionZ);
  c = originX * originX + originY * originY + originZ * originZ - this._sphere._radiusSquared;
  discriminant = b * b - 4 * a * c;
  if (discriminant < 0) {
    return intersections;
  }
   else if (discriminant == 0) {
    $add_5(intersections, ($clinit_Double() , new Double_0(-0.5 * b / a)));
    return intersections;
  }
  rootDiscriminant = sqrt_0(discriminant);
  root1 = (-b + rootDiscriminant) / (2 * a);
  root2 = (-b - rootDiscriminant) / (2 * a);
  if (root1 < root2) {
    $add_5(intersections, ($clinit_Double() , new Double_0(root1)));
    $add_5(intersections, new Double_0(root2));
  }
   else {
    $add_5(intersections, ($clinit_Double() , new Double_0(root2)));
    $add_5(intersections, new Double_0(root1));
  }
  return intersections;
}
;
_.isFlat = function isFlat_0(){
  return false;
}
;
_.singleDrag = function singleDrag_0(finalRay){
  var finalPoint, origin, radians, rotationAxis, rotationDelta, sinus;
  if ($isNan(this._initialPoint))
    return new MutableMatrix44D_3;
  origin = $asVector3D(this._origin);
  finalPoint = $asMutableVector3D($closestIntersection(this, origin, finalRay));
  if (finalPoint._x != finalPoint._x || finalPoint._y != finalPoint._y || finalPoint._z != finalPoint._z) {
    $copyFrom_2(finalPoint, $closestPointToSphere_0(this, origin, finalRay));
    if (finalPoint._x != finalPoint._x || finalPoint._y != finalPoint._y || finalPoint._z != finalPoint._z) {
      $logWarning(_instance_3, 'SphericalPlanet::singleDrag-> finalPoint is NaN', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
      return new MutableMatrix44D_3;
    }
  }
  rotationAxis = $asVector3D($cross(this._initialPoint, finalPoint));
  sinus = sqrt_0(rotationAxis._x * rotationAxis._x + rotationAxis._y * rotationAxis._y + rotationAxis._z * rotationAxis._z) / $length(this._initialPoint) / sqrt_0(finalPoint._x * finalPoint._x + finalPoint._y * finalPoint._y + finalPoint._z * finalPoint._z);
  rotationDelta = fromRadians(-asin_0(sinus));
  if (rotationDelta._degrees != rotationDelta._degrees)
    return new MutableMatrix44D_3;
  $copyFrom_2(this._lastDragAxis, rotationAxis);
  radians = rotationDelta._radians;
  this._lastDragRadiansStep = radians - this._lastDragRadians;
  this._lastDragRadians = radians;
  this._validSingleDrag = true;
  return createRotationMatrix(rotationDelta, rotationAxis);
}
;
_.toCartesian = function toCartesian_3(latitude, longitude, height){
  return $toCartesian_1(this, latitude, longitude, height);
}
;
_.toCartesian_0 = function toCartesian_4(geodetic){
  return $toCartesian_2(this, geodetic);
}
;
_.toCartesian_1 = function toCartesian_5(geodetic, height){
  return $toCartesian_1(this, geodetic._latitude, geodetic._longitude, height);
}
;
_.toCartesian_2 = function toCartesian_6(geodetic){
  return $toCartesian_1(this, geodetic._latitude, geodetic._longitude, geodetic._height);
}
;
_.toGeodetic3D = function toGeodetic3D_0(position){
  return $toGeodetic3D_0(this, position);
}
;
_._angleBetweenInitialPoints = 0;
_._angleBetweenInitialRays = 0;
_._lastDragRadians = 0;
_._lastDragRadiansStep = 0;
_._validSingleDrag = false;
function TaitBryanAngles_0(heading, pitch, roll){
  this._heading = new Angle_1(heading);
  this._pitch = new Angle_1(pitch);
  this._roll = new Angle_1(roll);
}

defineSeed(658, 1, {}, TaitBryanAngles_0);
function TextCanvasElement_0(text_0, font, color_0){
  this._text = text_0;
  this._font = new GFont_1(font);
  this._color = new Color_1(color_0);
}

defineSeed(659, 407, makeCastMap([Q$CanvasElement]), TextCanvasElement_0);
_.drawAt = function drawAt_0(left, top_0, canvas){
  $setFont(canvas, this._font);
  $setFillColor(canvas, this._color);
  $fillText(canvas, this._text, left, top_0);
}
;
_.getExtent = function getExtent_0(canvas){
  $setFont(canvas, this._font);
  return $textExtent(canvas, this._text);
}
;
function $$init_1(this$static){
  this$static._texID = null;
}

function $createBasicValues(this$static, texCoords){
  var texUnit, value_0;
  value_0 = new GPUAttributeValueVec2Float_0(texCoords);
  texUnit = new GPUUniformValueInt_0(this$static._target);
  switch (this$static._target) {
    case 0:
      $addUniformValue(this$static._values, ($clinit_GPUUniformKey() , SAMPLER), texUnit);
      $addAttributeValue(this$static._values, ($clinit_GPUAttributeKey() , TEXTURE_COORDS), value_0);
      break;
    case 1:
      $addUniformValue(this$static._values, ($clinit_GPUUniformKey() , SAMPLER2), texUnit);
      $addAttributeValue(this$static._values, ($clinit_GPUAttributeKey() , TEXTURE_COORDS_2), value_0);
      break;
    case 2:
      $addUniformValue(this$static._values, ($clinit_GPUUniformKey() , SAMPLER3), texUnit);
      $addAttributeValue(this$static._values, ($clinit_GPUAttributeKey() , TEXTURE_COORDS_3), value_0);
      break;
    default:$_release(value_0);
      $_release(texUnit);
      $logError(_instance_3, 'Wrong texture target.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  }
}

function $setRotationAngleInRadiansAndRotationCenter(this$static, angle, u, v){
  if (!this$static._rotationAngle || !this$static._rotationCenter) {
    if (angle != 0) {
      this$static._rotationCenter = new GPUUniformValueVec2FloatMutable_0(u, v);
      $addUniformValue(this$static._values, ($clinit_GPUUniformKey() , ROTATION_CENTER_TEXTURE_COORDS), this$static._rotationCenter);
      this$static._rotationAngle = new GPUUniformValueFloatMutable_0(angle);
      $addUniformValue(this$static._values, ROTATION_ANGLE_TEXTURE_COORDS, this$static._rotationAngle);
    }
  }
   else {
    if (angle == 0) {
      $removeUniformValue(this$static._values, ($clinit_GPUUniformKey() , ROTATION_CENTER_TEXTURE_COORDS));
      $removeUniformValue(this$static._values, ROTATION_ANGLE_TEXTURE_COORDS);
    }
     else {
      $changeValue_0(this$static._rotationCenter, u, v);
      $changeValue(this$static._rotationAngle, angle);
    }
  }
}

function $setScale(this$static, u, v){
  if (!this$static._scale) {
    this$static._scale = new GPUUniformValueVec2FloatMutable_0(u, v);
    $addUniformValue(this$static._values, ($clinit_GPUUniformKey() , SCALE_TEXTURE_COORDS), this$static._scale);
  }
   else {
    u == 1 && v == 1?$removeUniformValue(this$static._values, ($clinit_GPUUniformKey() , SCALE_TEXTURE_COORDS)):$changeValue_0(this$static._scale, u, v);
  }
}

function $setTranslation(this$static, u, v){
  if (!this$static._translation) {
    this$static._translation = new GPUUniformValueVec2FloatMutable_0(u, v);
    $addUniformValue(this$static._values, ($clinit_GPUUniformKey() , TRANSLATION_TEXTURE_COORDS), this$static._translation);
  }
   else {
    u == 0 && v == 0?$removeUniformValue(this$static._values, ($clinit_GPUUniformKey() , TRANSLATION_TEXTURE_COORDS)):$changeValue_0(this$static._translation, u, v);
  }
}

function TextureGLFeature_0(texID, texCoords, blend, sFactor, dFactor){
  GLColorGroupFeature_0.call(this, 6, 4, blend, sFactor, dFactor);
  $$init_1(this);
  this._texID = texID;
  this._target = 0;
  this._translation = null;
  this._scale = null;
  this._rotationCenter = null;
  this._rotationAngle = null;
  $createBasicValues(this, texCoords);
}

function TextureGLFeature_1(texID, texCoords, blend, sFactor, dFactor, translateU, translateV, scaleU, scaleV, rotationAngleInRadians, rotationCenterU, rotationCenterV){
  GLColorGroupFeature_0.call(this, 6, 4, blend, sFactor, dFactor);
  $$init_1(this);
  this._texID = texID;
  this._target = 0;
  this._translation = null;
  this._scale = null;
  this._rotationCenter = null;
  this._rotationAngle = null;
  $createBasicValues(this, texCoords);
  $setTranslation(this, translateU, translateV);
  $setScale(this, scaleU, scaleV);
  $setRotationAngleInRadiansAndRotationCenter(this, rotationAngleInRadians, rotationCenterU, rotationCenterV);
}

defineSeed(660, 417, makeCastMap([Q$GLFeature, Q$PriorityGLFeature, Q$RCObject, Q$TextureGLFeature]), TextureGLFeature_0, TextureGLFeature_1);
_.applyOnGlobalGLState = function applyOnGlobalGLState_4(state){
  $blendingOnGlobalGLState(this, state);
  $bindTexture(state, this._target, this._texID);
}
;
_.dispose = function dispose_75(){
  !!this._values && $dispose_6(this._values);
  $dispose_1(this);
}
;
_._target = 0;
function TextureHolder_0(textureSpec){
  this._referenceCounter = 1;
  this._textureSpec = textureSpec;
  this._glTextureId = null;
}

defineSeed(661, 1, makeCastMap([Q$TextureHolder]), TextureHolder_0);
_._referenceCounter = 0;
function $dispose_15(this$static){
  $releaseGLTextureId_1(this$static._texHandler, this$static._id);
}

function TextureIDReference_0(id_0, isPremultiplied, texHandler){
  this._id = id_0;
  this._isPremultiplied = isPremultiplied;
  this._texHandler = texHandler;
}

defineSeed(662, 1, {}, TextureIDReference_0);
_._isPremultiplied = false;
function $description_6(this$static){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += '(';
  $addString(isb, this$static._id);
  isb._string += ' ';
  $addInt(isb, this$static._width);
  isb._string += 'x';
  $addInt(isb, this$static._height);
  isb._string += ')';
  s = isb._string;
  return s;
}

function $equalsTo(this$static, that){
  return compareTo_6(this$static._id, that._id) == 0 && this$static._width == that._width && this$static._height == that._height;
}

function TextureSpec_0(id_0, width_0, height, generateMipmap){
  this._id = id_0;
  this._width = width_0;
  this._height = height;
  this._generateMipmap = generateMipmap;
}

defineSeed(663, 1, makeCastMap([Q$TextureSpec]), TextureSpec_0);
_.equals$ = function equals_24(obj){
  var other;
  if (this === obj)
    return true;
  if (obj == null)
    return false;
  if (Lorg_glob3_mobile_generated_TextureSpec_2_classLit != getClass__devirtual$(obj))
    return false;
  other = dynamicCast(obj, Q$TextureSpec);
  if (this._height != other._height)
    return false;
  if (this._id == null) {
    if (other._id != null)
      return false;
  }
   else if (!$equals(this._id, other._id))
    return false;
  if (this._width != other._width)
    return false;
  return true;
}
;
_.hashCode$ = function hashCode_26(){
  var result;
  result = 31 + this._height;
  result = 31 * result + (this._id == null?0:getHashCode_0(this._id));
  result = 31 * result + this._width;
  return result;
}
;
_.toString$ = function toString_61(){
  return $description_6(this);
}
;
_._generateMipmap = false;
_._height = 0;
_._width = 0;
function $dispose_16(this$static){
  this$static._ownedMesh && !!this$static._mesh && $dispose_0(this$static._mesh);
  this$static._ownedTexMapping && !!this$static._textureMapping && $dispose_14(this$static._textureMapping);
  $_release(this$static._glState);
}

function TexturedMesh_0(mesh, textureMapping){
  Mesh_0.call(this);
  this._mesh = mesh;
  this._ownedMesh = true;
  this._textureMapping = textureMapping;
  this._ownedTexMapping = true;
  this._glState = new GLState_0;
}

defineSeed(664, 369, makeCastMap([Q$Mesh]), TexturedMesh_0);
_.dispose = function dispose_76(){
  $dispose_16(this);
}
;
_.getBoundingVolume = function getBoundingVolume_5(){
  return !this._mesh?null:$getBoundingVolume_0(this._mesh);
}
;
_.rawRender = function rawRender_7(rc, parentState){
  $modifyGLState_1(this._textureMapping, this._glState);
  $setParent_1(this._glState, parentState);
  $render(this._mesh, rc, this._glState);
}
;
_._ownedMesh = false;
_._ownedTexMapping = false;
function $getGLTextureIdIfAvailable(this$static, textureSpec){
  var _textureHoldersSize, holder, i_0;
  _textureHoldersSize = this$static._textureHolders.size_0;
  for (i_0 = 0; i_0 < _textureHoldersSize; i_0++) {
    holder = dynamicCast($get_2(this$static._textureHolders, i_0), Q$TextureHolder);
    if ($equalsTo(holder._textureSpec, textureSpec)) {
      ++holder._referenceCounter;
      return holder._glTextureId;
    }
  }
  return null;
}

function $getTextureIDReference(this$static, image, format, name_0, generateMipmap){
  var holder, previousId, textureSpec;
  textureSpec = new TextureSpec_0(name_0, $getWidth(image), $getHeight(image), generateMipmap);
  previousId = $getGLTextureIdIfAvailable(this$static, textureSpec);
  if (previousId) {
    return new TextureIDReference_0(previousId, false, this$static);
  }
  holder = new TextureHolder_0(textureSpec);
  holder._glTextureId = $uploadTexture_0(this$static._gl, image, format, textureSpec._generateMipmap);
  this$static._verbose && $logInfo(_instance_3, 'Uploaded texture "%s" to GPU with texId=%s', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [$description_6(textureSpec), 'GLTextureId_WebGL ' + getHashCode(holder._glTextureId._webGLTexture)]));
  $add_5(this$static._textureHolders, holder);
  return new TextureIDReference_0(holder._glTextureId, false, this$static);
}

function $releaseGLTextureId_1(this$static, glTextureId){
  var holder, i_0;
  if (!glTextureId) {
    return;
  }
  for (i_0 = 0; i_0 < this$static._textureHolders.size_0; i_0++) {
    holder = dynamicCast($get_2(this$static._textureHolders, i_0), Q$TextureHolder);
    if ($isEquals_4(holder._glTextureId, glTextureId)) {
      --holder._referenceCounter;
      if (holder._referenceCounter <= 0) {
        $deleteTexture(this$static._gl, holder._glTextureId);
        $remove_7(this$static._textureHolders, i_0);
      }
      return;
    }
  }
}

function $retainGLTextureId(this$static, glTextureId){
  var holder, i_0;
  if (!glTextureId) {
    return;
  }
  for (i_0 = 0; i_0 < this$static._textureHolders.size_0; i_0++) {
    holder = dynamicCast($get_2(this$static._textureHolders, i_0), Q$TextureHolder);
    if ($isEquals_4(holder._glTextureId, glTextureId)) {
      ++holder._referenceCounter;
      return;
    }
  }
  $logInfo(_instance_3, 'break (point) on me 6\n', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
}

function TexturesHandler_0(gl){
  this._textureHolders = new ArrayList_0;
  this._gl = gl;
  this._verbose = false;
}

defineSeed(665, 1, {}, TexturesHandler_0);
_._verbose = false;
function $ancestorChangedElevationData(this$static, ancestor){
  var i_0, subView, subtile, subtilesSize;
  if (ancestor._level > this$static._elevationDataLevel) {
    subView = $createElevationDataSubviewFromAncestor(this$static, ancestor);
    !!subView && $setElevationData(this$static, subView, ancestor._level);
  }
  if (this$static._subtiles) {
    subtilesSize = this$static._subtiles.size_0;
    for (i_0 = 0; i_0 < subtilesSize; i_0++) {
      subtile = dynamicCast($get_2(this$static._subtiles, i_0), Q$Tile);
      $ancestorChangedElevationData(subtile, this$static);
    }
  }
}

function $ancestorTexturedSolvedChanged_0(this$static, ancestor, textureSolved){
  var i_0, subtile, subtilesSize;
  if (textureSolved && this$static._textureSolved) {
    return;
  }
  !!this$static._texturizer && $ancestorTexturedSolvedChanged(this$static, ancestor, textureSolved);
  if (this$static._subtiles) {
    subtilesSize = this$static._subtiles.size_0;
    for (i_0 = 0; i_0 < subtilesSize; i_0++) {
      subtile = dynamicCast($get_2(this$static._subtiles, i_0), Q$Tile);
      $ancestorTexturedSolvedChanged_0(subtile, ancestor, textureSolved);
    }
  }
}

function $createElevationDataSubviewFromAncestor(this$static, ancestor){
  var ed;
  ed = ancestor._elevationData;
  if (!ed) {
    $logError(_instance_3, "Ancestor can't have undefined Elevation Data.", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return null;
  }
  if (ed._width < 1 || ed._height < 1) {
    $logWarning(_instance_3, 'Tile too small for ancestor elevation data.', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    return null;
  }
  if (!!this$static._lastElevationDataProvider && this$static._lastTileMeshResolutionX > 0 && this$static._lastTileMeshResolutionY > 0) {
    return new InterpolatedSubviewElevationData_0(ed, this$static._sector, new Vector2I_0(this$static._lastTileMeshResolutionX, this$static._lastTileMeshResolutionY));
  }
  $logError(_instance_3, "Can't create subview of elevation data from ancestor", initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  return null;
}

function $createSubTile(this$static, lowerLat, lowerLon, upperLat, upperLon, level, row, column, setParent){
  var parent_0;
  parent_0 = setParent?this$static:null;
  return new Tile_0(this$static._texturizer, parent_0, new Sector_0(new Geodetic2D_0(lowerLat, lowerLon), new Geodetic2D_0(upperLat, upperLon)), this$static._mercator, level, row, column, this$static._planetRenderer);
}

function $createSubTiles(this$static, setParent){
  var column2, lower, nextLevel, renderedSector, row2, s1, s2, s3, s4, splitLatitude, splitLongitude, subTiles, upper;
  this$static._justCreatedSubtiles = true;
  lower = this$static._sector._lower;
  upper = this$static._sector._upper;
  splitLongitude = midAngle(lower._longitude, upper._longitude);
  splitLatitude = this$static._mercator?calculateSplitLatitude(lower._latitude, upper._latitude):midAngle(lower._latitude, upper._latitude);
  nextLevel = this$static._level + 1;
  row2 = 2 * this$static._row;
  column2 = 2 * this$static._column;
  subTiles = new ArrayList_0;
  renderedSector = this$static._planetRenderer._renderedSector;
  s1 = new Sector_0(new Geodetic2D_0(lower._latitude, lower._longitude), new Geodetic2D_0(splitLatitude, splitLongitude));
  (!renderedSector || $touchesWith(renderedSector, s1)) && $add_5(subTiles, $createSubTile(this$static, lower._latitude, lower._longitude, splitLatitude, splitLongitude, nextLevel, row2, column2, setParent));
  s2 = new Sector_0(new Geodetic2D_0(lower._latitude, splitLongitude), new Geodetic2D_0(splitLatitude, upper._longitude));
  (!renderedSector || $touchesWith(renderedSector, s2)) && $add_5(subTiles, $createSubTile(this$static, lower._latitude, splitLongitude, splitLatitude, upper._longitude, nextLevel, row2, column2 + 1, setParent));
  s3 = new Sector_0(new Geodetic2D_0(splitLatitude, lower._longitude), new Geodetic2D_0(upper._latitude, splitLongitude));
  (!renderedSector || $touchesWith(renderedSector, s3)) && $add_5(subTiles, $createSubTile(this$static, splitLatitude, lower._longitude, upper._latitude, splitLongitude, nextLevel, row2 + 1, column2, setParent));
  s4 = new Sector_0(new Geodetic2D_0(splitLatitude, splitLongitude), new Geodetic2D_0(upper._latitude, upper._longitude));
  (!renderedSector || $touchesWith(renderedSector, s4)) && $add_5(subTiles, $createSubTile(this$static, splitLatitude, splitLongitude, upper._latitude, upper._longitude, nextLevel, row2 + 1, column2 + 1, setParent));
  setCapacity(subTiles.array, subTiles.size_0);
  return subTiles;
}

function $deleteTexturizedMesh(this$static, texturizer){
  if (!!this$static._parent && !!this$static._texturizedMesh) {
    !!texturizer && $tileMeshToBeDeleted(this$static);
    !!this$static._texturizedMesh && $dispose_10(this$static._texturizedMesh);
    this$static._texturizedMesh = null;
    !!this$static._texturizerData && $dispose_3(this$static._texturizerData);
    this$static._texturizerData = null;
    this$static._texturizerDirty = true;
    $setTextureSolved(this$static, false);
  }
}

function $description_7(this$static){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += '(Tile';
  isb._string += ' level=';
  $addInt(isb, this$static._level);
  isb._string += ', row=';
  $addInt(isb, this$static._row);
  isb._string += ', column=';
  $addInt(isb, this$static._column);
  isb._string += ', sector=';
  $addString(isb, $description_4(this$static._sector));
  isb._string += ')';
  s = isb._string;
  return s;
}

function $dispose_17(this$static){
  var i_0;
  !!this$static._debugMesh && $dispose_2(this$static._debugMesh);
  this$static._debugMesh = null;
  !!this$static._flatColorMesh && $dispose_4(this$static._flatColorMesh);
  this$static._flatColorMesh = null;
  !!this$static._tessellatorMesh && this$static._tessellatorMesh.dispose();
  this$static._tessellatorMesh = null;
  !!this$static._texturizerData && $dispose_3(this$static._texturizerData);
  this$static._texturizerData = null;
  !!this$static._texturizedMesh && $dispose_10(this$static._texturizedMesh);
  this$static._texturizedMesh = null;
  !!this$static._elevationData && this$static._elevationData.dispose();
  this$static._elevationData = null;
  if (this$static._elevationDataRequest) {
    $cancelRequest_0(this$static._elevationDataRequest);
    this$static._elevationDataRequest = null;
  }
  for (i_0 = 0; i_0 < this$static._dataSize; i_0++) {
  }
  this$static._data = null;
}

function $getDeepestTileContaining(this$static, position){
  var i_0, subtile, subtileResult, subtilesSize;
  if ($contains_1(this$static._sector, position._latitude, position._longitude)) {
    if (!this$static._subtiles) {
      return this$static;
    }
    subtilesSize = this$static._subtiles.size_0;
    for (i_0 = 0; i_0 < subtilesSize; i_0++) {
      subtile = dynamicCast($get_2(this$static._subtiles, i_0), Q$Tile);
      subtileResult = $getDeepestTileContaining(subtile, position);
      if (subtileResult) {
        return subtileResult;
      }
    }
  }
  return null;
}

function $getElevationDataFromAncestor(this$static){
  var ancestor, subView;
  if (!this$static._elevationData) {
    ancestor = this$static._parent;
    while (!!ancestor && ancestor._elevationDataLevel != ancestor._level) {
      ancestor = ancestor._parent;
    }
    if (ancestor) {
      subView = $createElevationDataSubviewFromAncestor(this$static, ancestor);
      $setElevationData(this$static, subView, ancestor._level);
    }
  }
}

function $getNormalizedPixelFromPosition(this$static, position, tileDimension){
  var uv;
  uv = $getUVCoordinates_0(this$static._sector, position);
  return new Vector2I_0(round_int(tileDimension._x * uv._x), round_int(tileDimension._y * uv._y));
}

function $getTessellatorMesh(this$static, rc, prc){
  var elevationDataProvider, meshHolder, tessellatorMesh;
  elevationDataProvider = prc._elevationDataProvider;
  !this$static._elevationData && !!elevationDataProvider && elevationDataProvider._enabled && $initializeElevationData(this$static, prc);
  if (!this$static._tessellatorMesh || this$static._mustActualizeMeshDueToNewElevationData) {
    this$static._mustActualizeMeshDueToNewElevationData = false;
    $onTileHasChangedMesh_0(this$static._planetRenderer, this$static);
    if (this$static._debugMesh) {
      !!this$static._debugMesh && $dispose_2(this$static._debugMesh);
      this$static._debugMesh = null;
    }
    if (!elevationDataProvider) {
      this$static._tessellatorMesh = $createTileMesh(prc._tessellator, rc, prc, this$static, null, this$static._tileTessellatorMeshData);
    }
     else {
      tessellatorMesh = $createTileMesh(prc._tessellator, rc, prc, this$static, this$static._elevationData, this$static._tileTessellatorMeshData);
      meshHolder = dynamicCast(this$static._tessellatorMesh, Q$MeshHolder);
      if (!meshHolder) {
        meshHolder = new MeshHolder_0(tessellatorMesh);
        this$static._tessellatorMesh = meshHolder;
      }
       else {
        $setMesh(meshHolder, tessellatorMesh);
      }
    }
    $sectorElevationChanged(this$static._elevationData);
  }
  return this$static._tessellatorMesh;
}

function $initializeElevationData(this$static, prc){
  var res, tileMeshResolution;
  tileMeshResolution = prc._layerTilesRenderParameters._tileMeshResolution;
  this$static._lastElevationDataProvider = prc._elevationDataProvider;
  this$static._lastTileMeshResolutionX = tileMeshResolution._x;
  this$static._lastTileMeshResolutionY = tileMeshResolution._y;
  if (!this$static._elevationDataRequest) {
    res = $getTileMeshResolution(prc._tessellator, prc, this$static);
    this$static._elevationDataRequest = new TileElevationDataRequest_0(this$static, new Vector2I_0(res._x, res._y), prc._elevationDataProvider);
    $sendRequest(this$static._elevationDataRequest);
  }
  !this$static._elevationData && $getElevationDataFromAncestor(this$static, new Vector2I_0(tileMeshResolution._x, tileMeshResolution._y));
}

function $prepareForFullRendering(this$static, rc, prc){
  var needsToCallTexturizer, tessellatorMesh;
  tessellatorMesh = $getTessellatorMesh(this$static, rc, prc);
  if (!tessellatorMesh) {
    return;
  }
  if (prc._texturizer) {
    needsToCallTexturizer = !this$static._texturizedMesh || this$static._texturizerDirty;
    needsToCallTexturizer && (this$static._texturizedMesh = $texturize(prc._texturizer, rc, prc, this$static, tessellatorMesh));
  }
}

function $prune(this$static, texturizer, elevationDataProvider){
  var i_0, subtile, subtilesSize;
  if (this$static._subtiles) {
    $sectorElevationChanged(this$static._elevationData);
    subtilesSize = this$static._subtiles.size_0;
    for (i_0 = 0; i_0 < subtilesSize; i_0++) {
      subtile = dynamicCast($get_2(this$static._subtiles, i_0), Q$Tile);
      $setIsVisible(subtile, false, texturizer);
      $prune(subtile, texturizer, elevationDataProvider);
      !!texturizer && $tileToBeDeleted(subtile);
      !!subtile && $dispose_17(subtile);
    }
    this$static._subtiles = null;
    this$static._subtiles = null;
  }
}

function $rawRender_0(this$static, rc, prc, glState){
  var needsToCallTexturizer, tessellatorMesh;
  tessellatorMesh = $getTessellatorMesh(this$static, rc, prc);
  if (!tessellatorMesh) {
    return;
  }
  if (!prc._texturizer) {
    tessellatorMesh._enable && tessellatorMesh.rawRender(rc, glState);
  }
   else {
    needsToCallTexturizer = !this$static._texturizedMesh || this$static._texturizerDirty;
    needsToCallTexturizer && (this$static._texturizedMesh = $texturize(prc._texturizer, rc, prc, this$static, tessellatorMesh));
    if (this$static._texturizedMesh) {
      $render(this$static._texturizedMesh, rc, glState);
    }
     else {
      !this$static._flatColorMesh && (this$static._flatColorMesh = new FlatColorMesh_0(tessellatorMesh, new Color_0(1, 1, 1, 1)));
      $render(this$static._flatColorMesh, rc, glState);
    }
  }
}

function $render_5(this$static, rc, prc, parentState, tilesStatistics, toVisitInNextIteration){
  var amIVisible, i_0, isRawRender, subTile, subTiles, subTilesSize, level, level_0, debugMesh, level_1, lowerLatitudeDegrees, lowerLongitudeDegrees, upperLatitudeDegrees, upperLongitudeDegrees;
  ++tilesStatistics._tilesProcessed;
  level = this$static._level;
  tilesStatistics._tilesProcessedByLevel[level] = tilesStatistics._tilesProcessedByLevel[level] + 1;
  amIVisible = $isVisible_0(prc._tileVisibilityTester, rc, prc, this$static);
  if (amIVisible) {
    $setIsVisible(this$static, true, prc._texturizer);
    ++tilesStatistics._tilesVisible;
    level_0 = this$static._level;
    tilesStatistics._tilesVisibleByLevel[level_0] = tilesStatistics._tilesVisibleByLevel[level_0] + 1;
    isRawRender = !toVisitInNextIteration || $meetsRenderCriteria_0(prc._tileLODTester, rc, prc, this$static) || prc._tilesRenderParameters._incrementalTileQuality && !this$static._textureSolved;
    if (isRawRender) {
      prc._renderTileMeshes && $rawRender_0(this$static, rc, prc, parentState);
      prc._tilesRenderParameters._renderDebug && (debugMesh = (!this$static._debugMesh && (this$static._debugMesh = $createTileDebugMesh(prc._tessellator, rc, prc, this$static)) , this$static._debugMesh) , !!debugMesh && debugMesh._enable && $rawRender(debugMesh, rc, parentState) , undefined);
      ++tilesStatistics._tilesRendered;
      level_1 = this$static._level;
      tilesStatistics._tilesRenderedByLevel[level_1] = tilesStatistics._tilesRenderedByLevel[level_1] + 1;
      lowerLatitudeDegrees = this$static._sector._lower._latitude._degrees;
      lowerLongitudeDegrees = this$static._sector._lower._longitude._degrees;
      upperLatitudeDegrees = this$static._sector._upper._latitude._degrees;
      upperLongitudeDegrees = this$static._sector._upper._longitude._degrees;
      lowerLatitudeDegrees < tilesStatistics._visibleLowerLatitudeDegrees && (tilesStatistics._visibleLowerLatitudeDegrees = lowerLatitudeDegrees);
      upperLatitudeDegrees < tilesStatistics._visibleLowerLatitudeDegrees && (tilesStatistics._visibleLowerLatitudeDegrees = upperLatitudeDegrees);
      lowerLatitudeDegrees > tilesStatistics._visibleUpperLatitudeDegrees && (tilesStatistics._visibleUpperLatitudeDegrees = lowerLatitudeDegrees);
      upperLatitudeDegrees > tilesStatistics._visibleUpperLatitudeDegrees && (tilesStatistics._visibleUpperLatitudeDegrees = upperLatitudeDegrees);
      lowerLongitudeDegrees < tilesStatistics._visibleLowerLongitudeDegrees && (tilesStatistics._visibleLowerLongitudeDegrees = lowerLongitudeDegrees);
      upperLongitudeDegrees < tilesStatistics._visibleLowerLongitudeDegrees && (tilesStatistics._visibleLowerLongitudeDegrees = upperLongitudeDegrees);
      lowerLongitudeDegrees > tilesStatistics._visibleUpperLongitudeDegrees && (tilesStatistics._visibleUpperLongitudeDegrees = lowerLongitudeDegrees);
      upperLongitudeDegrees > tilesStatistics._visibleUpperLongitudeDegrees && (tilesStatistics._visibleUpperLongitudeDegrees = upperLongitudeDegrees);
      $prune(this$static, prc._texturizer, prc._elevationDataProvider);
    }
     else {
      subTiles = (!this$static._subtiles && (this$static._subtiles = $createSubTiles(this$static, true)) , this$static._subtiles);
      if (this$static._justCreatedSubtiles) {
        prc._lastSplitTimer._startTimeInMilliseconds = fromDouble(currentTimeMillis0());
        this$static._justCreatedSubtiles = false;
      }
      subTilesSize = subTiles.size_0;
      for (i_0 = 0; i_0 < subTilesSize; i_0++) {
        subTile = (checkIndex(i_0, subTiles.size_0) , dynamicCast(subTiles.array[i_0], Q$Tile));
        setCheck(toVisitInNextIteration.array, toVisitInNextIteration.size_0++, subTile);
      }
    }
  }
   else {
    $setIsVisible(this$static, false, prc._texturizer);
    $prune(this$static, prc._texturizer, prc._elevationDataProvider);
  }
}

function $setData(this$static, data_0){
  var current, id_0, oldData, oldDataSize, requiredSize;
  id_0 = data_0._id;
  requiredSize = id_0 + 1;
  if (this$static._dataSize < requiredSize) {
    if (this$static._dataSize == 0) {
      this$static._data = initDim(_3Lorg_glob3_mobile_generated_TileData_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$TileData, requiredSize, 0);
      this$static._dataSize = requiredSize;
    }
     else {
      oldData = this$static._data;
      oldDataSize = this$static._dataSize;
      this$static._data = initDim(_3Lorg_glob3_mobile_generated_TileData_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$TileData, requiredSize, 0);
      this$static._dataSize = requiredSize;
      arraycopy(oldData, 0, this$static._data, 0, oldDataSize);
    }
  }
  current = this$static._data[id_0];
  current != data_0 && setCheck(this$static._data, id_0, data_0);
}

function $setElevationData(this$static, ed, level){
  var i_0, subtile, subtilesSize;
  if (this$static._elevationDataLevel < level) {
    !!this$static._elevationData && !!this$static._elevationData && this$static._elevationData.dispose();
    this$static._elevationData = ed;
    this$static._elevationDataLevel = level;
    this$static._mustActualizeMeshDueToNewElevationData = true;
    if (this$static._elevationDataLevel == this$static._level) {
      if (this$static._subtiles) {
        subtilesSize = this$static._subtiles.size_0;
        for (i_0 = 0; i_0 < subtilesSize; i_0++) {
          subtile = dynamicCast($get_2(this$static._subtiles, i_0), Q$Tile);
          $ancestorChangedElevationData(subtile, this$static);
        }
      }
    }
  }
}

function $setIsVisible(this$static, isVisible, texturizer){
  if (this$static._isVisible != isVisible) {
    this$static._isVisible = isVisible;
    this$static._isVisible || $deleteTexturizedMesh(this$static, texturizer);
  }
}

function $setTessellatorData(this$static, tessellatorData){
  tessellatorData != this$static._tessellatorData && (this$static._tessellatorData = tessellatorData);
}

function $setTextureSolved(this$static, textureSolved){
  var i_0, subtile, subtilesSize;
  if (textureSolved != this$static._textureSolved) {
    this$static._textureSolved = textureSolved;
    if (this$static._textureSolved) {
      !!this$static._texturizerData && $dispose_3(this$static._texturizerData);
      this$static._texturizerData = null;
    }
    if (this$static._subtiles) {
      subtilesSize = this$static._subtiles.size_0;
      for (i_0 = 0; i_0 < subtilesSize; i_0++) {
        subtile = dynamicCast($get_2(this$static._subtiles, i_0), Q$Tile);
        $ancestorTexturedSolvedChanged_0(subtile, this$static, this$static._textureSolved);
      }
    }
  }
}

function $setTexturizerData(this$static, texturizerData){
  if (texturizerData != this$static._texturizerData) {
    !!this$static._texturizerData && $dispose_3(this$static._texturizerData);
    this$static._texturizerData = texturizerData;
  }
}

function $toBeDeleted(this$static, texturizer, elevationDataProvider){
  $prune(this$static, texturizer, elevationDataProvider);
  !!texturizer && $tileToBeDeleted(this$static);
  !!elevationDataProvider && !!this$static._elevationDataRequest && $cancelRequest_0(this$static._elevationDataRequest);
}

function Tile_0(texturizer, parent_0, sector, mercator, level, row, column, planetRenderer){
  this._tileTessellatorMeshData = new TileTessellatorMeshData_0;
  this._texturizer = texturizer;
  this._parent = parent_0;
  this._sector = new Sector_1(sector);
  this._mercator = mercator;
  this._level = level;
  this._row = row;
  this._column = column;
  this._tessellatorMesh = null;
  this._debugMesh = null;
  this._flatColorMesh = null;
  this._texturizedMesh = null;
  this._textureSolved = false;
  this._texturizerDirty = true;
  this._subtiles = null;
  this._justCreatedSubtiles = false;
  this._isVisible = false;
  this._texturizerData = null;
  this._elevationData = null;
  this._elevationDataLevel = -1;
  this._elevationDataRequest = null;
  this._mustActualizeMeshDueToNewElevationData = false;
  this._lastTileMeshResolutionX = -1;
  this._lastTileMeshResolutionY = -1;
  this._planetRenderer = planetRenderer;
  this._tessellatorData = null;
  this._id = level + '/' + row + '/' + column;
  this._data = null;
  this._dataSize = 0;
}

defineSeed(666, 1, makeCastMap([Q$Tile]), Tile_0);
_.toString$ = function toString_62(){
  return $description_7(this);
}
;
_._column = 0;
_._dataSize = 0;
_._elevationDataLevel = 0;
_._isVisible = false;
_._justCreatedSubtiles = false;
_._lastTileMeshResolutionX = 0;
_._lastTileMeshResolutionY = 0;
_._level = 0;
_._mercator = false;
_._mustActualizeMeshDueToNewElevationData = false;
_._row = 0;
_._textureSolved = false;
_._texturizerDirty = false;
function $cancelRequest_0(this$static){
  if (this$static._listener) {
    this$static._listener._request = null;
    $cancelRequest(this$static._provider, this$static._requestID);
  }
}

function $onData(this$static, elevationData){
  this$static._listener = null;
  !!this$static._tile && $setElevationData(this$static._tile, elevationData, this$static._tile._level);
}

function $sendRequest(this$static){
  this$static._listener = new TileElevationDataRequestListener_0(this$static);
  this$static._requestID = $requestElevationData(this$static._provider, this$static._tile._sector, this$static._tile._level, this$static._tile._row, this$static._tile._column, this$static._resolution, this$static._listener);
}

function TileElevationDataRequest_0(tile, resolution, provider){
  this._tile = tile;
  this._resolution = resolution;
  this._provider = provider;
  this._requestID = N1_longLit;
  this._listener = null;
}

defineSeed(667, 1, {}, TileElevationDataRequest_0);
_._requestID = P0_longLit;
function $onCancel_0(this$static){
  !!this$static._request && (this$static._request._listener = null);
}

function $onData_0(this$static, elevationData){
  !!this$static._request && $onData(this$static._request, elevationData);
}

function $onError_0(this$static){
  !!this$static._request && (this$static._request._listener = null);
}

function TileElevationDataRequestListener_0(request){
  this._request = request;
}

defineSeed(668, 1, {}, TileElevationDataRequestListener_0);
function TileTessellatorMeshData_0(){
}

defineSeed(669, 1, {}, TileTessellatorMeshData_0);
_._averageHeight = 0;
function TilesRenderParameters_0(renderDebug, forceFirstLevelTilesRenderOnStart, incrementalTileQuality, quality){
  this._renderDebug = renderDebug;
  this._forceFirstLevelTilesRenderOnStart = forceFirstLevelTilesRenderOnStart;
  this._incrementalTileQuality = incrementalTileQuality;
  switch (quality.ordinal) {
    case 0:
      this._texturePixelsPerInch = 64;
      break;
    case 1:
      this._texturePixelsPerInch = 128;
      break;
    default:this._texturePixelsPerInch = 256;
  }
}

defineSeed(670, 1, {}, TilesRenderParameters_0);
_._forceFirstLevelTilesRenderOnStart = false;
_._incrementalTileQuality = false;
_._renderDebug = false;
_._texturePixelsPerInch = 0;
function $clear_0(this$static){
  var i_0;
  this$static._tilesProcessed = 0;
  this$static._tilesVisible = 0;
  this$static._tilesRendered = 0;
  this$static._visibleLowerLatitudeDegrees = 1.7976931348623157E308;
  this$static._visibleLowerLongitudeDegrees = 1.7976931348623157E308;
  this$static._visibleUpperLatitudeDegrees = -1.7976931348623157E308;
  this$static._visibleUpperLongitudeDegrees = -1.7976931348623157E308;
  for (i_0 = 0; i_0 < 128; i_0++) {
    this$static._tilesProcessedByLevel[i_0] = 0;
    this$static._tilesVisibleByLevel[i_0] = 0;
    this$static._tilesRenderedByLevel[i_0] = 0;
  }
}

function $log_3(this$static, logger){
  $logInfo(logger, 'Tiles processed:%d (%s), visible:%d (%s), rendered:%d (%s).', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, [valueOf_0(this$static._tilesProcessed), asLogString(this$static._tilesProcessedByLevel), valueOf_0(this$static._tilesVisible), asLogString(this$static._tilesVisibleByLevel), valueOf_0(this$static._tilesRendered), asLogString(this$static._tilesRenderedByLevel)]));
}

function $updateVisibleSector(this$static, visibleSector){
  if (!visibleSector || visibleSector._lower._latitude._degrees != this$static._visibleLowerLatitudeDegrees || visibleSector._lower._longitude._degrees != this$static._visibleLowerLongitudeDegrees || visibleSector._upper._latitude._degrees != this$static._visibleUpperLatitudeDegrees || visibleSector._upper._longitude._degrees != this$static._visibleUpperLongitudeDegrees) {
    !!visibleSector && !!visibleSector._normalizedCartesianCenter && undefined;
    if (this$static._visibleLowerLatitudeDegrees > this$static._visibleUpperLatitudeDegrees || this$static._visibleLowerLongitudeDegrees > this$static._visibleUpperLongitudeDegrees) {
      return null;
    }
    return new Sector_0(fromDegrees_0(this$static._visibleLowerLatitudeDegrees, this$static._visibleLowerLongitudeDegrees), fromDegrees_0(this$static._visibleUpperLatitudeDegrees, this$static._visibleUpperLongitudeDegrees));
  }
  return visibleSector;
}

function TilesStatistics_0(){
  this._tilesProcessedByLevel = initDim(_3I_classLit, makeCastMap([Q$Serializable]), -1, 128, 1);
  this._tilesVisibleByLevel = initDim(_3I_classLit, makeCastMap([Q$Serializable]), -1, 128, 1);
  this._tilesRenderedByLevel = initDim(_3I_classLit, makeCastMap([Q$Serializable]), -1, 128, 1);
  $clear_0(this);
}

function asLogString(m_0){
  var counter, first, i_0, isb, s;
  first = true;
  isb = new StringBuilder_WebGL_0;
  for (i_0 = 0; i_0 < 128; i_0++) {
    counter = m_0[i_0];
    if (counter != 0) {
      first?(first = false):(isb._string += ',' , isb);
      isb._string += i_0;
      isb._string += ':';
      isb._string += counter;
    }
  }
  s = isb._string;
  return s;
}

defineSeed(671, 1, {}, TilesStatistics_0);
_._tilesProcessed = 0;
_._tilesRendered = 0;
_._tilesVisible = 0;
_._visibleLowerLatitudeDegrees = 0;
_._visibleLowerLongitudeDegrees = 0;
_._visibleUpperLatitudeDegrees = 0;
_._visibleUpperLongitudeDegrees = 0;
function TimeInterval_0(milliseconds){
  this._milliseconds = milliseconds;
}

defineSeed(672, 1, makeCastMap([Q$TimeInterval]), TimeInterval_0);
_.equals$ = function equals_25(obj){
  var other;
  if (this === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (Lorg_glob3_mobile_generated_TimeInterval_2_classLit != getClass__devirtual$(obj)) {
    return false;
  }
  other = dynamicCast(obj, Q$TimeInterval);
  if (neq(this._milliseconds, other._milliseconds)) {
    return false;
  }
  return true;
}
;
_.hashCode$ = function hashCode_27(){
  var result;
  result = 31 + toInt(xor(this._milliseconds, shru(this._milliseconds, 32)));
  return result;
}
;
_._milliseconds = P0_longLit;
function TimedCacheTileLODTester_0(timeout, tileLODTester){
  DecoratorTileLODTester_0.call(this, tileLODTester);
  this._timeoutInMS = timeout._milliseconds;
}

defineSeed(673, 444, {}, TimedCacheTileLODTester_0);
_.meetsRenderCriteria = function meetsRenderCriteria_4(rc, prc, tile){
  var data_0, nowInMS;
  nowInMS = prc._nowInMS;
  data_0 = dynamicCast(1 >= tile._dataSize?null:tile._data[1], Q$TimedCacheTileLODTester$PvtData);
  if (!data_0) {
    data_0 = new TimedCacheTileLODTester$PvtData_0(nowInMS);
    $setData(tile, data_0);
    data_0._lastMeetsRenderCriteriaResult = this._tileLODTester.meetsRenderCriteria(rc, prc, tile);
  }
   else if (gt(sub_0(nowInMS, data_0._lastMeetsRenderCriteriaTimeInMS), this._timeoutInMS)) {
    data_0._lastMeetsRenderCriteriaTimeInMS = nowInMS;
    data_0._lastMeetsRenderCriteriaResult = this._tileLODTester.meetsRenderCriteria(rc, prc, tile);
  }
  return data_0._lastMeetsRenderCriteriaResult;
}
;
_._timeoutInMS = P0_longLit;
function TimedCacheTileLODTester$PvtData_0(now_0){
  TileData_0.call(this, 1);
  this._lastMeetsRenderCriteriaTimeInMS = now_0;
  this._lastMeetsRenderCriteriaResult = false;
}

defineSeed(674, 633, makeCastMap([Q$TileData, Q$TimedCacheTileLODTester$PvtData]), TimedCacheTileLODTester$PvtData_0);
_._lastMeetsRenderCriteriaResult = false;
_._lastMeetsRenderCriteriaTimeInMS = P0_longLit;
function $isVisible_0(this$static, rc, prc, tile){
  var data_0, nowInMS, result;
  nowInMS = prc._nowInMS;
  data_0 = dynamicCast(0 >= tile._dataSize?null:tile._data[0], Q$TimedCacheTileVisibilityTester$PvtData);
  if (!data_0) {
    result = $isVisible(rc, prc, tile);
    if (result) {
      data_0 = new TimedCacheTileVisibilityTester$PvtData_0(add_1(nowInMS, this$static._timeoutInMS));
      $setData(tile, data_0);
    }
  }
   else {
    if (gt(data_0._timeoutTimeInMS, nowInMS)) {
      result = true;
    }
     else {
      result = $isVisible(rc, prc, tile);
      result?(data_0._timeoutTimeInMS = add_1(nowInMS, this$static._timeoutInMS)):$setData(tile, data_0);
    }
  }
  return result;
}

function TimedCacheTileVisibilityTester_0(timeout, tileVisibilityTester){
  DecoratorTileVisibilityTester_0.call(this, tileVisibilityTester);
  this._timeoutInMS = timeout._milliseconds;
}

defineSeed(675, 446, {}, TimedCacheTileVisibilityTester_0);
_._timeoutInMS = P0_longLit;
function TimedCacheTileVisibilityTester$PvtData_0(timeoutTimeInMS){
  TileData_0.call(this, 0);
  this._timeoutTimeInMS = timeoutTimeInMS;
}

defineSeed(676, 633, makeCastMap([Q$TileData, Q$TimedCacheTileVisibilityTester$PvtData]), TimedCacheTileVisibilityTester$PvtData_0);
_._timeoutTimeInMS = P0_longLit;
function Touch_1(other){
  this._pos = other._pos;
  this._prevPos = other._prevPos;
  this._tapCount = other._tapCount;
}

function Touch_2(pos, prev){
  Touch_3.call(this, pos, prev, 0);
}

function Touch_3(pos, prev, tapCount){
  this._pos = pos;
  this._prevPos = prev;
  this._tapCount = tapCount;
}

defineSeed(677, 1, makeCastMap([Q$Touch]), Touch_1, Touch_2, Touch_3);
_._tapCount = 0;
function $dispose_18(this$static){
  var i_0;
  for (i_0 = 0; i_0 < this$static._touchs.size_0; i_0++) {
    $get_2(this$static._touchs, i_0) != null && (dynamicCast($get_2(this$static._touchs, i_0), Q$Touch) , undefined);
  }
}

function $getTapCount(this$static){
  if (this$static._touchs.size_0 == 0)
    return 0;
  return dynamicCast($get_2(this$static._touchs, 0), Q$Touch)._tapCount;
}

function TouchEvent_2(type_0, touchs){
  this._eventType = type_0;
  this._touchs = touchs;
}

function create_5(type_0, touch){
  var touchs;
  touchs = new ArrayList_2(new Arrays$ArrayList_0(initValues(_3Lorg_glob3_mobile_generated_Touch_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Touch, [touch])));
  return new TouchEvent_2(type_0, touchs);
}

defineSeed(678, 1, makeCastMap([Q$TouchEvent]), TouchEvent_2);
function $clinit_TouchEventType(){
  $clinit_TouchEventType = nullMethod;
  Down = new TouchEventType_0('Down', 0);
  Up = new TouchEventType_0('Up', 1);
  Move = new TouchEventType_0('Move', 2);
  LongPress = new TouchEventType_0('LongPress', 3);
  DownUp = new TouchEventType_0('DownUp', 4);
  $VALUES_13 = initValues(_3Lorg_glob3_mobile_generated_TouchEventType_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$TouchEventType, [Down, Up, Move, LongPress, DownUp]);
}

function TouchEventType_0(enum$name, enum$ordinal){
  Enum_0.call(this, enum$name, enum$ordinal);
}

function values_14(){
  $clinit_TouchEventType();
  return $VALUES_13;
}

defineSeed(679, 70, makeCastMap([Q$Serializable, Q$Comparable, Q$Enum, Q$TouchEventType]), TouchEventType_0);
var $VALUES_13, Down, DownUp, LongPress, Move, Up;
function URL_1(path){
  URL_2.call(this, path);
}

function URL_2(path){
  this._path = path;
}

defineSeed(680, 1, makeCastMap([Q$URL]), URL_1, URL_2);
_.equals$ = function equals_26(obj){
  var other;
  if (this === obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (Lorg_glob3_mobile_generated_URL_2_classLit != getClass__devirtual$(obj)) {
    return false;
  }
  other = dynamicCast(obj, Q$URL);
  if ($equals(this._path, other._path)) {
    return true;
  }
  return false;
}
;
_.hashCode$ = function hashCode_28(){
  return getHashCode_0(this._path);
}
;
_.toString$ = function toString_63(){
  var isb;
  return isb = new StringBuilder_WebGL_0 , isb._string += 'URL(' , $addString(isb, this._path) , isb._string += ')' , isb._string;
}
;
function Vector2D_0(x_0, y_0){
  this._x = x_0;
  this._y = y_0;
}

defineSeed(681, 1, {}, Vector2D_0);
_.toString$ = function toString_64(){
  var isb;
  return isb = new StringBuilder_WebGL_0 , isb._string += '(V2D ' , $addDouble(isb, this._x) , isb._string += ', ' , $addDouble(isb, this._y) , isb._string += ')' , isb._string;
}
;
_._x = 0;
_._y = 0;
function $add_20(this$static, v){
  return new Vector2F_0(this$static._x + v._x, this$static._y + v._y);
}

function $div_1(this$static){
  return new Vector2F_0(this$static._x / 3, this$static._y / 3);
}

function $length_0(this$static){
  return sqrt_0(this$static._x * this$static._x + this$static._y * this$static._y);
}

function $squaredDistanceTo(this$static, x_0, y_0){
  var dx, dy;
  dx = this$static._x - x_0;
  dy = this$static._y - y_0;
  return dx * dx + dy * dy;
}

function $sub_1(this$static, v){
  return new Vector2F_0(this$static._x - v._x, this$static._y - v._y);
}

function Vector2F_0(x_0, y_0){
  this._x = x_0;
  this._y = y_0;
}

defineSeed(682, 1, makeCastMap([Q$Vector2F]), Vector2F_0);
_._x = 0;
_._y = 0;
function $asMutableVector2I(this$static){
  return new MutableVector2I_1(this$static._x, this$static._y);
}

function $description_8(this$static){
  var isb, s;
  isb = new StringBuilder_WebGL_0;
  isb._string += '(V2I ';
  $addDouble(isb, this$static._x);
  isb._string += ', ';
  $addDouble(isb, this$static._y);
  isb._string += ')';
  s = isb._string;
  return s;
}

function Vector2I_0(x_0, y_0){
  this._x = x_0;
  this._y = y_0;
}

defineSeed(683, 1, {}, Vector2I_0);
_.toString$ = function toString_65(){
  return $description_8(this);
}
;
_._x = 0;
_._y = 0;
function $asVector2I(this$static){
  return new Vector2I_0(this$static._x, this$static._y);
}

function Vector2S_0(x_0, y_0){
  this._x = x_0;
  this._y = y_0;
}

defineSeed(684, 1, {}, Vector2S_0);
_._x = 0;
_._y = 0;
function $clinit_Vector3D(){
  $clinit_Vector3D = nullMethod;
  zero = new Vector3D_0(0, 0, 0);
}

function $add_21(this$static, v){
  return new Vector3D_0(this$static._x + v._x, this$static._y + v._y, this$static._z + v._z);
}

function $asMutableVector3D(this$static){
  return new MutableVector3D_1(this$static._x, this$static._y, this$static._z);
}

function $axisAverage(this$static){
  return (this$static._x + this$static._y + this$static._z) / 3;
}

function $cross_0(this$static, other){
  return new Vector3D_0(this$static._y * other._z - this$static._z * other._y, this$static._z * other._x - this$static._x * other._z, this$static._x * other._y - this$static._y * other._x);
}

function $dot_0(this$static, v){
  return this$static._x * v._x + this$static._y * v._y + this$static._z * v._z;
}

function $isNan_0(this$static){
  return this$static._x != this$static._x || this$static._y != this$static._y || this$static._z != this$static._z;
}

function $length_1(this$static){
  return sqrt_0(this$static._x * this$static._x + this$static._y * this$static._y + this$static._z * this$static._z);
}

function $maxAxis(this$static){
  return this$static._x >= this$static._y && this$static._x >= this$static._z?this$static._x:this$static._y >= this$static._z?this$static._y:this$static._z;
}

function $minAxis(this$static){
  return this$static._x <= this$static._y && this$static._x <= this$static._z?this$static._x:this$static._y <= this$static._z?this$static._y:this$static._z;
}

function $normalized_0(this$static){
  var d;
  if (this$static._x != this$static._x || this$static._y != this$static._y || this$static._z != this$static._z) {
    return new Vector3D_0(NaN, NaN, NaN);
  }
  if (this$static._x == 0 && this$static._y == 0 && this$static._z == 0) {
    return zero;
  }
  d = sqrt_0(this$static._x * this$static._x + this$static._y * this$static._y + this$static._z * this$static._z);
  return new Vector3D_0(this$static._x / d, this$static._y / d, this$static._z / d);
}

function $projectionInPlane(this$static, normal){
  var axis_0, m_0, projected;
  axis_0 = new Vector3D_0(normal._y * this$static._z - normal._z * this$static._y, normal._z * this$static._x - normal._x * this$static._z, normal._x * this$static._y - normal._y * this$static._x);
  m_0 = createRotationMatrix(new Angle_0(90, 1.5707963267948966), axis_0);
  projected = $normalized_0(new Vector3D_0(normal._x * m_0._m00 + normal._y * m_0._m01 + normal._z * m_0._m02, normal._x * m_0._m10 + normal._y * m_0._m11 + normal._z * m_0._m12, normal._x * m_0._m20 + normal._y * m_0._m21 + normal._z * m_0._m22));
  return $times_2(projected, sqrt_0(this$static._x * this$static._x + this$static._y * this$static._y + this$static._z * this$static._z));
}

function $rotateAroundAxis_0(this$static, axis_0, theta){
  var cosTheta, m_0, ms, sinTheta, u, v, w;
  u = axis_0._x;
  v = axis_0._y;
  w = axis_0._z;
  cosTheta = cos_0(theta._radians);
  sinTheta = sin_0(theta._radians);
  ms = axis_0._x * axis_0._x + axis_0._y * axis_0._y + axis_0._z * axis_0._z;
  m_0 = sqrt_0(ms);
  return new Vector3D_0((u * (u * this$static._x + v * this$static._y + w * this$static._z) + (this$static._x * (v * v + w * w) - u * (v * this$static._y + w * this$static._z)) * cosTheta + m_0 * (-w * this$static._y + v * this$static._z) * sinTheta) / ms, (v * (u * this$static._x + v * this$static._y + w * this$static._z) + (this$static._y * (u * u + w * w) - v * (u * this$static._x + w * this$static._z)) * cosTheta + m_0 * (w * this$static._x - u * this$static._z) * sinTheta) / ms, (w * (u * this$static._x + v * this$static._y + w * this$static._z) + (this$static._z * (u * u + v * v) - w * (u * this$static._x + v * this$static._y)) * cosTheta + m_0 * (-(v * this$static._x) + u * this$static._y) * sinTheta) / ms);
}

function $signedAngleBetween(this$static, other, up){
  var angle;
  angle = fromRadians(angleInRadiansBetween_0(this$static, other));
  if ($dot_0(new Vector3D_0(this$static._y * other._z - this$static._z * other._y, this$static._z * other._x - this$static._x * other._z, this$static._x * other._y - this$static._y * other._x), up) > 0) {
    return angle;
  }
  return $times(angle, -1);
}

function $squaredDistanceTo_0(this$static, that){
  var dx, dy, dz;
  dx = this$static._x - that._x;
  dy = this$static._y - that._y;
  dz = this$static._z - that._z;
  return dx * dx + dy * dy + dz * dz;
}

function $sub_2(this$static, v){
  return new Vector3D_0(this$static._x - v._x, this$static._y - v._y, this$static._z - v._z);
}

function $times_2(this$static, magnitude){
  return new Vector3D_0(this$static._x * magnitude, this$static._y * magnitude, this$static._z * magnitude);
}

function $times_3(this$static, v){
  return new Vector3D_0(this$static._x * v._x, this$static._y * v._y, this$static._z * v._z);
}

function $transformedBy_0(this$static, m_0){
  return new Vector3D_0(this$static._x * m_0._m00 + this$static._y * m_0._m01 + this$static._z * m_0._m02 + m_0._m03, this$static._x * m_0._m10 + this$static._y * m_0._m11 + this$static._z * m_0._m12 + m_0._m13, this$static._x * m_0._m20 + this$static._y * m_0._m21 + this$static._z * m_0._m22 + m_0._m23);
}

function Vector3D_0(x_0, y_0, z_0){
  $clinit_Vector3D();
  this._x = x_0;
  this._y = y_0;
  this._z = z_0;
}

function Vector3D_1(v){
  $clinit_Vector3D();
  this._x = v._x;
  this._y = v._y;
  this._z = v._z;
}

function angleInRadiansBetween_0(a, b){
  var aLength, a_x, a_y, a_z, bLength, b_x, b_y, b_z;
  $clinit_Vector3D();
  var c;
  c = (aLength = sqrt_0(a._x * a._x + a._y * a._y + a._z * a._z) , a_x = a._x / aLength , a_y = a._y / aLength , a_z = a._z / aLength , bLength = sqrt_0(b._x * b._x + b._y * b._y + b._z * b._z) , b_x = b._x / bLength , b_y = b._y / bLength , b_z = b._z / bLength , a_x * b_x + a_y * b_y + a_z * b_z);
  c > 1?(c = 1):c < -1 && (c = -1);
  return acos_0(c);
}

defineSeed(685, 1, {}, Vector3D_0, Vector3D_1);
_.toString$ = function toString_66(){
  var isb;
  return isb = new StringBuilder_WebGL_0 , isb._string += '(V3D ' , $addDouble(isb, this._x) , isb._string += ', ' , $addDouble(isb, this._y) , isb._string += ', ' , $addDouble(isb, this._z) , isb._string += ')' , isb._string;
}
;
_._x = 0;
_._y = 0;
_._z = 0;
var zero;
function $normalized_1(this$static){
  var d;
  d = sqrt_0(this$static._x * this$static._x + this$static._y * this$static._y + this$static._z * this$static._z);
  return new Vector3F_0(this$static._x / d, this$static._y / d, this$static._z / d);
}

function Vector3F_0(x_0, y_0, z_0){
  this._x = x_0;
  this._y = y_0;
  this._z = z_0;
}

defineSeed(686, 1, makeCastMap([Q$Vector3F]), Vector3F_0);
_._x = 0;
_._y = 0;
_._z = 0;
function VertexNormalGLFeature_0(buffer){
  GLFeature_0.call(this, ($clinit_GLFeatureGroupName() , LIGHTING_GROUP), 12);
  $addAttributeValue(this._values, ($clinit_GPUAttributeKey() , NORMAL), new GPUAttributeValueVec3Float_0(buffer));
}

defineSeed(687, 419, makeCastMap([Q$GLFeature, Q$RCObject]), VertexNormalGLFeature_0);
_.applyOnGlobalGLState = function applyOnGlobalGLState_5(state){
}
;
_.dispose = function dispose_77(){
  !!this._values && $dispose_6(this._values);
  $dispose_1(this);
}
;
function $tryToNotifyListener(this$static, visibleSector, rc){
  var now_0;
  if (eq(this$static._stabilizationIntervalInMS, P0_longLit)) {
    if (!this$static._lastSector || !$isEquals_3(this$static._lastSector, visibleSector)) {
      !!this$static._lastSector && !!this$static._lastSector._normalizedCartesianCenter && undefined;
      this$static._lastSector = new Sector_1(visibleSector);
      null.nullMethod($getGeodeticPosition(rc._currentCamera));
    }
  }
   else {
    now_0 = (!this$static._timer && (this$static._timer = new Timer_WebGL_0) , fromDouble(currentTimeMillis0()));
    if (!this$static._lastSector || !$isEquals_3(this$static._lastSector, visibleSector)) {
      !!this$static._lastSector && !!this$static._lastSector._normalizedCartesianCenter && undefined;
      this$static._lastSector = new Sector_1(visibleSector);
      this$static._whenNotifyInMS = add_1(now_0, this$static._stabilizationIntervalInMS);
    }
    if (neq(this$static._whenNotifyInMS, P0_longLit)) {
      if (gte_0(now_0, this$static._whenNotifyInMS)) {
        null.nullMethod($getGeodeticPosition(rc._currentCamera));
        this$static._whenNotifyInMS = P0_longLit;
      }
    }
  }
}

function VisibleSectorListenerEntry_0(stabilizationInterval){
  this._stabilizationIntervalInMS = stabilizationInterval._milliseconds;
  this._lastSector = null;
  this._timer = null;
  this._whenNotifyInMS = P0_longLit;
}

defineSeed(688, 1, makeCastMap([Q$VisibleSectorListenerEntry]), VisibleSectorListenerEntry_0);
_._stabilizationIntervalInMS = P0_longLit;
_._whenNotifyInMS = P0_longLit;
function $get_7(this$static, i_0){
  return this$static._buffer[i_0];
}

function $getAsString_0(this$static){
  var result = '';
  var buffer = this$static._buffer;
  for (var i_0 = 0; i_0 < buffer.byteLength; i_0++) {
    result += String.fromCharCode(buffer[i_0]);
  }
  return result;
}

function $rawPut(this$static, i_0, value_0){
  this$static._buffer[i_0] = value_0;
}

function ByteBuffer_WebGL_0(size_0){
  this._buffer = new Int8Array(size_0);
}

function ByteBuffer_WebGL_1(data_0){
  this._buffer = new Int8Array(data_0);
}

defineSeed(689, 550, {}, ByteBuffer_WebGL_0, ByteBuffer_WebGL_1);
function $_createImage(this$static, listener, autodelete){
  var jsImage = new Image;
  jsImage.onload = function(){
    var result = new Image_WebGL_0(jsImage);
    listener.imageCreated(result);
    autodelete && listener.dispose();
  }
  ;
  jsImage.src = this$static._domCanvas.toDataURL();
}

function $_drawImage(this$static, image, left, top_0, width_0, height, transparency){
  var context = this$static._domCanvasContext;
  var imageJS = image.getImage();
  context.globalAlpha = transparency;
  context.drawImage(imageJS, left, top_0, width_0, height);
  context.globalAlpha = 1;
}

function $_fillRectangle(this$static, left, top_0, width_0, height){
  var context = this$static._domCanvasContext;
  context.fillRect(left, top_0, width_0, height);
}

function $roundRect(this$static, x_0, y_0, width_0, height, radius, fill, stroke){
  var context = this$static._domCanvasContext;
  context.beginPath();
  context.moveTo(x_0 + radius, y_0);
  context.lineTo(x_0 + width_0 - radius, y_0);
  context.quadraticCurveTo(x_0 + width_0, y_0, x_0 + width_0, y_0 + radius);
  context.lineTo(x_0 + width_0, y_0 + height - radius);
  context.quadraticCurveTo(x_0 + width_0, y_0 + height, x_0 + width_0 - radius, y_0 + height);
  context.lineTo(x_0 + radius, y_0 + height);
  context.quadraticCurveTo(x_0, y_0 + height, x_0, y_0 + height - radius);
  context.lineTo(x_0, y_0 + radius);
  context.quadraticCurveTo(x_0, y_0, x_0 + radius, y_0);
  context.closePath();
  fill && context.fill();
  stroke && context.stroke();
}

function $tryToSetCurrentFontToContext(this$static){
  var currentDOMFont = this$static._currentDOMFont;
  currentDOMFont && (this$static._domCanvasContext.font = currentDOMFont);
}

function Canvas_WebGL_0(){
  var canvas, context;
  this._canvasWidth = -1;
  this._canvasHeight = -1;
  this._currentFont = null;
  canvas = $doc.createElement('canvas');
  context = canvas.getContext('2d');
  this._domCanvas = canvas;
  this._domCanvasContext = context;
}

function createDOMColor(color_0){
  var a, b, g, r;
  if (!color_0) {
    return null;
  }
  r = round_0(255 * color_0._red);
  g = round_0(255 * color_0._green);
  b = round_0(255 * color_0._blue);
  a = color_0._alpha;
  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';
}

defineSeed(690, 551, {}, Canvas_WebGL_0);
_.tryToSetCurrentFontToContext = function tryToSetCurrentFontToContext(){
  $tryToSetCurrentFontToContext(this);
}
;
_._currentFontSize = 0;
function $initInterfaceOrientation(devAtt){
  try {
    if ($wnd.screen.orientation !== undefined) {
      console.log('IO CHROME');
      devAtt.storeInterfaceOrientation($wnd.screen.orientation.type);
    }
     else {
      if ($wnd.screen.mozOrientation !== undefined) {
        console.log('IO MOZ');
        devAtt.storeInterfaceOrientation($wnd.screen.mozOrientation);
      }
    }
  }
   catch (err) {
    console.error('Unable to track Interface Orientation. ' + err);
  }
}

function $trackInterfaceOrientation(devAtt){
  try {
    if ($wnd.screen.orientation !== undefined) {
      console.log('IO CHROME');
      $wnd.screen.orientation.onchange = function(){
        devAtt.storeInterfaceOrientation($wnd.screen.orientation.type);
      }
      ;
    }
     else {
      if ($wnd.screen.mozOrientation !== undefined) {
        console.log('IO MOZ');
        $wnd.screen.onmozorientationchange = function(event_0){
          event_0.preventDefault();
          devAtt.storeInterfaceOrientation($wnd.screen.orientation.type);
        }
        ;
      }
    }
  }
   catch (err) {
    console.error('Unable to track Interface Orientation. ' + err);
  }
}

function DeviceAttitude_WebGL_0(){
  $trackInterfaceOrientation(this);
  $initInterfaceOrientation(this);
}

defineSeed(691, 553, {}, DeviceAttitude_WebGL_0);
_.storeInterfaceOrientation = function storeInterfaceOrientation(orientation){
  $equalsIgnoreCase(orientation, 'portrait-primary')?(this._currentIO = ($clinit_InterfaceOrientation() , PORTRAIT)):$equalsIgnoreCase(orientation, 'portrait-secondary')?(this._currentIO = ($clinit_InterfaceOrientation() , PORTRAIT_UPSIDEDOWN)):$equalsIgnoreCase(orientation, 'landscape-primary')?(this._currentIO = ($clinit_InterfaceOrientation() , LANDSCAPE_RIGHT)):$equalsIgnoreCase(orientation, 'landscape-secondary') && (this._currentIO = ($clinit_InterfaceOrientation() , LANDSCAPE_LEFT));
  $logInfo(_instance_3, 'SIO ' + orientation + ' -> ' + this._currentIO.name_0, initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
}
;
_._currentIO = null;
function DeviceInfo_WebGL_0(){
}

defineSeed(692, 554, {}, DeviceInfo_WebGL_0);
function DeviceLocation_WebGL_0(){
}

defineSeed(693, 555, {}, DeviceLocation_WebGL_0);
function $cancelRequest_1(this$static, requestId){
  var e, found, handler, iter;
  if (lt(requestId, P0_longLit)) {
    return;
  }
  this$static._cancelsCounter = add_1(this$static._cancelsCounter, P1_longLit);
  found = false;
  iter = new AbstractHashMap$EntrySetIterator_0((new AbstractHashMap$EntrySet_0(this$static._queuedHandlers)).this$0);
  while ($hasNext(iter.iter) && !found) {
    e = iter.last = dynamicCast($next_2(iter.iter), Q$Map$Entry);
    handler = dynamicCast(e.getValue(), Q$Downloader_WebGL_Handler);
    if (handler.removeListenerForRequestId(requestId)) {
      handler.hasListener() || $remove_5(iter);
      found = true;
    }
  }
  if (!found) {
    iter = new AbstractHashMap$EntrySetIterator_0((new AbstractHashMap$EntrySet_0(this$static._downloadingHandlers)).this$0);
    while ($hasNext(iter.iter) && !found) {
      e = iter.last = dynamicCast($next_2(iter.iter), Q$Map$Entry);
      handler = dynamicCast(e.getValue(), Q$Downloader_WebGL_Handler);
      handler.cancelListenerForRequestId(requestId) && (found = true);
    }
  }
}

function $getHandlerToRun(this$static){
  var e, handler, it, priority, selectedHandler, selectedPriority, selectedURL, url_0;
  selectedPriority = N5f5e100_longLit;
  selectedHandler = null;
  selectedURL = null;
  it = new AbstractHashMap$EntrySetIterator_0((new AbstractHashMap$EntrySet_0(this$static._queuedHandlers)).this$0);
  while ($hasNext(it.iter)) {
    e = it.last = dynamicCast($next_2(it.iter), Q$Map$Entry);
    url_0 = dynamicCast(e.getKey(), Q$URL);
    handler = dynamicCast(e.getValue(), Q$Downloader_WebGL_Handler);
    priority = handler.getPriority();
    if (gt(priority, selectedPriority)) {
      selectedPriority = priority;
      selectedHandler = handler;
      selectedURL = url_0;
    }
  }
  if (selectedHandler) {
    $remove_4(this$static._queuedHandlers, selectedURL);
    $put(this$static._downloadingHandlers, selectedURL, selectedHandler);
  }
  return selectedHandler;
}

function $getProxiedURL(this$static, url_0){
  var urlPath;
  if (this$static._proxy == null) {
    return url_0;
  }
  urlPath = url_0._path;
  if (urlPath.indexOf('http://') != 0 && urlPath.indexOf('https://') != 0) {
    return url_0;
  }
  return new URL_1(this$static._proxy + urlPath);
}

function $removeDownloadingHandlerForUrl(this$static, url_0){
  $remove_4(this$static._downloadingHandlers, url_0);
}

function $requestBuffer(this$static, url_0, priority, listener){
  var $tmp, handler, proxyUrl, requestId;
  proxyUrl = $getProxiedURL(this$static, url_0);
  this$static._requestsCounter = add_1(this$static._requestsCounter, P1_longLit);
  requestId = ($tmp = this$static._requestIdCounter , this$static._requestIdCounter = add_1(this$static._requestIdCounter, P1_longLit) , $tmp);
  handler = dynamicCast($get_1(this$static._downloadingHandlers, proxyUrl), Q$Downloader_WebGL_Handler);
  if (!!handler && !handler.isRequestingImage()) {
    handler.addListener(listener, true, priority, requestId);
  }
   else {
    handler = dynamicCast($get_1(this$static._queuedHandlers, proxyUrl), Q$Downloader_WebGL_Handler);
    if (!!handler && !handler.isRequestingImage()) {
      handler.addListener(listener, true, priority, requestId);
    }
     else {
      handler = org_glob3_mobile_specific_Downloader_1WebGL_1Handler();
      handler.init_0(proxyUrl, listener, true, priority, requestId);
      $put(this$static._queuedHandlers, proxyUrl, handler);
    }
  }
  return requestId;
}

function $requestImage_0(this$static, url_0, priority, listener){
  var $tmp, handler, proxyUrl, requestId;
  proxyUrl = $getProxiedURL(this$static, url_0);
  this$static._requestsCounter = add_1(this$static._requestsCounter, P1_longLit);
  requestId = ($tmp = this$static._requestIdCounter , this$static._requestIdCounter = add_1(this$static._requestIdCounter, P1_longLit) , $tmp);
  handler = dynamicCast($get_1(this$static._downloadingHandlers, proxyUrl), Q$Downloader_WebGL_Handler);
  if (!!handler && handler.isRequestingImage()) {
    handler.addListener_0(listener, true, priority, requestId);
  }
   else {
    handler = dynamicCast($get_1(this$static._queuedHandlers, proxyUrl), Q$Downloader_WebGL_Handler);
    if (!!handler && handler.isRequestingImage()) {
      handler.addListener_0(listener, true, priority, requestId);
    }
     else {
      handler = org_glob3_mobile_specific_Downloader_1WebGL_1Handler();
      handler.init_1(proxyUrl, listener, true, priority, requestId);
      $put(this$static._queuedHandlers, proxyUrl, handler);
    }
  }
  return requestId;
}

function $sendRequest_0(this$static){
  $schedule(this$static._timer, this$static._delayMillis);
}

function $start_0(this$static){
  $schedule(this$static._timer, this$static._delayMillis);
}

function $statistics(this$static){
  var sb;
  sb = new StringBuilder_WebGL_0;
  sb._string += 'Downloader_WebGL(downloading=';
  $addInt(sb, this$static._downloadingHandlers.size_0);
  sb._string += ', queued=';
  $addInt(sb, this$static._queuedHandlers.size_0);
  sb._string += ', totalRequests=';
  $addLong(sb, this$static._requestsCounter);
  sb._string += ', totalCancels=';
  $addLong(sb, this$static._cancelsCounter);
  return sb._string;
}

function Downloader_WebGL_0(){
  var thisDownloader, s, i_0;
  this._maxConcurrentOperationCount = 8;
  this._requestIdCounter = P1_longLit;
  this._requestsCounter = P0_longLit;
  this._cancelsCounter = P0_longLit;
  this._downloadingHandlers = new HashMap_0;
  this._queuedHandlers = new HashMap_0;
  this._delayMillis = 10;
  this._proxy = (s = $doc.location.href , i_0 = s.indexOf('#') , i_0 != -1 && (s = s.substring(0, i_0)) , i_0 = s.indexOf('?') , i_0 != -1 && (s = s.substring(0, i_0)) , i_0 = s.lastIndexOf('/') , i_0 != -1 && (s = s.substring(0, i_0)) , s.length > 0?s + '/':'') + 'proxy?url=';
  thisDownloader = this;
  this._timer = new Downloader_WebGL$1_0(this, thisDownloader);
}

defineSeed(694, 556, {}, Downloader_WebGL_0);
_._cancelsCounter = P0_longLit;
_._delayMillis = 0;
_._maxConcurrentOperationCount = 0;
_._requestIdCounter = P0_longLit;
_._requestsCounter = P0_longLit;
function Downloader_WebGL$1_0(this$0, val$thisDownloader){
  this.this$0 = this$0;
  this.val$thisDownloader = val$thisDownloader;
  Timer_0.call(this);
}

defineSeed(695, 12, {}, Downloader_WebGL$1_0);
_.run = function run_3(){
  var handler;
  if (this.this$0._downloadingHandlers.size_0 < this.this$0._maxConcurrentOperationCount) {
    handler = $getHandlerToRun(this.this$0);
    !!handler && handler.runWithDownloader(this.val$thisDownloader);
  }
  $sendRequest_0(this.this$0);
}
;
function $log_4(msg){
  if (_instance_3) {
    switch (3) {
      case 1:
      case 2:
      case 3:
        $logError(_instance_3, 'Downloader_WebGL_HandlerImpl' + msg, initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    }
  }
}

function Downloader_WebGL_Handler_DefaultImpl_0(){
}

defineSeed(696, 1, makeCastMap([Q$Downloader_WebGL_Handler]), Downloader_WebGL_Handler_DefaultImpl_0);
_.addListener = function addListener(listener, deleteListener, priority, requestId){
  var entry;
  entry = new ListenerEntry_0(listener, null, deleteListener, requestId);
  $add_5(this._listeners, entry);
  gt(priority, this._priority) && (this._priority = priority);
}
;
_.addListener_0 = function addListener_0(listener, deleteListener, priority, requestId){
  var entry;
  entry = new ListenerEntry_0(null, listener, deleteListener, requestId);
  $add_5(this._listeners, entry);
  gt(priority, this._priority) && (this._priority = priority);
}
;
_.cancelListenerForRequestId = function cancelListenerForRequestId(requestId){
  var canceled, entry, iter;
  canceled = false;
  iter = new AbstractList$IteratorImpl_0(this._listeners);
  while (iter.i < iter.this$0_0.size_1() && !canceled) {
    entry = dynamicCast($next_2(iter), Q$ListenerEntry);
    if (eq(entry._requestId, requestId)) {
      entry._canceled && $log_5(3, ': Listener for requestId=' + toString_16(entry._requestId) + ' already canceled');
      entry._canceled = true;
      canceled = true;
    }
  }
  return canceled;
}
;
_.getPriority = function getPriority(){
  return this._priority;
}
;
_.hasListener = function hasListener(){
  return this._listeners.size_0 != 0;
}
;
_.init_0 = function init_15(url_0, bufferListener, deleteListener, priority, requestId){
  var entry;
  this._priority = priority;
  this._url = url_0;
  this._listeners = new ArrayList_0;
  entry = new ListenerEntry_0(bufferListener, null, deleteListener, requestId);
  $add_5(this._listeners, entry);
  this._requestingImage = false;
}
;
_.init_1 = function init_16(url_0, imageListener, deleteListener, priority, requestId){
  var entry;
  this._priority = priority;
  this._url = url_0;
  this._listeners = new ArrayList_0;
  entry = new ListenerEntry_0(null, imageListener, deleteListener, requestId);
  $add_5(this._listeners, entry);
  this._requestingImage = true;
}
;
_.isRequestingImage = function isRequestingImage(){
  return this._requestingImage;
}
;
_.jsCreateImageFromBlob = function jsCreateImageFromBlob(xhrStatus, blob){
  var that = this;
  var auxImg = new Image;
  var imgURL = $wnd.g3mURL.createObjectURL(blob);
  auxImg.onload = function(){
    that.processResponse(xhrStatus, auxImg);
    $wnd.g3mURL.revokeObjectURL(imgURL);
  }
  ;
  auxImg.onerror = function(){
    that.processResponse(xhrStatus, null);
    $wnd.g3mURL.revokeObjectURL(imgURL);
  }
  ;
  auxImg.onabort = function(){
    that.processResponse(xhrStatus, null);
    $wnd.g3mURL.revokeObjectURL(imgURL);
  }
  ;
  auxImg.src = imgURL;
}
;
_.jsRequest = function jsRequest(url_0){
  var that = this;
  var xhr = new XMLHttpRequest;
  xhr.open('GET', url_0, true);
  xhr.responseType = that._requestingImage?'blob':'arraybuffer';
  xhr.onload = function(){
    if (xhr.readyState == 4) {
      that.removeFromDownloaderDownloadingHandlers();
      if (xhr.status === 200) {
        that._requestingImage?that.jsCreateImageFromBlob(xhr.status, xhr.response):that.processResponse(xhr.status, xhr.response);
      }
       else {
        console.log('Error Retrieving Data!');
        that.processResponse(xhr.status, null);
      }
    }
  }
  ;
  xhr.send();
}
;
_.processResponse = function processResponse(statusCode, data_0){
  var dataIsValid, entry, entry$iterator;
  dataIsValid = !!data_0 && statusCode == 200;
  if (dataIsValid) {
    for (entry$iterator = new AbstractList$IteratorImpl_0(this._listeners); entry$iterator.i < entry$iterator.this$0_0.size_1();) {
      entry = dynamicCast($next_2(entry$iterator), Q$ListenerEntry);
      if (entry._canceled) {
        $onCanceledDownload(entry, this._url, data_0);
        $onCancel_1(entry, this._url);
      }
       else {
        $onDownload_0(entry, this._url, data_0);
      }
    }
  }
   else {
    $log_4(': Error runWithDownloader: statusCode=' + statusCode + ', data=' + data_0 + ', url=' + this._url._path);
    for (entry$iterator = new AbstractList$IteratorImpl_0(this._listeners); entry$iterator.i < entry$iterator.this$0_0.size_1();) {
      entry = dynamicCast($next_2(entry$iterator), Q$ListenerEntry);
      $onError_1(entry, this._url);
    }
  }
}
;
_.removeFromDownloaderDownloadingHandlers = function removeFromDownloaderDownloadingHandlers(){
  $removeDownloadingHandlerForUrl(this._dl, this._url);
}
;
_.removeListenerForRequestId = function removeListenerForRequestId(requestId){
  var entry, iter, removed;
  removed = false;
  iter = new AbstractList$IteratorImpl_0(this._listeners);
  while (iter.i < iter.this$0_0.size_1()) {
    entry = dynamicCast($next_2(iter), Q$ListenerEntry);
    if (eq(entry._requestId, requestId)) {
      $onCancel_1(entry, this._url);
      $remove_6(iter);
      removed = true;
      break;
    }
  }
  return removed;
}
;
_.runWithDownloader = function runWithDownloader(downloader){
  this._dl = downloader;
  this.jsRequest(this._url._path);
}
;
_._priority = P0_longLit;
_._requestingImage = false;
function $clinit_Downloader_WebGL_Handler_WebkitImpl(){
  $clinit_Downloader_WebGL_Handler_WebkitImpl = nullMethod;
  _isChrome = $wnd.navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
}

function Downloader_WebGL_Handler_WebkitImpl_0(){
  $clinit_Downloader_WebGL_Handler_WebkitImpl();
}

defineSeed(697, 696, makeCastMap([Q$Downloader_WebGL_Handler]), Downloader_WebGL_Handler_WebkitImpl_0);
_.jsRequest = function jsRequest_0(url_0){
  var that = this;
  var xhr = new XMLHttpRequest;
  xhr.open('GET', url_0, true);
  xhr.responseType = 'arraybuffer';
  xhr.onload = function(){
    if (xhr.readyState == 4) {
      that.removeFromDownloaderDownloadingHandlers();
      var response = null;
      if (xhr.status === 200) {
        if (that._requestingImage) {
          if (_isChrome) {
            var dataView = new DataView(xhr.response);
            response = new Blob([dataView], {type:'image/png'});
          }
           else {
            response = new Blob([xhr.response]);
          }
          that.jsCreateImageFromBlob(xhr.status, response);
        }
         else {
          response = xhr.response;
          that.processResponse(xhr.status, response);
        }
      }
       else {
        console.log('Error Retrieving Data!');
        that.processResponse(xhr.status, response);
      }
    }
  }
  ;
  xhr.send();
}
;
var _isChrome = false;
function Factory_WebGL_0(){
  this._deviceInfo = null;
  new HashMap_0;
}

defineSeed(698, 557, {}, Factory_WebGL_0);
function $$init_2(this$static){
  var $tmp;
  this$static._id = ($tmp = _nextID , _nextID = add_1(_nextID, P1_longLit) , $tmp);
}

function $dispose_19(this$static){
  if (this$static._webGLBuffer) {
    this$static._gl.deleteBuffer(this$static._webGLBuffer);
    this$static._webGLBuffer = null;
    this$static._gl = null;
  }
}

function $get_8(this$static, i_0){
  return this$static._buffer[i_0];
}

function $put_1(this$static, i_0, value_0){
  if (this$static._buffer[i_0] != value_0) {
    this$static._buffer[i_0] = value_0;
    this$static.incTimestamp();
  }
}

function FloatBuffer_WebGL_0(f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15){
  var buffer;
  $$init_2(this);
  this._buffer = (buffer = new Float32Array(16) , buffer[0] = f0 , buffer[1] = f1 , buffer[2] = f2 , buffer[3] = f3 , buffer[4] = f4 , buffer[5] = f5 , buffer[6] = f6 , buffer[7] = f7 , buffer[8] = f8 , buffer[9] = f9 , buffer[10] = f10 , buffer[11] = f11 , buffer[12] = f12 , buffer[13] = f13 , buffer[14] = f14 , buffer[15] = f15 , buffer);
}

function FloatBuffer_WebGL_1(size_0){
  $$init_2(this);
  this._buffer = new Float32Array(size_0);
}

function FloatBuffer_WebGL_2(array, length_0){
  var i_0;
  $$init_2(this);
  this._buffer = new Float32Array(length_0);
  for (i_0 = 0; i_0 < length_0; i_0++) {
    this._buffer[i_0] = array[i_0];
  }
}

defineSeed(699, 558, {}, FloatBuffer_WebGL_0, FloatBuffer_WebGL_1, FloatBuffer_WebGL_2);
_.bindVBO = function bindVBO(gl){
  var buffer, buffer_0;
  if (!this._webGLBuffer) {
    this._gl = gl;
    this._webGLBuffer = this._gl.createBuffer();
  }
  buffer = this._webGLBuffer;
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  if (this._bufferTimeStamp != this._timestamp) {
    this._bufferTimeStamp = this._timestamp;
    buffer_0 = this._buffer;
    gl.bufferData(gl.ARRAY_BUFFER, buffer_0, gl.STATIC_DRAW);
  }
  return this._webGLBuffer;
}
;
_.getBuffer = function getBuffer(){
  return this._buffer;
}
;
_.incTimestamp = function incTimestamp(){
  ++this._timestamp;
}
;
_._bufferTimeStamp = -1;
_._gl = null;
_._id = P0_longLit;
_._timestamp = 0;
_._webGLBuffer = null;
var _nextID = P0_longLit;
function $createWidget(this$static){
  var i_0, shaders;
  if ($isWebGLSupported(this$static._nativeWidget)) {
    shaders = new BasicShadersGL2_0;
    for (i_0 = 0; i_0 < shaders._sources.size_0; i_0++) {
      $addGPUProgramSources(this$static, dynamicCast($get_2(shaders._sources, i_0), Q$GPUProgramSources));
    }
    $setGL(this$static, this$static._nativeWidget._gl);
    $setG3MWidget(this$static._nativeWidget, $create_2(this$static));
    $startWidget(this$static._nativeWidget);
  }
  return this$static._nativeWidget;
}

function G3MBuilder_WebGL_0(){
  G3MBuilder_WebGL_1.call(this, new G3MWidget_WebGL_0);
}

function G3MBuilder_WebGL_1(widget){
  this._sources = new ArrayList_0;
  this._gl = null;
  this._downloader = null;
  this._threadUtils = null;
  this._planet = null;
  this._cameraConstraints = null;
  this._cameraRenderer = null;
  this._backgroundColor = null;
  this._planetRendererBuilder = null;
  this._busyRenderer = null;
  this._errorRenderer = null;
  this._renderers = null;
  this._periodicalTasks = null;
  this._logFPS = false;
  this._logDownloaderStatistics = false;
  this._sceneLighting = null;
  this._nativeWidget = widget;
}

defineSeed(700, 559, {}, G3MBuilder_WebGL_0);
function $exportJSFunctions(this$static){
  var that = this$static;
  !$wnd.G3M && ($wnd.G3M = {});
  $wnd.G3M.takeScreenshotAsImage = $entry(function(){
    return that.takeScreenshotAsImage_0();
  }
  );
  $wnd.G3M.takeScreenshotAsBase64 = $entry(function(){
    return that.takeScreenshotAsBase64_0();
  }
  );
  $wnd.G3M.getCameraData = $entry(function(){
    return that.getCameraData_0();
  }
  );
  $wnd.G3M.newGeodetic3D = $entry(function(latitude, longitude, height){
    return that.newGeodetic3D_0(latitude, longitude, height);
  }
  );
  $wnd.G3M.moveCameraTo = $entry(function(position){
    that.moveCameraTo_0(position);
  }
  );
}

function $isWebGLSupported(this$static){
  return !!this$static._canvas && !!this$static._webGLContext;
}

function $jsAddResizeHandler(this$static, jsCanvas){
  var that = this$static;
  $wnd.g3mWidgetResize = function(){
    (jsCanvas.clientWidth != jsCanvas.parentNode.clientWidth || jsCanvas.clientHeight != jsCanvas.parentNode.clientHeight) && that.onSizeChanged(jsCanvas.parentNode.clientWidth, jsCanvas.parentNode.clientHeight);
  }
  ;
  $wnd.g3mWidgetResizeChecker = setInterval($wnd.g3mWidgetResize, 200);
}

function $jsDefineG3MBrowserObjects(this$static){
  var that = this$static;
  $wnd.g3mURL = $wnd.URL || $wnd.webkitURL;
  $wnd.requestAnimFrame = function(){
    return $wnd.requestAnimationFrame || $wnd.webkitRequestAnimationFrame || $wnd.mozRequestAnimationFrame || $wnd.oRequestAnimationFrame || $wnd.msRequestAnimationFrame || function(callback, element){
      return $wnd.setTimeout(callback, 1000 / 60);
    }
    ;
  }
  ();
  $wnd.cancelAnimFrame = function(){
    return $wnd.cancelAnimationFrame || $wnd.webkitCancelAnimationFrame || $wnd.mozCancelAnimationFrame || $wnd.oCancelAnimationFrame || $wnd.msCancelAnimationFrame || $wnd.clearTimeout;
  }
  ();
  $wnd.g3mTick = function(){
    $wnd.requestAnimFrame($wnd.g3mTick);
    that.renderG3MWidget();
  }
  ;
}

function $jsGetWebGLContext(jsCanvas){
  var context = null;
  var contextNames = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];
  if (jsCanvas != null) {
    for (var cn in contextNames) {
      try {
        context = jsCanvas.getContext(contextNames[cn], {preserveDrawingBuffer:true, alpha:false});
        context.viewportWidth = jsCanvas.width;
        context.viewportHeight = jsCanvas.height;
      }
       catch (e) {
      }
      if (context) {
        jsCanvas.addEventListener('webglcontextlost', function(event_0){
          event_0.preventDefault();
          $wnd.alert('webglcontextlost');
        }
        , false);
        break;
      }
    }
    context == null && alert('No WebGL context available');
  }
   else {
    alert('No canvas available');
  }
  return context;
}

function $jsOnResizeViewport(this$static, width_0, height){
  var webGLContext = this$static._webGLContext;
  webGLContext.viewport(0, 0, width_0, height);
  webGLContext.clear(webGLContext.COLOR_BUFFER_BIT | webGLContext.DEPTH_BUFFER_BIT);
}

function $onSizeChanged(this$static, w, h_0){
  if (this$static._width != w || this$static._height != h_0) {
    this$static._width = w;
    this$static._height = h_0;
    $setPixelSize(this$static, this$static._width, this$static._height);
    $setCoordinateSpaceWidth(this$static._canvas, this$static._width);
    $setCoordinateSpaceHeight(this$static._canvas, this$static._height);
    if (this$static._g3mWidget) {
      $onResizeViewportEvent_0(this$static._g3mWidget, this$static._width, this$static._height);
      $jsOnResizeViewport(this$static, this$static._width, this$static._height);
    }
  }
}

function $setCameraHeading_0(this$static, angle){
  $setCameraHeading(this$static._g3mWidget, angle);
}

function $setCameraPitch_0(this$static, angle){
  $setCameraPitch(this$static._g3mWidget, angle);
}

function $setCameraPosition_0(this$static, position){
  $setCameraPosition(this$static._g3mWidget, position);
}

function $setG3MWidget(this$static, widget){
  this$static._g3mWidget = widget;
}

function $startWidget(this$static){
  if (this$static._g3mWidget) {
    this$static._motionEventProcessor = new MotionEventProcessor_0(this$static._g3mWidget, $getElement(this$static._canvas));
    $jsAddResizeHandler(this$static, $getElement(this$static._canvas));
    $wnd.g3mTick();
  }
}

function G3MWidget_WebGL_0(){
  var nativeGL, logger, factory, stringUtils, stringBuilder, mathUtils, jsonParser, textUtils, devAtt, devLoc;
  logger = new Logger_WebGL_0;
  factory = new Factory_WebGL_0;
  stringUtils = new StringUtils_WebGL_0;
  stringBuilder = new StringBuilder_WebGL_0;
  mathUtils = new MathUtils_WebGL_0;
  jsonParser = new JSONParser_WebGL_0;
  textUtils = new TextUtils_WebGL_0;
  devAtt = new DeviceAttitude_WebGL_0;
  devLoc = new DeviceLocation_WebGL_0;
  initSingletons(logger, factory, stringUtils, stringBuilder, mathUtils, jsonParser, textUtils, devAtt, devLoc);
  this._canvas = createIfSupported();
  $getElement(this._canvas).id = '_g3m_canvas';
  if (!this._canvas) {
    $initWidget(this, createUnsupportedMessage('Your browser does not support the HTML5 Canvas.'));
    return;
  }
  this._webGLContext = $jsGetWebGLContext($getElement(this._canvas));
  if (!this._webGLContext) {
    $initWidget(this, createUnsupportedMessage('Your browser does not support WebGL.'));
    return;
  }
  $initWidget(this, this._canvas);
  $onSizeChanged(this, 1, 1);
  nativeGL = new NativeGL_WebGL_0(this._webGLContext);
  this._gl = new GL_0(nativeGL);
  $jsDefineG3MBrowserObjects(this);
  this.eventsToSink == -1?sinkEvents(($clinit_DOM() , this.element), 16121982 | (this.element.__eventBits || 0)):(this.eventsToSink |= 16121982);
  $exportJSFunctions(this);
}

function createUnsupportedMessage(message){
  var panel;
  panel = new VerticalPanel_0;
  $add_3(panel, new Label_1(message));
  $add_3(panel, new Label_1('Please upgrade your browser to get this running.'));
  return panel;
}

defineSeed(701, 246, makeCastMap([Q$HasAttachHandlers, Q$HasHandlers, Q$EventListener, Q$HasVisibility, Q$IsRenderable, Q$IsWidget, Q$UIObject, Q$Widget]), G3MWidget_WebGL_0);
_.getCameraData_0 = function getCameraData(){
  var widget = this._g3mWidget;
  var camera = widget.getCurrentCamera();
  var position = camera.getGeodeticPosition();
  var latitude = position._latitude;
  var longitude = position._longitude;
  var height = position._height;
  var heading = camera.getHeading_0();
  var pitch = camera.getPitch_0();
  var result = new Object;
  result.latitude = latitude._degrees;
  result.longitude = longitude._degrees;
  result.height = height;
  result.heading = heading._degrees;
  result.pitch = pitch._degrees;
  return result;
}
;
_.moveCameraTo_0 = function moveCameraTo(position){
  $setAnimatedCameraPosition(this._g3mWidget, new TimeInterval_0(P1388_longLit), position, new Angle_0(0, 0), new Angle_0(-90, -1.5707963267948966));
}
;
_.newGeodetic3D_0 = function newGeodetic3D(latitude, longitude, height){
  return new Geodetic3D_0(new Angle_0(latitude, latitude / 180 * 3.141592653589793), new Angle_0(longitude, longitude / 180 * 3.141592653589793), height);
}
;
_.onBrowserEvent = function onBrowserEvent_1(event_0){
  $setFocus(this._canvas);
  !!this._motionEventProcessor && $processEvent(this._motionEventProcessor, event_0);
  $onBrowserEvent(this, event_0);
  this.widget.onBrowserEvent(event_0);
}
;
_.onSizeChanged = function onSizeChanged(w, h_0){
  $onSizeChanged(this, w, h_0);
}
;
_.renderG3MWidget = function renderG3MWidget(){
  $render_2(this._g3mWidget, this._width, this._height);
}
;
_.takeScreenshotAsBase64_0 = function takeScreenshotAsBase64(){
  var javaCanvas = this._canvas;
  var canvas = javaCanvas.getCanvasElement();
  var dataURL = canvas.toDataURL('image/jpeg');
  return dataURL.replace(/^data:image\/(png|jpg|jpeg);base64,/, '');
}
;
_.takeScreenshotAsImage_0 = function takeScreenshotAsImage(){
  var javaCanvas = this._canvas;
  var canvas = javaCanvas.getCanvasElement();
  var image = new Image;
  image.width = canvas.width;
  image.height = canvas.height;
  image.src = canvas.toDataURL('image/jpeg');
  return image;
}
;
_._height = 0;
_._width = 0;
function $isEquals_4(this$static, that){
  return this$static._webGLTexture == that._webGLTexture;
}

function GLTextureId_WebGL_0(webGLTexture){
  this._webGLTexture = webGLTexture;
}

defineSeed(702, 1, makeCastMap([Q$IGLTextureId]), GLTextureId_WebGL_0);
_.getWebGLTexture = function getWebGLTexture(){
  return this._webGLTexture;
}
;
function GLUniformID_WebGL_0(id_0){
  this._id = id_0;
}

defineSeed(703, 1, {}, GLUniformID_WebGL_0);
_.getId = function getId(){
  return this._id;
}
;
function $getHeight(this$static){
  var jsImage = this$static._imgObject;
  return jsImage?jsImage.height:0;
}

function $getWidth(this$static){
  var jsImage = this$static._imgObject;
  return jsImage?jsImage.width:0;
}

function Image_WebGL_0(data_0){
  this._imgObject = data_0;
  ($getWidth(this) <= 0 || $getHeight(this) <= 0) && (this._imgObject = null);
}

defineSeed(704, 560, {}, Image_WebGL_0);
_.getImage = function getImage(){
  return this._imgObject;
}
;
function $parse(string){
  var value_0;
  value_0 = ($clinit_JSONParser() , parse_0(string));
  return convert(value_0, false);
}

function JSONParser_WebGL_0(){
}

function convert(value_0, nullAsObject){
  var array, doubleValue, element, floatValue, i_0, intValue, jsonArray, jsonBoolean, jsonNull, jsonNumber, jsonObject, jsonString, key, key$iterator, longValue, object, size_0, keys_0;
  jsonNull = value_0.isNull();
  if (jsonNull) {
    return nullAsObject?new JSONNull_2:null;
  }
  jsonBoolean = value_0.isBoolean();
  if (jsonBoolean) {
    return new JSONBoolean_2(jsonBoolean.value_0);
  }
  jsonNumber = value_0.isNumber();
  if (jsonNumber) {
    doubleValue = jsonNumber.value_0;
    intValue = round_int(doubleValue);
    if (doubleValue == intValue) {
      return new JSONInteger_0(intValue);
    }
    floatValue = doubleValue;
    if (doubleValue == floatValue) {
      return new JSONFloat_0(floatValue);
    }
    longValue = fromDouble(doubleValue);
    if (doubleValue == toDouble(longValue)) {
      return new JSONLong_0(longValue);
    }
    return new JSONDouble_0(doubleValue);
  }
  jsonString = value_0.isString();
  if (jsonString) {
    return new JSONString_2(jsonString.value_0);
  }
  jsonArray = value_0.isArray();
  if (jsonArray) {
    array = new JSONArray_2;
    size_0 = jsonArray.jsArray.length;
    for (i_0 = 0; i_0 < size_0; i_0++) {
      element = $get(jsonArray, i_0);
      $add_17(array, convert(element, nullAsObject));
    }
    return array;
  }
  jsonObject = value_0.isObject();
  if (jsonObject) {
    object = new JSONObject_2;
    for (key$iterator = new AbstractList$IteratorImpl_0(new Arrays$ArrayList_0((keys_0 = $computeKeys0(jsonObject, initDim(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$String, 0, 0)) , new JSONObject$1_0(jsonObject, keys_0)).val$keys)); key$iterator.i < key$iterator.this$0_0.size_1();) {
      key = dynamicCast($next_2(key$iterator), Q$String);
      $put_0(object, key, convert($get_0(jsonObject, key), nullAsObject));
    }
    return object;
  }
  $logError(_instance_3, 'Invalid type in "' + value_0 + '"', initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
  return null;
}

defineSeed(705, 562, {}, JSONParser_WebGL_0);
function $log_5(level, msg){
  if (_instance_3) {
    switch (level) {
      case 1:
        $logInfo(_instance_3, 'ListenerEntry' + msg, initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
        break;
      case 2:
        $logWarning(_instance_3, 'ListenerEntry' + msg, initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
        break;
      case 3:
        $logError(_instance_3, 'ListenerEntry' + msg, initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, []));
    }
  }
}

function $onCancel_1(this$static, url_0){
  if (this$static._bufferListener) {
    this$static._bufferListener.onCancel(url_0);
    this$static._deleteListener && this$static._bufferListener.dispose();
  }
  if (this$static._imageListener) {
    $onCancel(this$static._imageListener);
    this$static._deleteListener && $dispose_13(this$static._imageListener);
  }
}

function $onCanceledDownload(this$static, url_0, data_0){
  var byteBuffer, image;
  if (this$static._bufferListener) {
    byteBuffer = new ByteBuffer_WebGL_1(data_0);
    this$static._bufferListener.onCanceledDownload(url_0, byteBuffer, false);
  }
  if (this$static._imageListener) {
    image = new Image_WebGL_0(data_0);
    !image._imgObject?$log_5(3, ": Can't create image from data (URL=" + url_0._path + ')'):undefined;
  }
}

function $onDownload_0(this$static, url_0, data_0){
  var byteBuffer, image;
  if (this$static._bufferListener) {
    byteBuffer = new ByteBuffer_WebGL_1(data_0);
    this$static._bufferListener.onDownload(url_0, byteBuffer, false);
    this$static._deleteListener && this$static._bufferListener.dispose();
  }
  if (this$static._imageListener) {
    image = new Image_WebGL_0(data_0);
    if (!image._imgObject) {
      $log_5(3, ": Can't create image from data (URL=" + url_0._path + ')');
      $onError(this$static._imageListener, url_0);
    }
     else {
      $onDownload(this$static._imageListener, url_0, image);
    }
    this$static._deleteListener && $dispose_13(this$static._imageListener);
  }
}

function $onError_1(this$static, url_0){
  if (this$static._bufferListener) {
    this$static._bufferListener.onError(url_0);
    this$static._deleteListener && this$static._bufferListener.dispose();
  }
  if (this$static._imageListener) {
    $onError(this$static._imageListener, url_0);
    this$static._deleteListener && $dispose_13(this$static._imageListener);
  }
}

function ListenerEntry_0(bufferListener, imageListener, deleteListener, requestId){
  this._bufferListener = bufferListener;
  this._imageListener = imageListener;
  this._deleteListener = deleteListener;
  this._requestId = requestId;
  this._canceled = false;
}

defineSeed(706, 1, makeCastMap([Q$ListenerEntry]), ListenerEntry_0);
_._canceled = false;
_._deleteListener = false;
_._requestId = P0_longLit;
function $logError(this$static, x_0, LegacyParamArray){
  var res;
  if (this$static._level <= 3) {
    res = $stringFormat(x_0, LegacyParamArray);
    $log_1(this$static._logger, ($clinit_Level() , SEVERE), res);
  }
}

function $logInfo(this$static, x_0, LegacyParamArray){
  var res;
  if (this$static._level <= 1) {
    res = $stringFormat(x_0, LegacyParamArray);
    $log_1(this$static._logger, ($clinit_Level() , INFO), res);
  }
}

function $logWarning(this$static, x_0, LegacyParamArray){
  var res;
  if (this$static._level <= 2) {
    res = $stringFormat(x_0, LegacyParamArray);
    $log_1(this$static._logger, ($clinit_Level() , WARNING), res);
  }
}

function $stringFormat(format, args){
  var exp_0, i_0, nextSub, output;
  exp_0 = new RegExp('%[sdf]');
  nextSub = 0;
  output = '';
  for (i_0 = 0; i_0 < format.split(exp_0).length; i_0++) {
    output = output + format.split(exp_0)[i_0];
    i_0 + 1 < format.split(exp_0).length && nextSub < args.length && (output = output + args[nextSub]);
    ++nextSub;
  }
  return output;
}

function Logger_WebGL_0(){
  this._level = 1;
  this._logger = ($clinit_Logger() , $getLoggerHelper(''));
}

defineSeed(707, 563, {}, Logger_WebGL_0);
function $abs(v){
  return v <= 0?0 - v:v;
}

function $max_0(d1, d2){
  return d1 > d2?d1:d2;
}

function $max_1(f1, f2){
  return f1 > f2?f1:f2;
}

function $max_2(i1, i2){
  return i1 > i2?i1:i2;
}

function $min_1(d1, d2){
  return d1 < d2?d1:d2;
}

function $min_2(f1, f2){
  return f1 < f2?f1:f2;
}

function MathUtils_WebGL_0(){
  new Random_0;
}

defineSeed(708, 564, {}, MathUtils_WebGL_0);
function $clinit_MotionEventProcessor(){
  $clinit_MotionEventProcessor = nullMethod;
  DELTA = new Vector2F_0(10, 0);
}

function $createTouches(this$static, event_0){
  var currentTouchPosition, currentTouchesPositions, i_0, jsTouch, jsTouches, jsTouchesSize, previousTouchPosition, touchId, touches;
  currentTouchesPositions = new HashMap_0;
  jsTouches = ($clinit_DOMImpl() , event_0).touches;
  jsTouchesSize = jsTouches.length;
  touches = new ArrayList_1(jsTouchesSize);
  for (i_0 = 0; i_0 < jsTouchesSize; i_0++) {
    jsTouch = jsTouches[i_0];
    currentTouchPosition = new Vector2F_0($getRelativeX(jsTouch, this$static._canvasElement), $getRelativeY(jsTouch, this$static._canvasElement));
    touchId = valueOf_0(jsTouch.identifier);
    !touchId?$putNullSlot(currentTouchesPositions, currentTouchPosition):$putHashValue(currentTouchesPositions, touchId, currentTouchPosition, ~~touchId.value_0);
    previousTouchPosition = dynamicCast($get_1(this$static._previousTouchesPositions, touchId), Q$Vector2F);
    !previousTouchPosition && (previousTouchPosition = currentTouchPosition);
    $add_5(touches, new Touch_2(currentTouchPosition, previousTouchPosition));
  }
  this$static._previousTouchesPositions = currentTouchesPositions;
  return touches;
}

function $dispatchEvents(this$static, events){
  var event_0, event$index, event$max, scheduler;
  if (events.length > 0) {
    scheduler = ($clinit_SchedulerImpl() , INSTANCE_0);
    for (event$index = 0 , event$max = events.length; event$index < event$max; ++event$index) {
      event_0 = events[event$index];
      $scheduleDeferred(scheduler, new MotionEventProcessor$1_0(this$static, event_0));
    }
  }
}

function $jsAddMouseWheelListener(this$static){
  var thisInstance = this$static;
  var canvas = this$static._canvasElement;
  $wnd.g3mMouseWheelHandler = function(e){
    var e = $wnd.event || e;
    var delta = Math.max(-1, Math.min(1, e.wheelDelta || -e.detail));
    thisInstance.processMouseWheel(delta, e.clientX, e.clientY);
  }
  ;
  if (canvas) {
    if (canvas.addEventListener) {
      canvas.addEventListener('mousewheel', $wnd.g3mMouseWheelHandler, false);
      canvas.addEventListener('DOMMouseScroll', $wnd.g3mMouseWheelHandler, false);
    }
     else {
      canvas.attachEvent('onmousewheel', $wnd.g3mMouseWheelHandler);
    }
  }
}

function $processEvent(this$static, event_0){
  var touchEvent, currentMousePosition, touch, currentMousePosition_0, touch_0;
  touchEvent = null;
  switch ($clinit_DOM() , $eventGetTypeInt(($clinit_DOMImpl() , event_0).type)) {
    case 1048576:
      impl_1.eventPreventDefault(event_0);
      touchEvent = new TouchEvent_2(($clinit_TouchEventType() , Down), $createTouches(this$static, event_0));
      break;
    case 4194304:
      impl_1.eventPreventDefault(event_0);
      touchEvent = new TouchEvent_2(($clinit_TouchEventType() , Up), $createTouches(this$static, event_0));
      break;
    case 2097152:
      impl_1.eventPreventDefault(event_0);
      touchEvent = new TouchEvent_2(($clinit_TouchEventType() , Move), $createTouches(this$static, event_0));
      break;
    case 8388608:
      impl_1.eventPreventDefault(event_0);
      touchEvent = (this$static._previousTouchesPositions = new HashMap_0 , null);
      break;
    case 64:
      touchEvent = $processMouseMove(this$static, event_0);
      break;
    case 4:
      touchEvent = $processMouseDown(this$static, event_0);
      break;
    case 8:
      touchEvent = $processMouseUp(this$static, event_0);
      break;
    case 2:
      touchEvent = (currentMousePosition = new Vector2F_0(toInt32(event_0.clientX || 0) - $getAbsoluteLeft(this$static._canvasElement), toInt32(event_0.clientY || 0) - $getAbsoluteTop(this$static._canvasElement)) , touch = new Touch_3(currentMousePosition, currentMousePosition, 2) , create_5(($clinit_TouchEventType() , Down), touch));
      break;
    case 262144:
      impl_1.eventPreventDefault(event_0);
      touchEvent = (this$static._mouseDown = false , currentMousePosition_0 = new Vector2F_0(toInt32(event_0.clientX || 0) - $getAbsoluteLeft(this$static._canvasElement), toInt32(event_0.clientY || 0) - $getAbsoluteTop(this$static._canvasElement)) , touch_0 = new Touch_2(currentMousePosition_0, this$static._previousMousePosition) , this$static._previousMousePosition = currentMousePosition_0 , create_5(($clinit_TouchEventType() , LongPress), touch_0));
      break;
    case 131072:
      impl_1.eventPreventDefault(event_0);
      break;
    default:return;
  }
  !!touchEvent && $dispatchEvents(this$static, initValues(_3Lorg_glob3_mobile_generated_TouchEvent_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$TouchEvent, [touchEvent]));
}

function $processMouseDown(this$static, event_0){
  var currentMousePosition, touches;
  currentMousePosition = new Vector2F_0(toInt32(($clinit_DOMImpl() , event_0).clientX || 0) - $getAbsoluteLeft(this$static._canvasElement), toInt32(event_0.clientY || 0) - $getAbsoluteTop(this$static._canvasElement));
  touches = new ArrayList_0;
  this$static._mouseDown = true;
  if (event_0.shiftKey) {
    $add_5(touches, new Touch_2($sub_1(currentMousePosition, DELTA), $sub_1(this$static._previousMousePosition, DELTA)));
    $add_5(touches, new Touch_2(currentMousePosition, this$static._previousMousePosition));
    $add_5(touches, new Touch_2($add_20(currentMousePosition, DELTA), $add_20(this$static._previousMousePosition, DELTA)));
  }
   else {
    $add_5(touches, new Touch_2(currentMousePosition, this$static._previousMousePosition));
  }
  this$static._previousMousePosition = currentMousePosition;
  return new TouchEvent_2(($clinit_TouchEventType() , Down), touches);
}

function $processMouseMove(this$static, event_0){
  var currentMousePosition, touches;
  if (!this$static._mouseDown) {
    return null;
  }
  currentMousePosition = new Vector2F_0(toInt32(($clinit_DOMImpl() , event_0).clientX || 0) - $getAbsoluteLeft(this$static._canvasElement), toInt32(event_0.clientY || 0) - $getAbsoluteTop(this$static._canvasElement));
  touches = new ArrayList_0;
  if (event_0.shiftKey) {
    $add_5(touches, new Touch_2($sub_1(currentMousePosition, DELTA), $sub_1(this$static._previousMousePosition, DELTA)));
    $add_5(touches, new Touch_2(currentMousePosition, this$static._previousMousePosition));
    $add_5(touches, new Touch_2($add_20(currentMousePosition, DELTA), $add_20(this$static._previousMousePosition, DELTA)));
  }
   else {
    $add_5(touches, new Touch_2(currentMousePosition, this$static._previousMousePosition));
  }
  this$static._previousMousePosition = currentMousePosition;
  return new TouchEvent_2(($clinit_TouchEventType() , Move), touches);
}

function $processMouseUp(this$static, event_0){
  var currentMousePosition, touchType, touches;
  currentMousePosition = new Vector2F_0(toInt32(($clinit_DOMImpl() , event_0).clientX || 0) - $getAbsoluteLeft(this$static._canvasElement), toInt32(event_0.clientY || 0) - $getAbsoluteTop(this$static._canvasElement));
  touches = new ArrayList_0;
  this$static._mouseDown = false;
  if (event_0.shiftKey) {
    $add_5(touches, new Touch_2($sub_1(currentMousePosition, DELTA), $sub_1(this$static._previousMousePosition, DELTA)));
    $add_5(touches, new Touch_2(currentMousePosition, this$static._previousMousePosition));
    $add_5(touches, new Touch_2($add_20(currentMousePosition, DELTA), $add_20(this$static._previousMousePosition, DELTA)));
    touchType = ($clinit_TouchEventType() , Up);
  }
   else {
    $add_5(touches, new Touch_2(currentMousePosition, this$static._previousMousePosition));
    touchType = !!event_0.ctrlKey && impl_1.eventGetButton(event_0) == 1?($clinit_TouchEventType() , LongPress):($clinit_TouchEventType() , Up);
  }
  this$static._previousMousePosition = currentMousePosition;
  return new TouchEvent_2(touchType, touches);
}

function MotionEventProcessor_0(widget, canvasElement){
  $clinit_MotionEventProcessor();
  this._previousTouchesPositions = new HashMap_0;
  this._widget = widget;
  this._canvasElement = canvasElement;
  $jsAddMouseWheelListener(this);
}

defineSeed(709, 1, {}, MotionEventProcessor_0);
_.processMouseWheel = function processMouseWheel(delta, x_0, y_0){
  var beginFirstPosition, beginSecondPosition, beginTouches, endFirstPosition, endSecondPosition, endTouches;
  beginFirstPosition = new Vector2F_0(x_0 - 10, y_0 - 10);
  beginSecondPosition = new Vector2F_0(x_0 + 10, y_0 + 10);
  beginTouches = new ArrayList_1(2);
  $add_5(beginTouches, new Touch_2(beginFirstPosition, beginFirstPosition));
  $add_5(beginTouches, new Touch_2(beginSecondPosition, beginSecondPosition));
  endFirstPosition = new Vector2F_0(beginFirstPosition._x - delta, beginFirstPosition._y - delta);
  endSecondPosition = new Vector2F_0(beginSecondPosition._x + delta, beginSecondPosition._y + delta);
  endTouches = new ArrayList_1(2);
  $add_5(endTouches, new Touch_2(endFirstPosition, beginFirstPosition));
  $add_5(endTouches, new Touch_2(endSecondPosition, beginSecondPosition));
  $dispatchEvents(this, initValues(_3Lorg_glob3_mobile_generated_TouchEvent_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$TouchEvent, [new TouchEvent_2(($clinit_TouchEventType() , Down), beginTouches), new TouchEvent_2(Move, endTouches), new TouchEvent_2(Up, endTouches)]));
  this._previousMousePosition = new Vector2F_0(x_0, y_0);
}
;
_._mouseDown = false;
_._previousMousePosition = null;
var DELTA;
function MotionEventProcessor$1_0(this$0, val$event){
  this.this$0 = this$0;
  this.val$event = val$event;
}

defineSeed(710, 1, {}, MotionEventProcessor$1_0);
_.execute_1 = function execute_15(){
  $onTouchEvent_0(this.this$0._widget, this.val$event);
}
;
function $attachShader_0(this$static, program, shader){
  var shaderList = this$static._shaderList;
  var jsoProgram = shaderList.get_1(program);
  var jsoShader = shaderList.get_1(shader);
  this$static._gl.attachShader(jsoProgram, jsoShader);
}

function $bindTexture_0(this$static, target, texture){
  var id_0 = texture.getWebGLTexture();
  this$static._gl.bindTexture(target, id_0);
}

function $blendFunc(this$static, sfactor, dfactor){
  this$static._gl.blendFunc(sfactor, dfactor);
}

function $clear_1(this$static, buffers){
  this$static._gl.clear(buffers);
}

function $clearColor(this$static, red, green, blue, alpha_0){
  this$static._gl.clearColor(red, green, blue, alpha_0);
}

function $compileShader_0(this$static, shader, source){
  var gl = this$static._gl;
  var shaderList = this$static._shaderList;
  var jsoShader = shaderList.get_1(shader);
  gl.shaderSource(jsoShader, source);
  gl.compileShader(jsoShader);
  return gl.getShaderParameter(jsoShader, gl.COMPILE_STATUS);
}

function $createProgram(this$static){
  var shaderList = this$static._shaderList;
  var jsoProgram = this$static._gl.createProgram();
  shaderList.add_0(jsoProgram);
  var id_0 = shaderList.size_1() - 1;
  return id_0;
}

function $createShader_0(this$static, type_0){
  var shaderList = this$static._shaderList;
  var gl = this$static._gl;
  var shaderType;
  switch (type_0) {
    case $clinit_ShaderType() , VERTEX_SHADER:
      shaderType = gl.VERTEX_SHADER;
      break;
    case FRAGMENT_SHADER:
      shaderType = gl.FRAGMENT_SHADER;
      break;
    default:$wnd.alert('Unknown shader type');
      return 0;
  }
  var shader = gl.createShader(shaderType);
  shaderList.add_0(shader);
  var id_0 = shaderList.size_1() - 1;
  return id_0;
}

function $cullFace(this$static, c){
  this$static._gl.cullFace(c);
}

function $deleteProgram_0(this$static, program){
  var shaderList = this$static._shaderList;
  var jsoProgram = shaderList.get_1(program);
  this$static._gl.deleteProgram(jsoProgram);
}

function $deleteShader(this$static, shader){
  var gl = this$static._gl;
  var shaderList = this$static._shaderList;
  var jsoShader = shaderList.get_1(shader);
  return true;
}

function $deleteTexture_0(this$static, texture){
  var textureID = texture.getWebGLTexture();
  this$static._gl.deleteTexture(textureID);
  return false;
}

function $disable(this$static, feature){
  this$static._gl.disable(feature);
}

function $disableVertexAttribArray_0(this$static, location_0){
  this$static._gl.disableVertexAttribArray(location_0);
}

function $drawArrays_0(this$static, mode, first, count){
  this$static._gl.drawArrays(mode, first, count);
}

function $drawElements_0(this$static, mode, count, indices){
  var gl = this$static._gl;
  var webGLBuffer = indices.getWebGLBuffer(gl);
  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, webGLBuffer);
  var array = indices.getBuffer();
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, array, gl.STATIC_DRAW);
  gl.drawElements(mode, count, gl.UNSIGNED_SHORT, 0);
}

function $enable(this$static, feature){
  this$static._gl.enable(feature);
}

function $enableVertexAttribArray_0(this$static, location_0){
  this$static._gl.enableVertexAttribArray(location_0);
}

function $genTextures(this$static, n){
  var array = new ArrayList_0;
  for (i = 0; i < n; i++) {
    var texture = this$static._gl.createTexture();
    var textureID = new GLTextureId_WebGL_0(texture);
    array.add_0(textureID);
  }
  return array;
}

function $generateMipmap(this$static, target){
  this$static._gl.generateMipmap(target);
}

function $getActiveAttribute(this$static, program, i_0){
  var progInt = program.getProgramID();
  var shaderList = this$static._shaderList;
  var jsoProgram = shaderList.get_1(progInt);
  var gl = this$static._gl;
  var info = gl.getActiveAttrib(jsoProgram, i_0);
  var id_0 = gl.getAttribLocation(jsoProgram, info.name);
  switch (info.type) {
    case gl.FLOAT_VEC3:
      return new GPUAttributeVec3Float_0(info.name, id_0);
    case gl.FLOAT_VEC4:
      return new GPUAttributeVec4Float_0(info.name, id_0);
    case gl.FLOAT_VEC2:
      return new GPUAttributeVec2Float_0(info.name, id_0);
    default:return null;
      break;
  }
}

function $getActiveUniform(this$static, program, i_0){
  var progInt = program.getProgramID();
  var shaderList = this$static._shaderList;
  var jsoProgram = shaderList.get_1(progInt);
  var gl = this$static._gl;
  var info = gl.getActiveUniform(jsoProgram, i_0);
  var id_0 = gl.getUniformLocation(jsoProgram, info.name);
  var glUniformID = new GLUniformID_WebGL_0(id_0);
  switch (info.type) {
    case gl.FLOAT_MAT4:
      return new GPUUniformMatrix4Float_0(info.name, glUniformID);
    case gl.FLOAT_VEC4:
      return new GPUUniformVec4Float_0(info.name, glUniformID);
    case gl.FLOAT:
      return new GPUUniformFloat_0(info.name, glUniformID);
    case gl.FLOAT_VEC2:
      return new GPUUniformVec2Float_0(info.name, glUniformID);
    case gl.FLOAT_VEC3:
      return new GPUUniformVec3Float_0(info.name, glUniformID);
    case gl.BOOL:
      return new GPUUniformBool_0(info.name, glUniformID);
    case gl.SAMPLER_2D:
      return new GPUUniformSampler2D_0(info.name, glUniformID);
    default:return null;
      break;
  }
}

function $getError(this$static){
  var gl = this$static._gl;
  var e = gl.getError();
  e == gl.INVALID_ENUM && console.error('NativeGL_WebGL: INVALID_ENUM');
  e == gl.INVALID_VALUE && console.error('NativeGL_WebGL: INVALID_VALUE');
  e == gl.INVALID_OPERATION && console.error('NativeGL_WebGL: INVALID_OPERATION');
  e == gl.OUT_OF_MEMORY && console.error('NativeGL_WebGL: INVALID_OPERATION');
  e == gl.CONTEXT_LOST_WEBGL && console.error('NativeGL_WebGL: CONTEXT_LOST_WEBGL');
  return Number(e);
}

function $getProgramiv_0(this$static, program, param){
  var progInt = program.getProgramID();
  var shaderList = this$static._shaderList;
  var jsoProgram = shaderList.get_1(progInt);
  var gl = this$static._gl;
  return gl.getProgramParameter(jsoProgram, param);
}

function $lineWidth(this$static, width_0){
  this$static._gl.lineWidth(width_0);
}

function $linkProgram_0(this$static, program){
  var gl = this$static._gl;
  var shaderList = this$static._shaderList;
  var jsoProgram = shaderList.get_1(program);
  gl.linkProgram(jsoProgram);
  return gl.getProgramParameter(jsoProgram, gl.LINK_STATUS);
}

function $pixelStorei(this$static, pname, param){
  this$static._gl.pixelStorei(pname, param);
}

function $polygonOffset(this$static, factor, units){
  this$static._gl.polygonOffset(factor, units);
}

function $printShaderInfoLog(this$static, shader){
  var gl = this$static._gl;
  var shaderList = this$static._shaderList;
  var jsoShader = shaderList.get_1(shader);
  !gl.getShaderParameter(jsoShader, gl.COMPILE_STATUS) && $wnd.alert('Error compiling shaders: ' + gl.getShaderInfoLog(jsoShader));
}

function $texImage2D(this$static, image, format){
  var img = image.getImage();
  var gl = this$static._gl;
  var TEXTURE_2D = gl.TEXTURE_2D;
  var UNSIGNED_BYTE = gl.UNSIGNED_BYTE;
  gl.texImage2D(TEXTURE_2D, 0, format, format, UNSIGNED_BYTE, img);
}

function $texParameteri(this$static, target, par, v){
  this$static._gl.texParameteri(target, par, v);
}

function $uniform1f_0(this$static, loc, x_0){
  var locId = loc.getId();
  this$static._gl.uniform1f(locId, x_0);
}

function $uniform1i_0(this$static, loc, v){
  var locId = loc.getId();
  this$static._gl.uniform1i(locId, v);
}

function $uniform2f_0(this$static, loc, x_0, y_0){
  var locId = loc.getId();
  this$static._gl.uniform2f(locId, x_0, y_0);
}

function $uniform3f_0(this$static, location_0, x_0, y_0, z_0){
  var locId = location_0.getId();
  this$static._gl.uniform3f(locId, x_0, y_0, z_0);
}

function $uniform4f_0(this$static, location_0, v0, v1, v2, v3){
  var locId = location_0.getId();
  this$static._gl.uniform4f(locId, v0, v1, v2, v3);
}

function $uniformMatrix4fv_0(this$static, location_0, transpose, matrix){
  var id_0 = location_0.getId();
  var buffer = matrix.getColumnMajorFloatBuffer();
  var value_0 = buffer.getBuffer();
  this$static._gl.uniformMatrix4fv(id_0, transpose, value_0);
}

function $useProgram_0(this$static, program){
  var progInt = program.getProgramID();
  var shaderList = this$static._shaderList;
  var jsoProgram = shaderList.get_1(progInt);
  this$static._gl.useProgram(jsoProgram);
}

function $vertexAttribPointer_0(this$static, index_0, size_0, normalized, stride, buffer){
  var gl = this$static._gl;
  var webGLBuffer = buffer.bindVBO(gl);
  gl.vertexAttribPointer(index_0, size_0, gl.FLOAT, normalized, stride, 0);
}

function NativeGL_WebGL_0(webGLContext){
  this._shaderList = new ArrayList_0;
  this._gl = webGLContext;
}

defineSeed(711, 565, {}, NativeGL_WebGL_0);
function $$init_3(this$static){
  _nextID_0 = add_1(_nextID_0, P1_longLit);
}

function $dispose_20(this$static){
  if (this$static._webGLBuffer) {
    this$static._gl.deleteBuffer(this$static._webGLBuffer);
    this$static._webGLBuffer = null;
    this$static._gl = null;
  }
}

function $jsPut(this$static, i_0, value_0){
  (value_0 < 0 || value_0 > 65535) && alert('EXCEDING SHORT RANGE IN UINT16 JAVASCRIPT BUFFER');
  var thisInstance = this$static;
  if (thisInstance._buffer[i_0] != value_0) {
    thisInstance._buffer[i_0] = value_0;
    thisInstance.incTimestamp_0();
  }
}

function ShortBuffer_WebGL_0(size_0){
  $$init_3(this);
  this._buffer = new Uint16Array(size_0);
}

function ShortBuffer_WebGL_1(array, length_0){
  var i_0;
  $$init_3(this);
  this._buffer = new Uint16Array(length_0);
  for (i_0 = 0; i_0 < length_0; i_0++) {
    (array[i_0] < 0 || array[i_0] > 65535) && alert('EXCEDING SHORT RANGE IN UINT16 JAVASCRIPT BUFFER');
    this._buffer[i_0] = array[i_0];
  }
}

defineSeed(712, 566, {}, ShortBuffer_WebGL_0, ShortBuffer_WebGL_1);
_.getBuffer = function getBuffer_0(){
  return this._buffer;
}
;
_.getWebGLBuffer = function getWebGLBuffer(gl){
  if (!this._webGLBuffer) {
    this._gl = gl;
    this._webGLBuffer = this._gl.createBuffer();
  }
  return this._webGLBuffer;
}
;
_.incTimestamp_0 = function incTimestamp_0(){
  ++this._timestamp;
}
;
_._gl = null;
_._timestamp = 0;
_._webGLBuffer = null;
var _nextID_0 = P0_longLit;
function $addBool(this$static, b){
  this$static._string += b;
  return this$static;
}

function $addDouble(this$static, d){
  this$static._string += d;
  return this$static;
}

function $addFloat(this$static, f){
  this$static._string += f;
  return this$static;
}

function $addInt(this$static, i_0){
  this$static._string += i_0;
  return this$static;
}

function $addLong(this$static, l_0){
  this$static._string += toString_16(l_0);
  return this$static;
}

function $addString(this$static, s){
  this$static._string += s;
  return this$static;
}

function StringBuilder_WebGL_0(){
}

defineSeed(713, 567, {}, StringBuilder_WebGL_0);
_._string = '';
function StringUtils_WebGL_0(){
}

defineSeed(714, 568, {}, StringUtils_WebGL_0);
function TextUtils_WebGL_0(){
}

defineSeed(715, 569, {}, TextUtils_WebGL_0);
function $invokeTask(this$static, task){
  var timer;
  timer = new ThreadUtils_WebGL$1_0(this$static, task);
  $schedule(timer, this$static._delayMillis);
}

function ThreadUtils_WebGL_0(){
  this._context = null;
  this._delayMillis = 10;
}

defineSeed(716, 570, {}, ThreadUtils_WebGL_0);
_._delayMillis = 0;
function ThreadUtils_WebGL$1_0(this$0, val$task){
  this.this$0 = this$0;
  this.val$task = val$task;
  Timer_0.call(this);
}

defineSeed(717, 12, {}, ThreadUtils_WebGL$1_0);
_.run = function run_4(){
  this.val$task.run_0(this.this$0._context);
}
;
function $elapsedTimeInMilliseconds(this$static){
  return sub_0(fromDouble(currentTimeMillis0()), this$static._startTimeInMilliseconds);
}

function Timer_WebGL_0(){
  this._startTimeInMilliseconds = fromDouble(currentTimeMillis0());
}

defineSeed(718, 573, {}, Timer_WebGL_0);
_._startTimeInMilliseconds = P0_longLit;
var $entry = registerEntry();
function gwtOnLoad(errFn, modName, modBase, softPermutationId){
  $moduleName = modName;
  $moduleBase = modBase;
  permutationId = softPermutationId;
  if (errFn)
    try {
      $entry(init)();
    }
     catch (e) {
      errFn(modName);
    }
   else {
    $entry(init)();
  }
}

var Ljava_lang_Object_2_classLit = createForClass('java.lang.', 'Object', 1), Lcom_google_gwt_core_client_Scheduler_2_classLit = createForClass('com.google.gwt.core.client.', 'Scheduler', 34), Lcom_google_gwt_core_client_JavaScriptObject_2_classLit = createForClass('com.google.gwt.core.client.', 'JavaScriptObject$', 29), I_classLit = createForPrimitive('int', ' I'), _3I_classLit = createForArray('', '[I', 724, I_classLit), _3Ljava_lang_Object_2_classLit = createForArray('[Ljava.lang.', 'Object;', 722, Ljava_lang_Object_2_classLit), Ljava_lang_Throwable_2_classLit = createForClass('java.lang.', 'Throwable', 28), Ljava_lang_Exception_2_classLit = createForClass('java.lang.', 'Exception', 27), Ljava_lang_RuntimeException_2_classLit = createForClass('java.lang.', 'RuntimeException', 26), Ljava_lang_StackTraceElement_2_classLit = createForClass('java.lang.', 'StackTraceElement', 305), _3Ljava_lang_StackTraceElement_2_classLit = createForArray('[Ljava.lang.', 'StackTraceElement;', 725, Ljava_lang_StackTraceElement_2_classLit), Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit = createForClass('com.google.gwt.lang.', 'LongLibBase$LongEmul', null), _3Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit = createForArray('[Lcom.google.gwt.lang.', 'LongLibBase$LongEmul;', 726, Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit), Lcom_google_gwt_lang_SeedUtil_2_classLit = createForClass('com.google.gwt.lang.', 'SeedUtil', 158), Lcom_google_gwt_logging_client_LogConfiguration_2_classLit = createForClass('com.google.gwt.logging.client.', 'LogConfiguration', null), Lcom_google_gwt_logging_client_LogConfiguration$LogConfigurationImplRegular_2_classLit = createForClass('com.google.gwt.logging.client.', 'LogConfiguration$LogConfigurationImplRegular', 176), Lcom_google_gwt_logging_client_LogConfiguration$1_2_classLit = createForClass('com.google.gwt.logging.client.', 'LogConfiguration$1', 175), Ljava_lang_Enum_2_classLit = createForClass('java.lang.', 'Enum', 70), Ljava_lang_Boolean_2_classLit = createForClass('java.lang.', 'Boolean', 288), Ljava_lang_Number_2_classLit = createForClass('java.lang.', 'Number', 290), Ljava_lang_Byte_2_classLit = createForClass('java.lang.', 'Byte', 289), _3Ljava_lang_Byte_2_classLit = createForArray('[Ljava.lang.', 'Byte;', 727, Ljava_lang_Byte_2_classLit), C_classLit = createForPrimitive('char', ' C'), _3C_classLit = createForArray('', '[C', 728, C_classLit), Ljava_lang_Class_2_classLit = createForClass('java.lang.', 'Class', 292), D_classLit = createForPrimitive('double', ' D'), _3D_classLit = createForArray('', '[D', 729, D_classLit), Ljava_lang_Double_2_classLit = createForClass('java.lang.', 'Double', 294), F_classLit = createForPrimitive('float', ' F'), Ljava_lang_Integer_2_classLit = createForClass('java.lang.', 'Integer', 298), _3Ljava_lang_Integer_2_classLit = createForArray('[Ljava.lang.', 'Integer;', 730, Ljava_lang_Integer_2_classLit), Ljava_lang_Long_2_classLit = createForClass('java.lang.', 'Long', 300), _3Ljava_lang_Long_2_classLit = createForArray('[Ljava.lang.', 'Long;', 731, Ljava_lang_Long_2_classLit), S_classLit = createForPrimitive('short', ' S'), Ljava_lang_String_2_classLit = createForClass('java.lang.', 'String', 2), _3Ljava_lang_String_2_classLit = createForArray('[Ljava.lang.', 'String;', 723, Ljava_lang_String_2_classLit), Ljava_lang_ClassCastException_2_classLit = createForClass('java.lang.', 'ClassCastException', 293), Lcom_google_gwt_core_client_JavaScriptException_2_classLit = createForClass('com.google.gwt.core.client.', 'JavaScriptException', 25), Ljava_lang_StringBuilder_2_classLit = createForClass('java.lang.', 'StringBuilder', 308), Ljava_lang_ArrayStoreException_2_classLit = createForClass('java.lang.', 'ArrayStoreException', 287), Lcom_google_gwt_useragent_client_UserAgentImplGecko1_18_2_classLit = createForClass('com.google.gwt.useragent.client.', 'UserAgentImplGecko1_8', 278), Lcom_google_gwt_useragent_client_UserAgentImplSafari_2_classLit = createForClass('com.google.gwt.useragent.client.', 'UserAgentImplSafari', 282), Lcom_google_gwt_useragent_client_UserAgentImplIe10_2_classLit = createForClass('com.google.gwt.useragent.client.', 'UserAgentImplIe10', 279), Lcom_google_gwt_useragent_client_UserAgentImplIe9_2_classLit = createForClass('com.google.gwt.useragent.client.', 'UserAgentImplIe9', 281), Lcom_google_gwt_useragent_client_UserAgentImplIe8_2_classLit = createForClass('com.google.gwt.useragent.client.', 'UserAgentImplIe8', 280), Ljava_util_logging_Logger_2_classLit = createForClass('java.util.logging.', 'Logger', 192), Ljava_lang_NullPointerException_2_classLit = createForClass('java.lang.', 'NullPointerException', 303), Ljava_lang_IllegalArgumentException_2_classLit = createForClass('java.lang.', 'IllegalArgumentException', 295), Ljava_lang_ArithmeticException_2_classLit = createForClass('java.lang.', 'ArithmeticException', 286), Lcom_google_gwt_core_client_impl_StringBufferImpl_2_classLit = createForClass('com.google.gwt.core.client.impl.', 'StringBufferImpl', 45), Lcom_google_gwt_logging_impl_LoggerImplRegular_2_classLit = createForClass('com.google.gwt.logging.impl.', 'LoggerImplRegular', 190), Ljava_util_logging_Handler_2_classLit = createForClass('java.util.logging.', 'Handler', 162), _3Ljava_util_logging_Handler_2_classLit = createForArray('[Ljava.util.logging.', 'Handler;', 732, Ljava_util_logging_Handler_2_classLit), Lcom_google_gwt_user_client_ui_UIObject_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'UIObject', 19), Lcom_google_gwt_user_client_ui_Widget_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'Widget', 18), Lcom_google_gwt_user_client_ui_Composite_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'Composite', 246), Lorg_glob3_mobile_specific_G3MWidget_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'G3MWidget_WebGL', 701), Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit = createForClass('com.google.gwt.core.client.impl.', 'StackTraceCreator$Collector', 41), Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorMoz_2_classLit = createForClass('com.google.gwt.core.client.impl.', 'StackTraceCreator$CollectorMoz', 43), Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorChrome_2_classLit = createForClass('com.google.gwt.core.client.impl.', 'StackTraceCreator$CollectorChrome', 42), Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorChromeNoSourceMap_2_classLit = createForClass('com.google.gwt.core.client.impl.', 'StackTraceCreator$CollectorChromeNoSourceMap', 44), Lcom_google_gwt_core_client_impl_StringBufferImplAppend_2_classLit = createForClass('com.google.gwt.core.client.impl.', 'StringBufferImplAppend', 46), Lcom_google_gwt_core_client_Duration_2_classLit = createForClass('com.google.gwt.core.client.', 'Duration', 23), Lcom_google_gwt_core_client_impl_SchedulerImpl_2_classLit = createForClass('com.google.gwt.core.client.impl.', 'SchedulerImpl', 36), Lcom_google_gwt_core_client_impl_SchedulerImpl$Flusher_2_classLit = createForClass('com.google.gwt.core.client.impl.', 'SchedulerImpl$Flusher', 37), Lcom_google_gwt_core_client_impl_SchedulerImpl$Rescuer_2_classLit = createForClass('com.google.gwt.core.client.impl.', 'SchedulerImpl$Rescuer', 38), Ljava_util_AbstractCollection_2_classLit = createForClass('java.util.', 'AbstractCollection', 145), Ljava_util_AbstractList_2_classLit = createForClass('java.util.', 'AbstractList', 318), Ljava_util_ArrayList_2_classLit = createForClass('java.util.', 'ArrayList', 326), Ljava_util_AbstractList$IteratorImpl_2_classLit = createForClass('java.util.', 'AbstractList$IteratorImpl', 319), Ljava_util_AbstractList$ListIteratorImpl_2_classLit = createForClass('java.util.', 'AbstractList$ListIteratorImpl', 320), Ljava_util_logging_Level_2_classLit = createForClass('java.util.logging.', 'Level', 354), Ljava_util_logging_Level$LevelAll_2_classLit = createForClass('java.util.logging.', 'Level$LevelAll', 355), Ljava_util_logging_Level$LevelConfig_2_classLit = createForClass('java.util.logging.', 'Level$LevelConfig', 356), Ljava_util_logging_Level$LevelFine_2_classLit = createForClass('java.util.logging.', 'Level$LevelFine', 357), Ljava_util_logging_Level$LevelFiner_2_classLit = createForClass('java.util.logging.', 'Level$LevelFiner', 358), Ljava_util_logging_Level$LevelFinest_2_classLit = createForClass('java.util.logging.', 'Level$LevelFinest', 359), Ljava_util_logging_Level$LevelInfo_2_classLit = createForClass('java.util.logging.', 'Level$LevelInfo', 360), Ljava_util_logging_Level$LevelOff_2_classLit = createForClass('java.util.logging.', 'Level$LevelOff', 361), Ljava_util_logging_Level$LevelSevere_2_classLit = createForClass('java.util.logging.', 'Level$LevelSevere', 362), Ljava_util_logging_Level$LevelWarning_2_classLit = createForClass('java.util.logging.', 'Level$LevelWarning', 363), Ljava_util_logging_LogManager_2_classLit = createForClass('java.util.logging.', 'LogManager', 364), Ljava_util_logging_LogManager$RootLogger_2_classLit = createForClass('java.util.logging.', 'LogManager$RootLogger', 365), Lcom_google_gwt_logging_impl_LoggerWithExposedConstructor_2_classLit = createForClass('com.google.gwt.logging.impl.', 'LoggerWithExposedConstructor', 191), Lorg_glob3_mobile_generated_IG3MBuilder_2_classLit = createForClass('org.glob3.mobile.generated.', 'IG3MBuilder', 559), Lorg_glob3_mobile_specific_G3MBuilder_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'G3MBuilder_WebGL', 700), Lorg_glob3_mobile_generated_LayerSet_2_classLit = createForClass('org.glob3.mobile.generated.', 'LayerSet', 593), Lorg_glob3_mobile_generated_DefaultRenderer_2_classLit = createForClass('org.glob3.mobile.generated.', 'DefaultRenderer', 449), Lorg_glob3_mobile_generated_MeshRenderer_2_classLit = createForClass('org.glob3.mobile.generated.', 'MeshRenderer', 611), Lorg_glob3_mobile_generated_Planet_2_classLit = createForClass('org.glob3.mobile.generated.', 'Planet', 461), Lorg_glob3_mobile_generated_Sector_2_classLit = createForClass('org.glob3.mobile.generated.', 'Sector', 647), Lcom_google_gwt_user_client_ui_Panel_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'Panel', 180), Lorg_glob3_mobile_generated_Layer_2_classLit = createForClass('org.glob3.mobile.generated.', 'Layer', 380), Lorg_glob3_mobile_generated_RasterLayer_2_classLit = createForClass('org.glob3.mobile.generated.', 'RasterLayer', 379), Lorg_glob3_mobile_generated_BingMapsLayer_2_classLit = createForClass('org.glob3.mobile.generated.', 'BingMapsLayer', 378), Lorg_glob3_mobile_generated_TimeInterval_2_classLit = createForClass('org.glob3.mobile.generated.', 'TimeInterval', 672), Lorg_glob3_mobile_generated_SphericalPlanet_2_classLit = createForClass('org.glob3.mobile.generated.', 'SphericalPlanet', 657), Lorg_glob3_mobile_generated_PlanetRendererBuilder_2_classLit = createForClass('org.glob3.mobile.generated.', 'PlanetRendererBuilder', 627), Lorg_glob3_mobile_generated_ElevationDataProvider_2_classLit = createForClass('org.glob3.mobile.generated.', 'ElevationDataProvider', 458), Lorg_glob3_mobile_generated_PyramidElevationDataProvider_2_classLit = createForClass('org.glob3.mobile.generated.', 'PyramidElevationDataProvider', 635), Lorg_glob3_mobile_generated_PyramidElevationDataProvider$PyramidComposition_2_classLit = createForClass('org.glob3.mobile.generated.', 'PyramidElevationDataProvider$PyramidComposition', 637), Lorg_glob3_mobile_generated_IBufferDownloadListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'IBufferDownloadListener', 382), Lorg_glob3_mobile_generated_PyramidElevationDataProvider$MetadataListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'PyramidElevationDataProvider$MetadataListener', 636), Lcom_google_gwt_user_client_ui_ComplexPanel_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'ComplexPanel', 239), Lcom_google_gwt_user_client_ui_AbsolutePanel_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'AbsolutePanel', 238), Lcom_google_gwt_user_client_ui_RootPanel_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'RootPanel', 260), Lcom_google_gwt_user_client_ui_RootPanel$DefaultRootPanel_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'RootPanel$DefaultRootPanel', 263), Lcom_google_gwt_user_client_ui_RootPanel$1_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'RootPanel$1', 261), Lcom_google_gwt_user_client_ui_RootPanel$3_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'RootPanel$3', 262), Lcom_google_web_bindery_event_shared_UmbrellaException_2_classLit = createForClass('com.google.web.bindery.event.shared.', 'UmbrellaException', 131), Lcom_google_gwt_event_shared_UmbrellaException_2_classLit = createForClass('com.google.gwt.event.shared.', 'UmbrellaException', 130), Lcom_google_gwt_user_client_ui_AttachDetachException_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'AttachDetachException', 240), Lcom_google_gwt_user_client_ui_AttachDetachException$1_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'AttachDetachException$1', 241), Lcom_google_gwt_user_client_ui_AttachDetachException$2_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'AttachDetachException$2', 242), Lorg_glob3_mobile_generated_Angle_2_classLit = createForClass('org.glob3.mobile.generated.', 'Angle', 372), Lorg_glob3_mobile_generated_Geodetic3D_2_classLit = createForClass('org.glob3.mobile.generated.', 'Geodetic3D', 541), Lorg_glob3_mobile_generated_Camera_2_classLit = createForClass('org.glob3.mobile.generated.', 'Camera', 393), Lorg_glob3_mobile_generated_Camera$CameraEffectTarget_2_classLit = createForClass('org.glob3.mobile.generated.', 'Camera$CameraEffectTarget', 394), Ljava_util_logging_LogRecord_2_classLit = createForClass('java.util.logging.', 'LogRecord', 366), Lcom_google_web_bindery_event_shared_Event_2_classLit = createForClass('com.google.web.bindery.event.shared.', 'Event', 106), Lcom_google_gwt_event_shared_GwtEvent_2_classLit = createForClass('com.google.gwt.event.shared.', 'GwtEvent', 105), Lcom_google_gwt_user_client_Window$ClosingEvent_2_classLit = createForClass('com.google.gwt.user.client.', 'Window$ClosingEvent', 216), Lcom_google_gwt_event_shared_HandlerManager_2_classLit = createForClass('com.google.gwt.event.shared.', 'HandlerManager', 125), Lcom_google_gwt_user_client_Window$WindowHandlers_2_classLit = createForClass('com.google.gwt.user.client.', 'Window$WindowHandlers', 218), Lcom_google_web_bindery_event_shared_Event$Type_2_classLit = createForClass('com.google.web.bindery.event.shared.', 'Event$Type', 109), Lcom_google_gwt_event_shared_GwtEvent$Type_2_classLit = createForClass('com.google.gwt.event.shared.', 'GwtEvent$Type', 108), Lcom_google_web_bindery_event_shared_EventBus_2_classLit = createForClass('com.google.web.bindery.event.shared.', 'EventBus', 128), Lcom_google_web_bindery_event_shared_SimpleEventBus_2_classLit = createForClass('com.google.web.bindery.event.shared.', 'SimpleEventBus', 127), Lcom_google_gwt_event_shared_HandlerManager$Bus_2_classLit = createForClass('com.google.gwt.event.shared.', 'HandlerManager$Bus', 126), Lcom_google_web_bindery_event_shared_SimpleEventBus$1_2_classLit = createForClass('com.google.web.bindery.event.shared.', 'SimpleEventBus$1', 283), Lcom_google_web_bindery_event_shared_SimpleEventBus$2_2_classLit = createForClass('com.google.web.bindery.event.shared.', 'SimpleEventBus$2', 284), Lcom_google_web_bindery_event_shared_SimpleEventBus$3_2_classLit = createForClass('com.google.web.bindery.event.shared.', 'SimpleEventBus$3', 285), Lcom_google_gwt_logging_client_ConsoleLogHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'ConsoleLogHandler', 161), Lcom_google_gwt_logging_client_DevelopmentModeLogHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'DevelopmentModeLogHandler', 163), Lcom_google_gwt_logging_client_FirebugLogHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'FirebugLogHandler', 164), Lcom_google_gwt_logging_client_SystemLogHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'SystemLogHandler', 188), Lcom_google_gwt_logging_client_NullLogHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'NullLogHandler', 187), Lcom_google_gwt_user_client_ui_SimplePanel_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'SimplePanel', 179), Lcom_google_gwt_user_client_ui_PopupPanel_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'PopupPanel', 178), Lcom_google_gwt_logging_client_LoggingPopup_2_classLit = createForClass('com.google.gwt.logging.client.', 'LoggingPopup', 177), Lcom_google_gwt_logging_client_LoggingPopup$MouseDragHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'LoggingPopup$MouseDragHandler', 182), Lcom_google_gwt_user_client_ui_ScrollPanel_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'ScrollPanel', 184), Lcom_google_gwt_logging_client_LoggingPopup$ScrollPanelWithMinSize_2_classLit = createForClass('com.google.gwt.logging.client.', 'LoggingPopup$ScrollPanelWithMinSize', 183), Lcom_google_gwt_logging_client_LoggingPopup$WindowMoveHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'LoggingPopup$WindowMoveHandler', 185), Lcom_google_gwt_logging_client_LoggingPopup$WindowResizeHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'LoggingPopup$WindowResizeHandler', 186), Lcom_google_gwt_logging_client_LoggingPopup$1_2_classLit = createForClass('com.google.gwt.logging.client.', 'LoggingPopup$1', 181), Lcom_google_gwt_animation_client_Animation_2_classLit = createForClass('com.google.gwt.animation.client.', 'Animation', 3), Lcom_google_gwt_user_client_ui_PopupPanel$ResizeAnimation_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'PopupPanel$ResizeAnimation', 258), Lcom_google_gwt_user_client_Timer_2_classLit = createForClass('com.google.gwt.user.client.', 'Timer', 12), Lcom_google_gwt_user_client_ui_PopupPanel$1_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'PopupPanel$1', 255), Lcom_google_gwt_user_client_ui_PopupPanel$3_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'PopupPanel$3', 256), Lcom_google_gwt_user_client_ui_PopupPanel$4_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'PopupPanel$4', 257), Lcom_google_gwt_user_client_ui_SimplePanel$1_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'SimplePanel$1', 266), Lcom_google_gwt_animation_client_Animation$1_2_classLit = createForClass('com.google.gwt.animation.client.', 'Animation$1', 4), Lcom_google_gwt_animation_client_AnimationScheduler_2_classLit = createForClass('com.google.gwt.animation.client.', 'AnimationScheduler', 5), Lcom_google_gwt_animation_client_AnimationScheduler$AnimationHandle_2_classLit = createForClass('com.google.gwt.animation.client.', 'AnimationScheduler$AnimationHandle', 6), Lcom_google_gwt_user_client_Event$NativePreviewEvent_2_classLit = createForClass('com.google.gwt.user.client.', 'Event$NativePreviewEvent', 213), Lcom_google_gwt_logging_client_HasWidgetsLogHandler_2_classLit = createForClass('com.google.gwt.logging.client.', 'HasWidgetsLogHandler', 165), Ljava_lang_StringBuffer_2_classLit = createForClass('java.lang.', 'StringBuffer', 307), Ljava_util_AbstractMap_2_classLit = createForClass('java.util.', 'AbstractMap', 312), Ljava_util_AbstractHashMap_2_classLit = createForClass('java.util.', 'AbstractHashMap', 311), Ljava_util_AbstractSet_2_classLit = createForClass('java.util.', 'AbstractSet', 144), Ljava_util_AbstractHashMap$EntrySet_2_classLit = createForClass('java.util.', 'AbstractHashMap$EntrySet', 313), Ljava_util_AbstractHashMap$EntrySetIterator_2_classLit = createForClass('java.util.', 'AbstractHashMap$EntrySetIterator', 314), Ljava_util_AbstractMapEntry_2_classLit = createForClass('java.util.', 'AbstractMapEntry', 316), Ljava_util_AbstractHashMap$MapEntryNull_2_classLit = createForClass('java.util.', 'AbstractHashMap$MapEntryNull', 315), Ljava_util_AbstractHashMap$MapEntryString_2_classLit = createForClass('java.util.', 'AbstractHashMap$MapEntryString', 317), Ljava_util_AbstractMap$1_2_classLit = createForClass('java.util.', 'AbstractMap$1', 321), Ljava_util_AbstractMap$1$1_2_classLit = createForClass('java.util.', 'AbstractMap$1$1', 322), Ljava_util_AbstractMap$2_2_classLit = createForClass('java.util.', 'AbstractMap$2', 323), Ljava_util_AbstractMap$2$1_2_classLit = createForClass('java.util.', 'AbstractMap$2$1', 324), Ljava_util_HashMap_2_classLit = createForClass('java.util.', 'HashMap', 345), Lorg_glob3_mobile_generated_G3MContext_2_classLit = createForClass('org.glob3.mobile.generated.', 'G3MContext', 473), Lorg_glob3_mobile_generated_RCObject_2_classLit = createForClass('org.glob3.mobile.generated.', 'RCObject', 413), Lorg_glob3_mobile_generated_TileImageProvider_2_classLit = createForClass('org.glob3.mobile.generated.', 'TileImageProvider', 412), Lorg_glob3_mobile_generated_GLState_2_classLit = createForClass('org.glob3.mobile.generated.', 'GLState', 497), Lorg_glob3_mobile_generated_ILogger_2_classLit = createForClass('org.glob3.mobile.generated.', 'ILogger', 563), Lorg_glob3_mobile_generated_BoundingVolume_2_classLit = createForClass('org.glob3.mobile.generated.', 'BoundingVolume', 383), Lorg_glob3_mobile_generated_Sphere_2_classLit = createForClass('org.glob3.mobile.generated.', 'Sphere', 656), Lorg_glob3_mobile_generated_Vector3D_2_classLit = createForClass('org.glob3.mobile.generated.', 'Vector3D', 685), Lorg_glob3_mobile_generated_Geodetic2D_2_classLit = createForClass('org.glob3.mobile.generated.', 'Geodetic2D', 540), Lorg_glob3_mobile_generated_FloatBufferBuilder_2_classLit = createForClass('org.glob3.mobile.generated.', 'FloatBufferBuilder', 464), Lorg_glob3_mobile_generated_FloatBufferBuilderFromGeodetic_2_classLit = createForClass('org.glob3.mobile.generated.', 'FloatBufferBuilderFromGeodetic', 469), Lorg_glob3_mobile_generated_FloatBufferBuilder$FloatArrayList_2_classLit = createForClass('org.glob3.mobile.generated.', 'FloatBufferBuilder$FloatArrayList', 465), _3F_classLit = createForArray('', '[F', 733, F_classLit), Lorg_glob3_mobile_generated_Mesh_2_classLit = createForClass('org.glob3.mobile.generated.', 'Mesh', 369), Lorg_glob3_mobile_generated_AbstractMesh_2_classLit = createForClass('org.glob3.mobile.generated.', 'AbstractMesh', 371), Lorg_glob3_mobile_generated_DirectMesh_2_classLit = createForClass('org.glob3.mobile.generated.', 'DirectMesh', 452), Lorg_glob3_mobile_generated_IFloatBuffer_2_classLit = createForClass('org.glob3.mobile.generated.', 'IFloatBuffer', 558), Lorg_glob3_mobile_generated_Color_2_classLit = createForClass('org.glob3.mobile.generated.', 'Color', 415), Lorg_glob3_mobile_generated_GPUProgramFactory_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUProgramFactory', 375), Lorg_glob3_mobile_generated_BasicShadersGL2_2_classLit = createForClass('org.glob3.mobile.generated.', 'BasicShadersGL2', 374), Lorg_glob3_mobile_generated_GPUProgramSources_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUProgramSources', 516), Lorg_glob3_mobile_generated_GL_2_classLit = createForClass('org.glob3.mobile.generated.', 'GL', 479), Lorg_glob3_mobile_generated_G3MWidget_2_classLit = createForClass('org.glob3.mobile.generated.', 'G3MWidget', 476), Ljava_util_HashSet_2_classLit = createForClass('java.util.', 'HashSet', 346), Lcom_google_gwt_i18n_client_HasDirection$Direction_2_classLit = createForEnum('com.google.gwt.i18n.client.', 'HasDirection$Direction', 135, values_5), _3Lcom_google_gwt_i18n_client_HasDirection$Direction_2_classLit = createForArray('[Lcom.google.gwt.i18n.client.', 'HasDirection$Direction;', 734, Lcom_google_gwt_i18n_client_HasDirection$Direction_2_classLit), Ljava_lang_UnsupportedOperationException_2_classLit = createForClass('java.lang.', 'UnsupportedOperationException', 310), Lorg_glob3_mobile_generated_TaitBryanAngles_2_classLit = createForClass('org.glob3.mobile.generated.', 'TaitBryanAngles', 658), Ljava_util_Date_2_classLit = createForClass('java.util.', 'Date', 343), Lcom_google_gwt_core_shared_SerializableThrowable_2_classLit = createForClass('com.google.gwt.core.shared.', 'SerializableThrowable', 48), Ljava_util_logging_Formatter_2_classLit = createForClass('java.util.logging.', 'Formatter', 168), Lcom_google_gwt_logging_impl_FormatterImpl_2_classLit = createForClass('com.google.gwt.logging.impl.', 'FormatterImpl', 167), Lcom_google_gwt_logging_client_TextLogFormatter_2_classLit = createForClass('com.google.gwt.logging.client.', 'TextLogFormatter', 189), Ljava_io_OutputStream_2_classLit = createForClass('java.io.', 'OutputStream', 173), Ljava_io_FilterOutputStream_2_classLit = createForClass('java.io.', 'FilterOutputStream', 172), Ljava_io_PrintStream_2_classLit = createForClass('java.io.', 'PrintStream', 171), Lcom_google_gwt_logging_impl_StackTracePrintStream_2_classLit = createForClass('com.google.gwt.logging.impl.', 'StackTracePrintStream', 170), Lcom_google_gwt_user_client_ui_CellPanel_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'CellPanel', 245), Lcom_google_gwt_user_client_ui_VerticalPanel_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'VerticalPanel', 267), Lcom_google_gwt_user_client_ui_HasHorizontalAlignment$AutoHorizontalAlignmentConstant_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'HasHorizontalAlignment$AutoHorizontalAlignmentConstant', 251), Lcom_google_gwt_user_client_ui_HasHorizontalAlignment$HorizontalAlignmentConstant_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'HasHorizontalAlignment$HorizontalAlignmentConstant', 252), Lcom_google_gwt_user_client_ui_HasVerticalAlignment$VerticalAlignmentConstant_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'HasVerticalAlignment$VerticalAlignmentConstant', 253), Lcom_google_gwt_user_client_ui_LabelBase_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'LabelBase', 250), Lcom_google_gwt_user_client_ui_Label_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'Label', 249), Lcom_google_gwt_user_client_ui_HTML_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'HTML', 248), Lcom_google_gwt_user_client_ui_HorizontalPanel_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'HorizontalPanel', 254), Lcom_google_gwt_user_client_ui_FocusWidget_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'FocusWidget', 17), Lcom_google_gwt_user_client_ui_ButtonBase_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'ButtonBase', 244), Lcom_google_gwt_user_client_ui_Button_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'Button', 243), Lcom_google_gwt_dom_client_Style$Unit_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Unit', 90, values_4), _3Lcom_google_gwt_dom_client_Style$Unit_2_classLit = createForArray('[Lcom.google.gwt.dom.client.', 'Style$Unit;', 735, Lcom_google_gwt_dom_client_Style$Unit_2_classLit), Lcom_google_gwt_dom_client_Style$Display_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Display', 69, values_0), _3Lcom_google_gwt_dom_client_Style$Display_2_classLit = createForArray('[Lcom.google.gwt.dom.client.', 'Style$Display;', 736, Lcom_google_gwt_dom_client_Style$Display_2_classLit), Lcom_google_gwt_dom_client_Style$Overflow_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Overflow', 75, values_1), _3Lcom_google_gwt_dom_client_Style$Overflow_2_classLit = createForArray('[Lcom.google.gwt.dom.client.', 'Style$Overflow;', 737, Lcom_google_gwt_dom_client_Style$Overflow_2_classLit), Lcom_google_gwt_dom_client_Style$Position_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Position', 80, values_2), _3Lcom_google_gwt_dom_client_Style$Position_2_classLit = createForArray('[Lcom.google.gwt.dom.client.', 'Style$Position;', 738, Lcom_google_gwt_dom_client_Style$Position_2_classLit), Lcom_google_gwt_dom_client_Style$TextAlign_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$TextAlign', 85, values_3), _3Lcom_google_gwt_dom_client_Style$TextAlign_2_classLit = createForArray('[Lcom.google.gwt.dom.client.', 'Style$TextAlign;', 739, Lcom_google_gwt_dom_client_Style$TextAlign_2_classLit), Lcom_google_gwt_dom_client_Style$Unit$1_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Unit$1', 91, null), Lcom_google_gwt_dom_client_Style$Unit$2_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Unit$2', 92, null), Lcom_google_gwt_dom_client_Style$Unit$3_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Unit$3', 93, null), Lcom_google_gwt_dom_client_Style$Unit$4_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Unit$4', 94, null), Lcom_google_gwt_dom_client_Style$Unit$5_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Unit$5', 95, null), Lcom_google_gwt_dom_client_Style$Unit$6_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Unit$6', 96, null), Lcom_google_gwt_dom_client_Style$Unit$7_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Unit$7', 97, null), Lcom_google_gwt_dom_client_Style$Unit$8_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Unit$8', 98, null), Lcom_google_gwt_dom_client_Style$Unit$9_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Unit$9', 99, null), Lcom_google_gwt_dom_client_Style$Display$1_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Display$1', 71, null), Lcom_google_gwt_dom_client_Style$Display$2_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Display$2', 72, null), Lcom_google_gwt_dom_client_Style$Display$3_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Display$3', 73, null), Lcom_google_gwt_dom_client_Style$Display$4_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Display$4', 74, null), Lcom_google_gwt_dom_client_Style$Overflow$1_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Overflow$1', 76, null), Lcom_google_gwt_dom_client_Style$Overflow$2_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Overflow$2', 77, null), Lcom_google_gwt_dom_client_Style$Overflow$3_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Overflow$3', 78, null), Lcom_google_gwt_dom_client_Style$Overflow$4_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Overflow$4', 79, null), Lcom_google_gwt_dom_client_Style$Position$1_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Position$1', 81, null), Lcom_google_gwt_dom_client_Style$Position$2_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Position$2', 82, null), Lcom_google_gwt_dom_client_Style$Position$3_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Position$3', 83, null), Lcom_google_gwt_dom_client_Style$Position$4_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$Position$4', 84, null), Lcom_google_gwt_dom_client_Style$TextAlign$1_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$TextAlign$1', 86, null), Lcom_google_gwt_dom_client_Style$TextAlign$2_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$TextAlign$2', 87, null), Lcom_google_gwt_dom_client_Style$TextAlign$3_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$TextAlign$3', 88, null), Lcom_google_gwt_dom_client_Style$TextAlign$4_2_classLit = createForEnum('com.google.gwt.dom.client.', 'Style$TextAlign$4', 89, null), Lcom_google_gwt_logging_client_HtmlLogFormatter_2_classLit = createForClass('com.google.gwt.logging.client.', 'HtmlLogFormatter', 166), Lcom_google_gwt_logging_client_HtmlLogFormatter$1_2_classLit = createForClass('com.google.gwt.logging.client.', 'HtmlLogFormatter$1', 169), Lorg_glob3_mobile_generated_INativeGL_2_classLit = createForClass('org.glob3.mobile.generated.', 'INativeGL', 565), Lcom_google_gwt_canvas_client_Canvas_2_classLit = createForClass('com.google.gwt.canvas.client.', 'Canvas', 16), Lcom_google_gwt_canvas_client_Canvas$CanvasElementSupportDetector_2_classLit = createForClass('com.google.gwt.canvas.client.', 'Canvas$CanvasElementSupportDetector', 21), Lcom_google_gwt_canvas_client_Canvas$CanvasElementSupportDetectedMaybe_2_classLit = createForClass('com.google.gwt.canvas.client.', 'Canvas$CanvasElementSupportDetectedMaybe', 20), Lcom_google_gwt_canvas_client_Canvas$CanvasElementSupportDetectedNo_2_classLit = createForClass('com.google.gwt.canvas.client.', 'Canvas$CanvasElementSupportDetectedNo', 22), Lorg_glob3_mobile_specific_NativeGL_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'NativeGL_WebGL', 711), Lorg_glob3_mobile_generated_LayerTilesRenderParameters_2_classLit = createForClass('org.glob3.mobile.generated.', 'LayerTilesRenderParameters', 594), Lorg_glob3_mobile_generated_URL_2_classLit = createForClass('org.glob3.mobile.generated.', 'URL', 680), Lorg_glob3_mobile_generated_IDownloader_2_classLit = createForClass('org.glob3.mobile.generated.', 'IDownloader', 556), Lorg_glob3_mobile_generated_BingMapsLayer_1MetadataBufferDownloadListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'BingMapsLayer_MetadataBufferDownloadListener', 381), Lorg_glob3_mobile_generated_Info_2_classLit = createForClass('org.glob3.mobile.generated.', 'Info', 576), Lorg_glob3_mobile_generated_GPUVariable_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUVariable', 504), Lorg_glob3_mobile_generated_GPUUniform_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniform', 517), _3Lorg_glob3_mobile_generated_GPUUniform_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'GPUUniform;', 740, Lorg_glob3_mobile_generated_GPUUniform_2_classLit), Lorg_glob3_mobile_generated_GPUAttribute_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUAttribute', 503), _3Lorg_glob3_mobile_generated_GPUAttribute_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'GPUAttribute;', 741, Lorg_glob3_mobile_generated_GPUAttribute_2_classLit), Lorg_glob3_mobile_generated_GPUProgram_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUProgram', 514), Lorg_glob3_mobile_generated_GPUUniformValue_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformValue', 523), _3Lorg_glob3_mobile_generated_GPUUniformValue_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'GPUUniformValue;', 742, Lorg_glob3_mobile_generated_GPUUniformValue_2_classLit), Lorg_glob3_mobile_generated_GPUAttributeValue_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUAttributeValue', 506), _3Lorg_glob3_mobile_generated_GPUAttributeValue_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'GPUAttributeValue;', 743, Lorg_glob3_mobile_generated_GPUAttributeValue_2_classLit), Lorg_glob3_mobile_generated_GPUVariableValueSet_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUVariableValueSet', 537), Lorg_glob3_mobile_generated_IGLTextureId_2_classLit = createForInterface('org.glob3.mobile.generated.', 'IGLTextureId'), _3Lorg_glob3_mobile_generated_IGLTextureId_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'IGLTextureId;', 744, Lorg_glob3_mobile_generated_IGLTextureId_2_classLit), Lorg_glob3_mobile_generated_GLGlobalState_2_classLit = createForClass('org.glob3.mobile.generated.', 'GLGlobalState', 494), Lorg_glob3_mobile_generated_GLFeature_2_classLit = createForClass('org.glob3.mobile.generated.', 'GLFeature', 419), _3Lorg_glob3_mobile_generated_GLFeature_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'GLFeature;', 745, Lorg_glob3_mobile_generated_GLFeature_2_classLit), Lorg_glob3_mobile_generated_GLFeatureSet_2_classLit = createForClass('org.glob3.mobile.generated.', 'GLFeatureSet', 492), Lorg_glob3_mobile_generated_Quality_2_classLit = createForEnum('org.glob3.mobile.generated.', 'Quality', 639, values_12), _3Lorg_glob3_mobile_generated_Quality_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'Quality;', 746, Lorg_glob3_mobile_generated_Quality_2_classLit), Lorg_glob3_mobile_generated_TilesRenderParameters_2_classLit = createForClass('org.glob3.mobile.generated.', 'TilesRenderParameters', 670), Lorg_glob3_mobile_generated_TileTexturizer_2_classLit = createForClass('org.glob3.mobile.generated.', 'TileTexturizer', 451), Lorg_glob3_mobile_generated_TileTessellator_2_classLit = createForClass('org.glob3.mobile.generated.', 'TileTessellator', 629), Lorg_glob3_mobile_generated_TouchEventType_2_classLit = createForEnum('org.glob3.mobile.generated.', 'TouchEventType', 679, values_14), _3Lorg_glob3_mobile_generated_TouchEventType_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'TouchEventType;', 747, Lorg_glob3_mobile_generated_TouchEventType_2_classLit), Lorg_glob3_mobile_generated_TileLODTester_2_classLit = createForClass('org.glob3.mobile.generated.', 'TileLODTester', 445), Lorg_glob3_mobile_generated_TileVisibilityTester_2_classLit = createForClass('org.glob3.mobile.generated.', 'TileVisibilityTester', 447), Lorg_glob3_mobile_generated_IFactory_2_classLit = createForClass('org.glob3.mobile.generated.', 'IFactory', 557), Lorg_glob3_mobile_generated_CompositeRenderer_2_classLit = createForClass('org.glob3.mobile.generated.', 'CompositeRenderer', 423), Lorg_glob3_mobile_generated_PlanetRenderer_2_classLit = createForClass('org.glob3.mobile.generated.', 'PlanetRenderer', 625), Lorg_glob3_mobile_generated_PlanetRenderer$1_2_classLit = createForClass('org.glob3.mobile.generated.', 'PlanetRenderer$1', 626), Lorg_glob3_mobile_generated_RenderedSectorCameraConstrainer_2_classLit = createForClass('org.glob3.mobile.generated.', 'RenderedSectorCameraConstrainer', 645), Lorg_glob3_mobile_generated_IThreadUtils_2_classLit = createForClass('org.glob3.mobile.generated.', 'IThreadUtils', 570), Lorg_glob3_mobile_generated_CameraRenderer_2_classLit = createForClass('org.glob3.mobile.generated.', 'CameraRenderer', 404), Lorg_glob3_mobile_generated_GTask_2_classLit = createForClass('org.glob3.mobile.generated.', 'GTask', 538), Lorg_glob3_mobile_generated_GPUProgramManager_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUProgramManager', 515), Lorg_glob3_mobile_generated_SceneLighting_2_classLit = createForClass('org.glob3.mobile.generated.', 'SceneLighting', 401), Lorg_glob3_mobile_specific_MotionEventProcessor_2_classLit = createForClass('org.glob3.mobile.specific.', 'MotionEventProcessor', 709), Lorg_glob3_mobile_generated_TouchEvent_2_classLit = createForClass('org.glob3.mobile.generated.', 'TouchEvent', 678), _3Lorg_glob3_mobile_generated_TouchEvent_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'TouchEvent;', 748, Lorg_glob3_mobile_generated_TouchEvent_2_classLit), Lorg_glob3_mobile_specific_MotionEventProcessor$1_2_classLit = createForClass('org.glob3.mobile.specific.', 'MotionEventProcessor$1', 710), Lorg_glob3_mobile_generated_EffectsScheduler_2_classLit = createForClass('org.glob3.mobile.generated.', 'EffectsScheduler', 456), Lorg_glob3_mobile_generated_EffectsScheduler$EffectRun_2_classLit = createForClass('org.glob3.mobile.generated.', 'EffectsScheduler$EffectRun', 457), Lorg_glob3_mobile_generated_MutableVector3D_2_classLit = createForClass('org.glob3.mobile.generated.', 'MutableVector3D', 621), Lorg_glob3_mobile_generated_CoordinateSystem_2_classLit = createForClass('org.glob3.mobile.generated.', 'CoordinateSystem', 435), Lcom_google_gwt_event_dom_client_DomEvent_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'DomEvent', 104), Lcom_google_gwt_event_dom_client_HumanInputEvent_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'HumanInputEvent', 103), Lcom_google_gwt_event_dom_client_MouseEvent_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'MouseEvent', 102), Lcom_google_gwt_event_dom_client_ClickEvent_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'ClickEvent', 101), Lcom_google_gwt_event_dom_client_DomEvent$Type_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'DomEvent$Type', 107), Ljava_lang_IllegalStateException_2_classLit = createForClass('java.lang.', 'IllegalStateException', 296), Lcom_google_gwt_user_client_ui_impl_PopupImpl_2_classLit = createForClass('com.google.gwt.user.client.ui.impl.', 'PopupImpl', 274), Lcom_google_gwt_user_client_ui_impl_PopupImplMozilla_2_classLit = createForClass('com.google.gwt.user.client.ui.impl.', 'PopupImplMozilla', 275), Lcom_google_gwt_user_client_ui_impl_PopupImplMozilla$1_2_classLit = createForClass('com.google.gwt.user.client.ui.impl.', 'PopupImplMozilla$1', 276), Lorg_glob3_mobile_generated_IStringUtils_2_classLit = createForClass('org.glob3.mobile.generated.', 'IStringUtils', 568), Lorg_glob3_mobile_generated_IStringBuilder_2_classLit = createForClass('org.glob3.mobile.generated.', 'IStringBuilder', 567), Lorg_glob3_mobile_generated_IMathUtils_2_classLit = createForClass('org.glob3.mobile.generated.', 'IMathUtils', 564), Lorg_glob3_mobile_generated_IJSONParser_2_classLit = createForClass('org.glob3.mobile.generated.', 'IJSONParser', 562), Lorg_glob3_mobile_generated_ITextUtils_2_classLit = createForClass('org.glob3.mobile.generated.', 'ITextUtils', 569), Lorg_glob3_mobile_generated_IDeviceAttitude_2_classLit = createForClass('org.glob3.mobile.generated.', 'IDeviceAttitude', 553), Lorg_glob3_mobile_generated_IDeviceLocation_2_classLit = createForClass('org.glob3.mobile.generated.', 'IDeviceLocation', 555), Lorg_glob3_mobile_specific_Logger_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'Logger_WebGL', 707), Lorg_glob3_mobile_specific_Factory_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'Factory_WebGL', 698), Lorg_glob3_mobile_specific_StringUtils_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'StringUtils_WebGL', 714), Lorg_glob3_mobile_specific_StringBuilder_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'StringBuilder_WebGL', 713), Lorg_glob3_mobile_specific_MathUtils_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'MathUtils_WebGL', 708), Lorg_glob3_mobile_specific_JSONParser_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'JSONParser_WebGL', 705), Lorg_glob3_mobile_specific_TextUtils_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'TextUtils_WebGL', 715), Lorg_glob3_mobile_specific_DeviceAttitude_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'DeviceAttitude_WebGL', 691), Lorg_glob3_mobile_specific_DeviceLocation_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'DeviceLocation_WebGL', 693), Lcom_google_gwt_user_client_ui_impl_FocusImpl_2_classLit = createForClass('com.google.gwt.user.client.ui.impl.', 'FocusImpl', 270), Lorg_glob3_mobile_generated_RasterLayerTileImageProvider_2_classLit = createForClass('org.glob3.mobile.generated.', 'RasterLayerTileImageProvider', 641), Lorg_glob3_mobile_generated_ChildRenderer_2_classLit = createForClass('org.glob3.mobile.generated.', 'ChildRenderer', 414), Lorg_glob3_mobile_generated_EllipsoidalPlanet_2_classLit = createForClass('org.glob3.mobile.generated.', 'EllipsoidalPlanet', 460), Lorg_glob3_mobile_generated_BusyMeshRenderer_2_classLit = createForClass('org.glob3.mobile.generated.', 'BusyMeshRenderer', 390), Lorg_glob3_mobile_generated_HUDErrorRenderer_2_classLit = createForClass('org.glob3.mobile.generated.', 'HUDErrorRenderer', 545), Lorg_glob3_mobile_generated_CameraFocusSceneLighting_2_classLit = createForClass('org.glob3.mobile.generated.', 'CameraFocusSceneLighting', 400), Lorg_glob3_mobile_generated_MutableMatrix44D_2_classLit = createForClass('org.glob3.mobile.generated.', 'MutableMatrix44D', 618), Lcom_google_gwt_user_client_impl_DOMImpl_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'DOMImpl', 219), Lcom_google_gwt_user_client_impl_DOMImpl$1_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'DOMImpl$1', 220), Lcom_google_gwt_user_client_impl_DOMImplTrident_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'DOMImplTrident', 222), Lcom_google_gwt_user_client_impl_DOMImplIE8_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'DOMImplIE8', 221), Lcom_google_gwt_user_client_impl_DOMImplStandard_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'DOMImplStandard', 225), Lcom_google_gwt_user_client_impl_DOMImplMozilla_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'DOMImplMozilla', 226), Lcom_google_gwt_user_client_impl_DOMImplStandardBase_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'DOMImplStandardBase', 224), Lcom_google_gwt_user_client_impl_DOMImplIE9_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'DOMImplIE9', 223), Lcom_google_gwt_user_client_impl_DOMImplWebkit_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'DOMImplWebkit', 227), Lcom_google_gwt_user_client_impl_WindowImpl_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'WindowImpl', 233), Lcom_google_gwt_user_client_impl_WindowImplIE_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'WindowImplIE', 234), Lcom_google_gwt_user_client_impl_WindowImplIE$1_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'WindowImplIE$1', 235), Lcom_google_gwt_user_client_impl_WindowImplIE$2_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'WindowImplIE$2', 236), Lcom_google_gwt_user_client_impl_WindowImplMozilla_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'WindowImplMozilla', 237), Lcom_google_gwt_event_logical_shared_CloseEvent_2_classLit = createForClass('com.google.gwt.event.logical.shared.', 'CloseEvent', 122), Lcom_google_gwt_user_client_ui_WidgetCollection_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'WidgetCollection', 268), _3Lcom_google_gwt_user_client_ui_Widget_2_classLit = createForArray('[Lcom.google.gwt.user.client.ui.', 'Widget;', 749, Lcom_google_gwt_user_client_ui_Widget_2_classLit), Lcom_google_gwt_user_client_ui_WidgetCollection$WidgetIterator_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'WidgetCollection$WidgetIterator', 269), Lcom_google_gwt_event_logical_shared_AttachEvent_2_classLit = createForClass('com.google.gwt.event.logical.shared.', 'AttachEvent', 121), Lorg_glob3_mobile_generated_ITimer_2_classLit = createForClass('org.glob3.mobile.generated.', 'ITimer', 573), Lorg_glob3_mobile_generated_Effect_2_classLit = createForClass('org.glob3.mobile.generated.', 'Effect', 389), Ljava_util_Collections$EmptyList_2_classLit = createForClass('java.util.', 'Collections$EmptyList', 330), Ljava_util_Collections$UnmodifiableCollection_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableCollection', 331), Ljava_util_Collections$UnmodifiableList_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableList', 333), Ljava_util_Collections$UnmodifiableMap_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableMap', 335), Ljava_util_Collections$UnmodifiableSet_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableSet', 337), Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableMap$UnmodifiableEntrySet', 336), Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry', 339), Ljava_util_Collections$UnmodifiableRandomAccessList_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableRandomAccessList', 340), Ljava_util_Collections$UnmodifiableCollectionIterator_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableCollectionIterator', 332), Ljava_util_Collections$UnmodifiableListIterator_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableListIterator', 334), Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet$1_2_classLit = createForClass('java.util.', 'Collections$UnmodifiableMap$UnmodifiableEntrySet$1', 338), Lcom_google_gwt_user_client_ui_DirectionalTextHelper_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'DirectionalTextHelper', 247), Lcom_google_gwt_dom_client_DOMImpl_2_classLit = createForClass('com.google.gwt.dom.client.', 'DOMImpl', 54), Ljava_util_NoSuchElementException_2_classLit = createForClass('java.util.', 'NoSuchElementException', 351), Ljava_util_MapEntryImpl_2_classLit = createForClass('java.util.', 'MapEntryImpl', 350), Lcom_google_gwt_user_client_ui_impl_FocusImplStandard_2_classLit = createForClass('com.google.gwt.user.client.ui.impl.', 'FocusImplStandard', 273), Lcom_google_gwt_user_client_ui_impl_FocusImplIE6_2_classLit = createForClass('com.google.gwt.user.client.ui.impl.', 'FocusImplIE6', 271), Lcom_google_gwt_user_client_ui_impl_FocusImplSafari_2_classLit = createForClass('com.google.gwt.user.client.ui.impl.', 'FocusImplSafari', 272), Lorg_glob3_mobile_generated_G3MEventContext_2_classLit = createForClass('org.glob3.mobile.generated.', 'G3MEventContext', 474), Ljava_util_AbstractSequentialList_2_classLit = createForClass('java.util.', 'AbstractSequentialList', 325), Ljava_util_LinkedList_2_classLit = createForClass('java.util.', 'LinkedList', 347), Ljava_util_LinkedList$ListIteratorImpl_2_classLit = createForClass('java.util.', 'LinkedList$ListIteratorImpl', 348), Ljava_util_LinkedList$Node_2_classLit = createForClass('java.util.', 'LinkedList$Node', 349), Ljava_lang_IndexOutOfBoundsException_2_classLit = createForClass('java.lang.', 'IndexOutOfBoundsException', 297), Lorg_glob3_mobile_specific_Downloader_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'Downloader_WebGL', 694), Lorg_glob3_mobile_specific_Downloader_1WebGL$1_2_classLit = createForClass('org.glob3.mobile.specific.', 'Downloader_WebGL$1', 695), Lorg_glob3_mobile_generated_DefaultTileTexturizer_2_classLit = createForClass('org.glob3.mobile.generated.', 'DefaultTileTexturizer', 450), Lorg_glob3_mobile_generated_PlanetRenderContext_2_classLit = createForClass('org.glob3.mobile.generated.', 'PlanetRenderContext', 624), Lorg_glob3_mobile_generated_VisibleSectorListenerEntry_2_classLit = createForClass('org.glob3.mobile.generated.', 'VisibleSectorListenerEntry', 688), Lorg_glob3_mobile_generated_Ellipsoid_2_classLit = createForClass('org.glob3.mobile.generated.', 'Ellipsoid', 459), Lorg_glob3_mobile_specific_ThreadUtils_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'ThreadUtils_WebGL', 716), Lorg_glob3_mobile_specific_ThreadUtils_1WebGL$1_2_classLit = createForClass('org.glob3.mobile.specific.', 'ThreadUtils_WebGL$1', 717), Lorg_glob3_mobile_generated_SimpleCameraConstrainer_2_classLit = createForClass('org.glob3.mobile.generated.', 'SimpleCameraConstrainer', 652), Lorg_glob3_mobile_generated_CameraEventHandler_2_classLit = createForClass('org.glob3.mobile.generated.', 'CameraEventHandler', 398), Lorg_glob3_mobile_generated_CameraSingleDragHandler_2_classLit = createForClass('org.glob3.mobile.generated.', 'CameraSingleDragHandler', 406), Lorg_glob3_mobile_generated_CameraDoubleDragHandler_2_classLit = createForClass('org.glob3.mobile.generated.', 'CameraDoubleDragHandler', 397), Lorg_glob3_mobile_generated_CameraRotationHandler_2_classLit = createForClass('org.glob3.mobile.generated.', 'CameraRotationHandler', 405), Lorg_glob3_mobile_generated_CameraDoubleTapHandler_2_classLit = createForClass('org.glob3.mobile.generated.', 'CameraDoubleTapHandler', 399), Lorg_glob3_mobile_generated_GLCameraGroupFeature_2_classLit = createForClass('org.glob3.mobile.generated.', 'GLCameraGroupFeature', 483), Lorg_glob3_mobile_generated_ProjectionGLFeature_2_classLit = createForClass('org.glob3.mobile.generated.', 'ProjectionGLFeature', 634), Lorg_glob3_mobile_generated_ModelGLFeature_2_classLit = createForClass('org.glob3.mobile.generated.', 'ModelGLFeature', 614), Lorg_glob3_mobile_generated_FrameTasksExecutor_2_classLit = createForClass('org.glob3.mobile.generated.', 'FrameTasksExecutor', 470), Lorg_glob3_mobile_generated_TexturesHandler_2_classLit = createForClass('org.glob3.mobile.generated.', 'TexturesHandler', 665), Lorg_glob3_mobile_generated_RenderState_2_classLit = createForClass('org.glob3.mobile.generated.', 'RenderState', 644), Lorg_glob3_mobile_generated_G3MRenderContext_2_classLit = createForClass('org.glob3.mobile.generated.', 'G3MRenderContext', 475), Lorg_glob3_mobile_generated_CameraContext_2_classLit = createForClass('org.glob3.mobile.generated.', 'CameraContext', 395), Lorg_glob3_mobile_generated_IImageListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'IImageListener', 410), Lorg_glob3_mobile_generated_FrameTask_2_classLit = createForClass('org.glob3.mobile.generated.', 'FrameTask', 433), Lorg_glob3_mobile_generated_Matrix44D_2_classLit = createForClass('org.glob3.mobile.generated.', 'Matrix44D', 601), Lorg_glob3_mobile_generated_Vector2F_2_classLit = createForClass('org.glob3.mobile.generated.', 'Vector2F', 682), Lorg_glob3_mobile_generated_CameraDirtyFlags_2_classLit = createForClass('org.glob3.mobile.generated.', 'CameraDirtyFlags', 396), Lcom_google_gwt_event_dom_client_MouseDownEvent_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'MouseDownEvent', 110), Lcom_google_gwt_event_dom_client_MouseUpEvent_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'MouseUpEvent', 112), Lcom_google_gwt_event_dom_client_MouseMoveEvent_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'MouseMoveEvent', 111), Lcom_google_gwt_user_client_ui_ScrollImpl_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'ScrollImpl', 264), Lcom_google_gwt_user_client_ui_ScrollImpl$ScrollImplTrident_2_classLit = createForClass('com.google.gwt.user.client.ui.', 'ScrollImpl$ScrollImplTrident', 265), Lcom_google_gwt_event_dom_client_PrivateMap_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'PrivateMap', 113), Lcom_google_gwt_event_shared_LegacyHandlerWrapper_2_classLit = createForClass('com.google.gwt.event.shared.', 'LegacyHandlerWrapper', 129), Lcom_google_gwt_event_logical_shared_ResizeEvent_2_classLit = createForClass('com.google.gwt.event.logical.shared.', 'ResizeEvent', 123), Lcom_google_gwt_dom_client_DOMImplTrident_2_classLit = createForClass('com.google.gwt.dom.client.', 'DOMImplTrident', 56), Lcom_google_gwt_dom_client_DOMImplIE8_2_classLit = createForClass('com.google.gwt.dom.client.', 'DOMImplIE8', 55), Lcom_google_gwt_dom_client_DOMImplStandard_2_classLit = createForClass('com.google.gwt.dom.client.', 'DOMImplStandard', 59), Lcom_google_gwt_dom_client_DOMImplMozilla_2_classLit = createForClass('com.google.gwt.dom.client.', 'DOMImplMozilla', 60), Lcom_google_gwt_dom_client_DOMImplStandardBase_2_classLit = createForClass('com.google.gwt.dom.client.', 'DOMImplStandardBase', 58), Lcom_google_gwt_dom_client_DOMImplIE9_2_classLit = createForClass('com.google.gwt.dom.client.', 'DOMImplIE9', 57), Lcom_google_gwt_dom_client_DOMImplWebkit_2_classLit = createForClass('com.google.gwt.dom.client.', 'DOMImplWebkit', 62), Lorg_glob3_mobile_generated_IDeviceInfo_2_classLit = createForClass('org.glob3.mobile.generated.', 'IDeviceInfo', 554), Lorg_glob3_mobile_specific_FloatBuffer_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'FloatBuffer_WebGL', 699), Ljava_util_Random_2_classLit = createForClass('java.util.', 'Random', 352), Lorg_glob3_mobile_generated_InterfaceOrientation_2_classLit = createForEnum('org.glob3.mobile.generated.', 'InterfaceOrientation', 578, values_11), _3Lorg_glob3_mobile_generated_InterfaceOrientation_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'InterfaceOrientation;', 750, Lorg_glob3_mobile_generated_InterfaceOrientation_2_classLit), Lorg_glob3_mobile_generated_MeshRenderer_1MeshBufferDownloadListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'MeshRenderer_MeshBufferDownloadListener', 612), Lorg_glob3_mobile_generated_GeometryGLFeature_2_classLit = createForClass('org.glob3.mobile.generated.', 'GeometryGLFeature', 542), Lorg_glob3_mobile_generated_VertexNormalGLFeature_2_classLit = createForClass('org.glob3.mobile.generated.', 'VertexNormalGLFeature', 687), Lorg_glob3_mobile_generated_ModelTransformGLFeature_2_classLit = createForClass('org.glob3.mobile.generated.', 'ModelTransformGLFeature', 615), Lorg_glob3_mobile_generated_PriorityGLFeature_2_classLit = createForClass('org.glob3.mobile.generated.', 'PriorityGLFeature', 418), Lorg_glob3_mobile_generated_GLColorGroupFeature_2_classLit = createForClass('org.glob3.mobile.generated.', 'GLColorGroupFeature', 417), Lorg_glob3_mobile_generated_FlatColorGLFeature_2_classLit = createForClass('org.glob3.mobile.generated.', 'FlatColorGLFeature', 462), Lorg_glob3_mobile_generated_ColorGLFeature_2_classLit = createForClass('org.glob3.mobile.generated.', 'ColorGLFeature', 416), Lorg_glob3_mobile_generated_PlanetTileTessellator_2_classLit = createForClass('org.glob3.mobile.generated.', 'PlanetTileTessellator', 628), Lorg_glob3_mobile_generated_AbstractImageBuilder_2_classLit = createForClass('org.glob3.mobile.generated.', 'AbstractImageBuilder', 370), Lorg_glob3_mobile_generated_CanvasImageBuilder_2_classLit = createForClass('org.glob3.mobile.generated.', 'CanvasImageBuilder', 408), Lorg_glob3_mobile_generated_DefaultChessCanvasImageBuilder_2_classLit = createForClass('org.glob3.mobile.generated.', 'DefaultChessCanvasImageBuilder', 448), Lorg_glob3_mobile_generated_ProjectedCornersDistanceTileLODTester_2_classLit = createForClass('org.glob3.mobile.generated.', 'ProjectedCornersDistanceTileLODTester', 631), Lorg_glob3_mobile_generated_TileData_2_classLit = createForClass('org.glob3.mobile.generated.', 'TileData', 633), Lorg_glob3_mobile_generated_ProjectedCornersDistanceTileLODTester$PvtData_2_classLit = createForClass('org.glob3.mobile.generated.', 'ProjectedCornersDistanceTileLODTester$PvtData', 632), Lorg_glob3_mobile_generated_DecoratorTileLODTester_2_classLit = createForClass('org.glob3.mobile.generated.', 'DecoratorTileLODTester', 444), Lorg_glob3_mobile_generated_TimedCacheTileLODTester_2_classLit = createForClass('org.glob3.mobile.generated.', 'TimedCacheTileLODTester', 673), Lorg_glob3_mobile_generated_TimedCacheTileLODTester$PvtData_2_classLit = createForClass('org.glob3.mobile.generated.', 'TimedCacheTileLODTester$PvtData', 674), Lorg_glob3_mobile_generated_MaxLevelTileLODTester_2_classLit = createForClass('org.glob3.mobile.generated.', 'MaxLevelTileLODTester', 607), Lorg_glob3_mobile_generated_GradualSplitsTileLODTester_2_classLit = createForClass('org.glob3.mobile.generated.', 'GradualSplitsTileLODTester', 544), Lorg_glob3_mobile_generated_OrTileLODTester_2_classLit = createForClass('org.glob3.mobile.generated.', 'OrTileLODTester', 622), Lorg_glob3_mobile_generated_MaxFrameTimeTileLODTester_2_classLit = createForClass('org.glob3.mobile.generated.', 'MaxFrameTimeTileLODTester', 606), Lorg_glob3_mobile_generated_DecoratorTileVisibilityTester_2_classLit = createForClass('org.glob3.mobile.generated.', 'DecoratorTileVisibilityTester', 446), Lorg_glob3_mobile_generated_TimedCacheTileVisibilityTester_2_classLit = createForClass('org.glob3.mobile.generated.', 'TimedCacheTileVisibilityTester', 675), Lorg_glob3_mobile_generated_TimedCacheTileVisibilityTester$PvtData_2_classLit = createForClass('org.glob3.mobile.generated.', 'TimedCacheTileVisibilityTester$PvtData', 676), Lorg_glob3_mobile_generated_MeshBoundingVolumeTileVisibilityTester_2_classLit = createForClass('org.glob3.mobile.generated.', 'MeshBoundingVolumeTileVisibilityTester', 609), Lorg_glob3_mobile_generated_TilesStatistics_2_classLit = createForClass('org.glob3.mobile.generated.', 'TilesStatistics', 671), Lorg_glob3_mobile_generated_RecreateTilesTask_2_classLit = createForClass('org.glob3.mobile.generated.', 'RecreateTilesTask', 642), Lorg_glob3_mobile_generated_MutableVector2F_2_classLit = createForClass('org.glob3.mobile.generated.', 'MutableVector2F', 619), Lorg_glob3_mobile_generated_HUDImageRenderer_2_classLit = createForClass('org.glob3.mobile.generated.', 'HUDImageRenderer', 548), Lorg_glob3_mobile_generated_HUDImageRenderer$CanvasImageFactory_2_classLit = createForClass('org.glob3.mobile.generated.', 'HUDImageRenderer$CanvasImageFactory', 547), Lorg_glob3_mobile_generated_HUDImageRenderer$ImageListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'HUDImageRenderer$ImageListener', 549), Lorg_glob3_mobile_generated_HUDErrorRenderer_1ImageFactory_2_classLit = createForClass('org.glob3.mobile.generated.', 'HUDErrorRenderer_ImageFactory', 546), Lorg_glob3_mobile_generated_FrustumData_2_classLit = createForClass('org.glob3.mobile.generated.', 'FrustumData', 472), Lorg_glob3_mobile_generated_Frustum_2_classLit = createForClass('org.glob3.mobile.generated.', 'Frustum', 471), Lorg_glob3_mobile_specific_Timer_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'Timer_WebGL', 718), Lorg_glob3_mobile_generated_Touch_2_classLit = createForClass('org.glob3.mobile.generated.', 'Touch', 677), _3Lorg_glob3_mobile_generated_Touch_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'Touch;', 751, Lorg_glob3_mobile_generated_Touch_2_classLit), Lcom_google_gwt_touch_client_TouchScroller_2_classLit = createForClass('com.google.gwt.touch.client.', 'TouchScroller', 198), Lcom_google_gwt_touch_client_TouchScroller$TemporalPoint_2_classLit = createForClass('com.google.gwt.touch.client.', 'TouchScroller$TemporalPoint', 208), Lcom_google_gwt_touch_client_TouchScroller$MomentumCommand_2_classLit = createForClass('com.google.gwt.touch.client.', 'TouchScroller$MomentumCommand', 205), Lcom_google_gwt_touch_client_TouchScroller$MomentumTouchRemovalCommand_2_classLit = createForClass('com.google.gwt.touch.client.', 'TouchScroller$MomentumTouchRemovalCommand', 207), Lcom_google_gwt_touch_client_TouchScroller$MomentumCommand$1_2_classLit = createForClass('com.google.gwt.touch.client.', 'TouchScroller$MomentumCommand$1', 206), Lcom_google_gwt_touch_client_TouchScroller$1_2_classLit = createForClass('com.google.gwt.touch.client.', 'TouchScroller$1', 199), Lcom_google_gwt_touch_client_TouchScroller$2_2_classLit = createForClass('com.google.gwt.touch.client.', 'TouchScroller$2', 200), Lcom_google_gwt_touch_client_TouchScroller$3_2_classLit = createForClass('com.google.gwt.touch.client.', 'TouchScroller$3', 201), Lcom_google_gwt_touch_client_TouchScroller$4_2_classLit = createForClass('com.google.gwt.touch.client.', 'TouchScroller$4', 202), Lcom_google_gwt_touch_client_TouchScroller$5_2_classLit = createForClass('com.google.gwt.touch.client.', 'TouchScroller$5', 203), Lcom_google_gwt_touch_client_TouchScroller$6_2_classLit = createForClass('com.google.gwt.touch.client.', 'TouchScroller$6', 204), Lcom_google_gwt_user_client_impl_HistoryImpl_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'HistoryImpl', 229), Lcom_google_gwt_user_client_impl_HistoryImplTimer_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'HistoryImplTimer', 231), Lcom_google_gwt_user_client_impl_HistoryImplSafari_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'HistoryImplSafari', 232), Lcom_google_gwt_user_client_impl_HistoryImplMozilla_2_classLit = createForClass('com.google.gwt.user.client.impl.', 'HistoryImplMozilla', 230), Lorg_glob3_mobile_generated_Tile_2_classLit = createForClass('org.glob3.mobile.generated.', 'Tile', 666), _3Lorg_glob3_mobile_generated_TileData_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'TileData;', 752, Lorg_glob3_mobile_generated_TileData_2_classLit), Lorg_glob3_mobile_generated_Vector2I_2_classLit = createForClass('org.glob3.mobile.generated.', 'Vector2I', 683), Lorg_glob3_mobile_generated_Gesture_2_classLit = createForEnum('org.glob3.mobile.generated.', 'Gesture', 543, values_10), _3Lorg_glob3_mobile_generated_Gesture_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'Gesture;', 753, Lorg_glob3_mobile_generated_Gesture_2_classLit), Lorg_glob3_mobile_generated_DirectionLightGLFeature_2_classLit = createForClass('org.glob3.mobile.generated.', 'DirectionLightGLFeature', 453), Lorg_glob3_mobile_generated_FloatBufferBuilderFromCartesian3D_2_classLit = createForClass('org.glob3.mobile.generated.', 'FloatBufferBuilderFromCartesian3D', 467), Lorg_glob3_mobile_generated_GLFeatureGroupName_2_classLit = createForEnum('org.glob3.mobile.generated.', 'GLFeatureGroupName', 489, values_6), _3Lorg_glob3_mobile_generated_GLFeatureGroupName_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'GLFeatureGroupName;', 754, Lorg_glob3_mobile_generated_GLFeatureGroupName_2_classLit), Lorg_glob3_mobile_specific_Downloader_1WebGL_1Handler_1DefaultImpl_2_classLit = createForClass('org.glob3.mobile.specific.', 'Downloader_WebGL_Handler_DefaultImpl', 696), Lorg_glob3_mobile_specific_Downloader_1WebGL_1Handler_1WebkitImpl_2_classLit = createForClass('org.glob3.mobile.specific.', 'Downloader_WebGL_Handler_WebkitImpl', 697), Lorg_glob3_mobile_generated_GPUAttributeValueVecFloat_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUAttributeValueVecFloat', 508), Lorg_glob3_mobile_generated_GPUAttributeValueVec4Float_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUAttributeValueVec4Float', 510), Lorg_glob3_mobile_generated_GPUAttributeKey_2_classLit = createForEnum('org.glob3.mobile.generated.', 'GPUAttributeKey', 505, values_7), _3Lorg_glob3_mobile_generated_GPUAttributeKey_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'GPUAttributeKey;', 755, Lorg_glob3_mobile_generated_GPUAttributeKey_2_classLit), Lorg_glob3_mobile_generated_GPUUniformKey_2_classLit = createForEnum('org.glob3.mobile.generated.', 'GPUUniformKey', 520, values_8), _3Lorg_glob3_mobile_generated_GPUUniformKey_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'GPUUniformKey;', 756, Lorg_glob3_mobile_generated_GPUUniformKey_2_classLit), Lorg_glob3_mobile_generated_GPUUniformValueFloat_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformValueFloat', 524), Lorg_glob3_mobile_generated_GPUAttributeValueVec3Float_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUAttributeValueVec3Float', 509), Lorg_glob3_mobile_generated_GPUUniformValueVec4Float_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformValueVec4Float', 532), Lorg_glob3_mobile_generated_MercatorTiledLayer_2_classLit = createForClass('org.glob3.mobile.generated.', 'MercatorTiledLayer', 600), Lorg_glob3_mobile_generated_MapQuestLayer_2_classLit = createForClass('org.glob3.mobile.generated.', 'MapQuestLayer', 599), Lorg_glob3_mobile_generated_DTT_1IImageBuilderListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'DTT_IImageBuilderListener', 436), Lorg_glob3_mobile_generated_MutableVector2I_2_classLit = createForClass('org.glob3.mobile.generated.', 'MutableVector2I', 620), Lorg_glob3_mobile_generated_IImage_2_classLit = createForClass('org.glob3.mobile.generated.', 'IImage', 560), Lcom_google_gwt_event_dom_client_TouchEvent_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'TouchEvent', 116), Lcom_google_gwt_event_dom_client_TouchStartEvent_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'TouchStartEvent', 120), Lcom_google_gwt_event_dom_client_TouchEvent$TouchSupportDetector_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'TouchEvent$TouchSupportDetector', 118), Lcom_google_gwt_event_dom_client_TouchMoveEvent_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'TouchMoveEvent', 119), Lcom_google_gwt_event_dom_client_TouchEndEvent_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'TouchEndEvent', 117), Lcom_google_gwt_event_dom_client_TouchCancelEvent_2_classLit = createForClass('com.google.gwt.event.dom.client.', 'TouchCancelEvent', 115), Lcom_google_gwt_event_logical_shared_ValueChangeEvent_2_classLit = createForClass('com.google.gwt.event.logical.shared.', 'ValueChangeEvent', 124), Lorg_glob3_mobile_generated_EffectNeverEnding_2_classLit = createForClass('org.glob3.mobile.generated.', 'EffectNeverEnding', 388), Lorg_glob3_mobile_generated_BusyMeshEffect_2_classLit = createForClass('org.glob3.mobile.generated.', 'BusyMeshEffect', 387), Lorg_glob3_mobile_generated_ModelViewGLFeature_2_classLit = createForClass('org.glob3.mobile.generated.', 'ModelViewGLFeature', 616), Lorg_glob3_mobile_generated_Plane_2_classLit = createForClass('org.glob3.mobile.generated.', 'Plane', 623), Lorg_glob3_mobile_generated_GPUUniformValueVec3Float_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformValueVec3Float', 530), Lorg_glob3_mobile_generated_GPUUniformValueVec3FloatMutable_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformValueVec3FloatMutable', 531), Ljava_util_Arrays$ArrayList_2_classLit = createForClass('java.util.', 'Arrays$ArrayList', 328), Lorg_glob3_mobile_generated_EffectWithDuration_2_classLit = createForClass('org.glob3.mobile.generated.', 'EffectWithDuration', 403), Lorg_glob3_mobile_generated_CameraGoToPositionEffect_2_classLit = createForClass('org.glob3.mobile.generated.', 'CameraGoToPositionEffect', 402), Lorg_glob3_mobile_generated_Matrix44DProvider_2_classLit = createForClass('org.glob3.mobile.generated.', 'Matrix44DProvider', 603), Lorg_glob3_mobile_generated_Matrix44DHolder_2_classLit = createForClass('org.glob3.mobile.generated.', 'Matrix44DHolder', 602), Lorg_glob3_mobile_generated_ICanvas_2_classLit = createForClass('org.glob3.mobile.generated.', 'ICanvas', 551), Lorg_glob3_mobile_generated_ElevationData_2_classLit = createForClass('org.glob3.mobile.generated.', 'ElevationData', 386), Lorg_glob3_mobile_generated_TileElevationDataRequest_2_classLit = createForClass('org.glob3.mobile.generated.', 'TileElevationDataRequest', 667), Lorg_glob3_mobile_generated_PlanetTileTessellatorData_2_classLit = createForClass('org.glob3.mobile.generated.', 'PlanetTileTessellatorData', 630), Lorg_glob3_mobile_generated_CanvasImageBuilder_1ImageListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'CanvasImageBuilder_ImageListener', 409), Lorg_glob3_mobile_specific_GLTextureId_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'GLTextureId_WebGL', 702), Lorg_glob3_mobile_generated_Box_2_classLit = createForClass('org.glob3.mobile.generated.', 'Box', 384), Lorg_glob3_mobile_generated_Vector3F_2_classLit = createForClass('org.glob3.mobile.generated.', 'Vector3F', 686), _3Lorg_glob3_mobile_generated_Vector3F_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'Vector3F;', 757, Lorg_glob3_mobile_generated_Vector3F_2_classLit), Lorg_glob3_mobile_specific_DeviceInfo_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'DeviceInfo_WebGL', 692), Lorg_glob3_mobile_generated_FlatColorMesh_2_classLit = createForClass('org.glob3.mobile.generated.', 'FlatColorMesh', 463), Lorg_glob3_mobile_generated_FloatBufferBuilderFromColor_2_classLit = createForClass('org.glob3.mobile.generated.', 'FloatBufferBuilderFromColor', 468), Lorg_glob3_mobile_generated_ShortBufferBuilder_2_classLit = createForClass('org.glob3.mobile.generated.', 'ShortBufferBuilder', 649), Lorg_glob3_mobile_generated_ShortBufferBuilder$ShortArrayList_2_classLit = createForClass('org.glob3.mobile.generated.', 'ShortBufferBuilder$ShortArrayList', 650), _3S_classLit = createForArray('', '[S', 758, S_classLit), Lorg_glob3_mobile_generated_IndexedMesh_2_classLit = createForClass('org.glob3.mobile.generated.', 'IndexedMesh', 575), Lorg_glob3_mobile_generated_IShortBuffer_2_classLit = createForClass('org.glob3.mobile.generated.', 'IShortBuffer', 566), Ljava_util_Comparators$1_2_classLit = createForClass('java.util.', 'Comparators$1', 342), Lorg_glob3_mobile_specific_ListenerEntry_2_classLit = createForClass('org.glob3.mobile.specific.', 'ListenerEntry', 706), Lorg_glob3_mobile_generated_IImageDownloadListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'IImageDownloadListener', 561), Lorg_glob3_mobile_generated_GFont_2_classLit = createForClass('org.glob3.mobile.generated.', 'GFont', 478), Lorg_glob3_mobile_generated_DTT_1TileTextureBuilderHolder_2_classLit = createForClass('org.glob3.mobile.generated.', 'DTT_TileTextureBuilderHolder', 442), Lorg_glob3_mobile_generated_DTT_1TileTextureBuilder_2_classLit = createForClass('org.glob3.mobile.generated.', 'DTT_TileTextureBuilder', 441), Lorg_glob3_mobile_generated_TileElevationDataRequestListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'TileElevationDataRequestListener', 668), Lorg_glob3_mobile_generated_Interpolator_2_classLit = createForClass('org.glob3.mobile.generated.', 'Interpolator', 377), Lorg_glob3_mobile_generated_FloatBufferBuilderFromCartesian2D_2_classLit = createForClass('org.glob3.mobile.generated.', 'FloatBufferBuilderFromCartesian2D', 466), Lorg_glob3_mobile_generated_TileTessellatorMeshData_2_classLit = createForClass('org.glob3.mobile.generated.', 'TileTessellatorMeshData', 669), Lcom_google_gwt_animation_client_AnimationSchedulerImpl_2_classLit = createForClass('com.google.gwt.animation.client.', 'AnimationSchedulerImpl', 7), Lcom_google_gwt_touch_client_DefaultMomentum_2_classLit = createForClass('com.google.gwt.touch.client.', 'DefaultMomentum', 195), Lcom_google_gwt_touch_client_Momentum$State_2_classLit = createForClass('com.google.gwt.touch.client.', 'Momentum$State', 196), Lorg_glob3_mobile_generated_MeshHolder_2_classLit = createForClass('org.glob3.mobile.generated.', 'MeshHolder', 610), Lorg_glob3_mobile_generated_LeveledTexturedMesh_2_classLit = createForClass('org.glob3.mobile.generated.', 'LeveledTexturedMesh', 598), Lorg_glob3_mobile_generated_DTT_1TileTextureBuilderStartTask_2_classLit = createForClass('org.glob3.mobile.generated.', 'DTT_TileTextureBuilderStartTask', 443), Lorg_glob3_mobile_generated_MutableLayerTilesRenderParameters_2_classLit = createForClass('org.glob3.mobile.generated.', 'MutableLayerTilesRenderParameters', 617), Lorg_glob3_mobile_generated_TextureIDReference_2_classLit = createForClass('org.glob3.mobile.generated.', 'TextureIDReference', 662), Lorg_glob3_mobile_generated_TextureMapping_2_classLit = createForClass('org.glob3.mobile.generated.', 'TextureMapping', 597), Lorg_glob3_mobile_generated_TransformableTextureMapping_2_classLit = createForClass('org.glob3.mobile.generated.', 'TransformableTextureMapping', 655), Lorg_glob3_mobile_generated_SimpleTextureMapping_2_classLit = createForClass('org.glob3.mobile.generated.', 'SimpleTextureMapping', 654), Lorg_glob3_mobile_generated_TexturedMesh_2_classLit = createForClass('org.glob3.mobile.generated.', 'TexturedMesh', 664), Lorg_glob3_mobile_specific_Canvas_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'Canvas_WebGL', 690), Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer_2_classLit = createForClass('com.google.gwt.animation.client.', 'AnimationSchedulerImplTimer', 10), Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer$AnimationHandleImpl_2_classLit = createForClass('com.google.gwt.animation.client.', 'AnimationSchedulerImplTimer$AnimationHandleImpl', 13), _3Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer$AnimationHandleImpl_2_classLit = createForArray('[Lcom.google.gwt.animation.client.', 'AnimationSchedulerImplTimer$AnimationHandleImpl;', 759, Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer$AnimationHandleImpl_2_classLit), Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer$1_2_classLit = createForClass('com.google.gwt.animation.client.', 'AnimationSchedulerImplTimer$1', 11), Lcom_google_gwt_animation_client_AnimationSchedulerImplMozilla_2_classLit = createForClass('com.google.gwt.animation.client.', 'AnimationSchedulerImplMozilla', 8), Lcom_google_gwt_animation_client_AnimationSchedulerImplMozilla$AnimationHandleImpl_2_classLit = createForClass('com.google.gwt.animation.client.', 'AnimationSchedulerImplMozilla$AnimationHandleImpl', 9), Lcom_google_gwt_animation_client_AnimationSchedulerImplWebkit_2_classLit = createForClass('com.google.gwt.animation.client.', 'AnimationSchedulerImplWebkit', 14), Lcom_google_gwt_animation_client_AnimationSchedulerImplWebkit$AnimationHandleImpl_2_classLit = createForClass('com.google.gwt.animation.client.', 'AnimationSchedulerImplWebkit$AnimationHandleImpl', 15), Lorg_glob3_mobile_generated_Vector2S_2_classLit = createForClass('org.glob3.mobile.generated.', 'Vector2S', 684), Lorg_glob3_mobile_generated_AbstractGeometryMesh_2_classLit = createForClass('org.glob3.mobile.generated.', 'AbstractGeometryMesh', 368), Lorg_glob3_mobile_generated_IndexedGeometryMesh_2_classLit = createForClass('org.glob3.mobile.generated.', 'IndexedGeometryMesh', 574), Lorg_glob3_mobile_generated_GLFeatureGroup_2_classLit = createForClass('org.glob3.mobile.generated.', 'GLFeatureGroup', 487), _3Lorg_glob3_mobile_generated_GLFeatureGroup_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'GLFeatureGroup;', 760, Lorg_glob3_mobile_generated_GLFeatureGroup_2_classLit), Lorg_glob3_mobile_generated_CompositeMesh_2_classLit = createForClass('org.glob3.mobile.generated.', 'CompositeMesh', 422), Lorg_glob3_mobile_specific_ShortBuffer_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'ShortBuffer_WebGL', 712), Lorg_glob3_mobile_generated_TextureSpec_2_classLit = createForClass('org.glob3.mobile.generated.', 'TextureSpec', 663), Lorg_glob3_mobile_generated_TextureHolder_2_classLit = createForClass('org.glob3.mobile.generated.', 'TextureHolder', 661), Lorg_glob3_mobile_generated_Vector2D_2_classLit = createForClass('org.glob3.mobile.generated.', 'Vector2D', 681), Lorg_glob3_mobile_generated_CanvasTileImageProvider_2_classLit = createForClass('org.glob3.mobile.generated.', 'CanvasTileImageProvider', 411), Lorg_glob3_mobile_generated_CompositeTileImageProvider_2_classLit = createForClass('org.glob3.mobile.generated.', 'CompositeTileImageProvider', 427), Lorg_glob3_mobile_generated_CompositeTileImageProvider$ChildResult_2_classLit = createForClass('org.glob3.mobile.generated.', 'CompositeTileImageProvider$ChildResult', 428), Lorg_glob3_mobile_generated_CompositeTileImageProvider$Composer_2_classLit = createForClass('org.glob3.mobile.generated.', 'CompositeTileImageProvider$Composer', 431), Lorg_glob3_mobile_generated_CompositeTileImageProvider$ComposerImageListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'CompositeTileImageProvider$ComposerImageListener', 434), Lorg_glob3_mobile_generated_CompositeTileImageProvider$ComposerFrameTask_2_classLit = createForClass('org.glob3.mobile.generated.', 'CompositeTileImageProvider$ComposerFrameTask', 432), Lorg_glob3_mobile_generated_TileImageListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'TileImageListener', 430), Lorg_glob3_mobile_generated_CompositeTileImageProvider$ChildTileImageListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'CompositeTileImageProvider$ChildTileImageListener', 429), Lorg_glob3_mobile_generated_LazyTextureMapping_2_classLit = createForClass('org.glob3.mobile.generated.', 'LazyTextureMapping', 596), Lorg_glob3_mobile_generated_LazyTextureMappingInitializer_2_classLit = createForClass('org.glob3.mobile.generated.', 'LazyTextureMappingInitializer', 438), Lorg_glob3_mobile_generated_DTT_1LTMInitializer_2_classLit = createForClass('org.glob3.mobile.generated.', 'DTT_LTMInitializer', 437), Lorg_glob3_mobile_generated_TileImageContribution_2_classLit = createForClass('org.glob3.mobile.generated.', 'TileImageContribution', 425), Lorg_glob3_mobile_generated_DTT_1TileImageListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'DTT_TileImageListener', 440), Lorg_glob3_mobile_specific_Image_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'Image_WebGL', 704), Lorg_glob3_mobile_generated_IByteBuffer_2_classLit = createForClass('org.glob3.mobile.generated.', 'IByteBuffer', 550), Lorg_glob3_mobile_specific_ByteBuffer_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'ByteBuffer_WebGL', 689), Lorg_glob3_mobile_generated_PyramidElevationDataProvider_1BufferDownloadListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'PyramidElevationDataProvider_BufferDownloadListener', 638), Lorg_glob3_mobile_generated_SubviewElevationData_2_classLit = createForClass('org.glob3.mobile.generated.', 'SubviewElevationData', 580), Lorg_glob3_mobile_generated_InterpolatedSubviewElevationData_2_classLit = createForClass('org.glob3.mobile.generated.', 'InterpolatedSubviewElevationData', 579), Lorg_glob3_mobile_generated_GLFeatureNoGroup_2_classLit = createForClass('org.glob3.mobile.generated.', 'GLFeatureNoGroup', 491), Lorg_glob3_mobile_generated_GLFeatureCameraGroup_2_classLit = createForClass('org.glob3.mobile.generated.', 'GLFeatureCameraGroup', 486), Lorg_glob3_mobile_generated_GLFeatureColorGroup_2_classLit = createForClass('org.glob3.mobile.generated.', 'GLFeatureColorGroup', 488), Lorg_glob3_mobile_generated_GLFeatureLightingGroup_2_classLit = createForClass('org.glob3.mobile.generated.', 'GLFeatureLightingGroup', 490), Lorg_glob3_mobile_generated_CanvasElement_2_classLit = createForClass('org.glob3.mobile.generated.', 'CanvasElement', 407), Lorg_glob3_mobile_generated_GroupCanvasElement_2_classLit = createForClass('org.glob3.mobile.generated.', 'GroupCanvasElement', 421), Lorg_glob3_mobile_generated_ColumnCanvasElement_2_classLit = createForClass('org.glob3.mobile.generated.', 'ColumnCanvasElement', 420), Lorg_glob3_mobile_generated_TextCanvasElement_2_classLit = createForClass('org.glob3.mobile.generated.', 'TextCanvasElement', 659), Lorg_glob3_mobile_generated_TextureGLFeature_2_classLit = createForClass('org.glob3.mobile.generated.', 'TextureGLFeature', 660), Lorg_glob3_mobile_generated_JSONBaseObject_2_classLit = createForClass('org.glob3.mobile.generated.', 'JSONBaseObject', 582), Lorg_glob3_mobile_generated_JSONArray_2_classLit = createForClass('org.glob3.mobile.generated.', 'JSONArray', 581), Lorg_glob3_mobile_generated_JSONObject_2_classLit = createForClass('org.glob3.mobile.generated.', 'JSONObject', 590), Lorg_glob3_mobile_generated_GAsyncTask_2_classLit = createForClass('org.glob3.mobile.generated.', 'GAsyncTask', 477), Lorg_glob3_mobile_generated_MeshRenderer_1MeshParserAsyncTask_2_classLit = createForClass('org.glob3.mobile.generated.', 'MeshRenderer_MeshParserAsyncTask', 613), Lorg_glob3_mobile_generated_CompositeTileImageContribution_2_classLit = createForClass('org.glob3.mobile.generated.', 'CompositeTileImageContribution', 424), Lorg_glob3_mobile_generated_CompositeTileImageContribution$ChildContribution_2_classLit = createForClass('org.glob3.mobile.generated.', 'CompositeTileImageContribution$ChildContribution', 426), Lorg_glob3_mobile_generated_GPUUniformValueVec2Float_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformValueVec2Float', 528), Lorg_glob3_mobile_generated_GPUUniformValueVec2FloatMutable_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformValueVec2FloatMutable', 529), Lorg_glob3_mobile_generated_GPUUniformValueFloatMutable_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformValueFloatMutable', 525), Lorg_glob3_mobile_generated_LayerTouchEvent_2_classLit = createForClass('org.glob3.mobile.generated.', 'LayerTouchEvent', 595), Lcom_google_gwt_touch_client_Point_2_classLit = createForClass('com.google.gwt.touch.client.', 'Point', 197), Lorg_glob3_mobile_generated_JSONNumber_2_classLit = createForClass('org.glob3.mobile.generated.', 'JSONNumber', 585), Lorg_glob3_mobile_generated_JSONInteger_2_classLit = createForClass('org.glob3.mobile.generated.', 'JSONInteger', 587), Lorg_glob3_mobile_generated_IThreadUtils_1BackgroundTask_2_classLit = createForClass('org.glob3.mobile.generated.', 'IThreadUtils_BackgroundTask', 571), Lorg_glob3_mobile_generated_BufferElevationData_2_classLit = createForClass('org.glob3.mobile.generated.', 'BufferElevationData', 385), Lorg_glob3_mobile_generated_ShortBufferElevationData_2_classLit = createForClass('org.glob3.mobile.generated.', 'ShortBufferElevationData', 651), Lorg_glob3_mobile_generated_RLTIP_1ImageDownloadListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'RLTIP_ImageDownloadListener', 640), Lorg_glob3_mobile_generated_Matrix44DMultiplicationHolderBuilder_2_classLit = createForClass('org.glob3.mobile.generated.', 'Matrix44DMultiplicationHolderBuilder', 605), _3Lorg_glob3_mobile_generated_Matrix44DProvider_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'Matrix44DProvider;', 761, Lorg_glob3_mobile_generated_Matrix44DProvider_2_classLit), Lorg_glob3_mobile_generated_Matrix44DMultiplicationHolder_2_classLit = createForClass('org.glob3.mobile.generated.', 'Matrix44DMultiplicationHolder', 604), _3Lorg_glob3_mobile_generated_Matrix44D_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'Matrix44D;', 762, Lorg_glob3_mobile_generated_Matrix44D_2_classLit), Lorg_glob3_mobile_generated_GPUUniformValueMatrix4_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformValueMatrix4', 527), Lorg_glob3_mobile_generated_ShaderType_2_classLit = createForEnum('org.glob3.mobile.generated.', 'ShaderType', 648, values_13), _3Lorg_glob3_mobile_generated_ShaderType_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'ShaderType;', 763, Lorg_glob3_mobile_generated_ShaderType_2_classLit), Lorg_glob3_mobile_specific_GLUniformID_1WebGL_2_classLit = createForClass('org.glob3.mobile.specific.', 'GLUniformID_WebGL', 703), Lorg_glob3_mobile_generated_BilinearInterpolator_2_classLit = createForClass('org.glob3.mobile.generated.', 'BilinearInterpolator', 376), Lorg_glob3_mobile_generated_DoubleTapRotationEffect_2_classLit = createForClass('org.glob3.mobile.generated.', 'DoubleTapRotationEffect', 454), Lorg_glob3_mobile_generated_EffectWithForce_2_classLit = createForClass('org.glob3.mobile.generated.', 'EffectWithForce', 455), Lorg_glob3_mobile_generated_RotateWithAxisEffect_2_classLit = createForClass('org.glob3.mobile.generated.', 'RotateWithAxisEffect', 646), Lorg_glob3_mobile_generated_JSONString_2_classLit = createForClass('org.glob3.mobile.generated.', 'JSONString', 591), Lorg_glob3_mobile_generated_JSONNull_2_classLit = createForClass('org.glob3.mobile.generated.', 'JSONNull', 589), Lcom_google_gwt_json_client_JSONValue_2_classLit = createForClass('com.google.gwt.json.client.', 'JSONValue', 137), Lorg_glob3_mobile_generated_GPUAttributeValueVec2Float_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUAttributeValueVec2Float', 507), Lorg_glob3_mobile_generated_GPUUniformValueInt_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformValueInt', 526), Lcom_google_gwt_json_client_JSONNull_2_classLit = createForClass('com.google.gwt.json.client.', 'JSONNull', 140), Lcom_google_gwt_json_client_JSONBoolean_2_classLit = createForClass('com.google.gwt.json.client.', 'JSONBoolean', 138), Lcom_google_gwt_json_client_JSONNumber_2_classLit = createForClass('com.google.gwt.json.client.', 'JSONNumber', 141), Lcom_google_gwt_json_client_JSONString_2_classLit = createForClass('com.google.gwt.json.client.', 'JSONString', 147), Lcom_google_gwt_json_client_JSONArray_2_classLit = createForClass('com.google.gwt.json.client.', 'JSONArray', 136), Lcom_google_gwt_json_client_JSONObject_2_classLit = createForClass('com.google.gwt.json.client.', 'JSONObject', 142), Lcom_google_gwt_json_client_JSONObject$1_2_classLit = createForClass('com.google.gwt.json.client.', 'JSONObject$1', 143), Lorg_glob3_mobile_generated_JSONBoolean_2_classLit = createForClass('org.glob3.mobile.generated.', 'JSONBoolean', 583), Lorg_glob3_mobile_generated_JSONFloat_2_classLit = createForClass('org.glob3.mobile.generated.', 'JSONFloat', 586), Lorg_glob3_mobile_generated_JSONLong_2_classLit = createForClass('org.glob3.mobile.generated.', 'JSONLong', 588), Lorg_glob3_mobile_generated_JSONDouble_2_classLit = createForClass('org.glob3.mobile.generated.', 'JSONDouble', 584), Lorg_glob3_mobile_generated_IThreadUtils_1RendererTask_2_classLit = createForClass('org.glob3.mobile.generated.', 'IThreadUtils_RendererTask', 572), Lorg_glob3_mobile_generated_RectangleF_2_classLit = createForClass('org.glob3.mobile.generated.', 'RectangleF', 643), Lorg_glob3_mobile_generated_DTT_1NotFullProviderImageListener_2_classLit = createForClass('org.glob3.mobile.generated.', 'DTT_NotFullProviderImageListener', 439), Lorg_glob3_mobile_generated_GPUUniformMatrix4Float_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformMatrix4Float', 521), Lorg_glob3_mobile_generated_GPUUniformVec4Float_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformVec4Float', 535), Lorg_glob3_mobile_generated_GPUUniformFloat_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformFloat', 519), Lorg_glob3_mobile_generated_GPUUniformVec2Float_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformVec2Float', 533), Lorg_glob3_mobile_generated_GPUUniformVec3Float_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformVec3Float', 534), Lorg_glob3_mobile_generated_GPUUniformBool_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformBool', 518), Lorg_glob3_mobile_generated_GPUUniformSampler2D_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUUniformSampler2D', 522), Lorg_glob3_mobile_generated_GPUAttributeVec3Float_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUAttributeVec3Float', 512), Lorg_glob3_mobile_generated_GPUAttributeVec4Float_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUAttributeVec4Float', 513), Lorg_glob3_mobile_generated_GPUAttributeVec2Float_2_classLit = createForClass('org.glob3.mobile.generated.', 'GPUAttributeVec2Float', 511), Lcom_google_gwt_json_client_JSONException_2_classLit = createForClass('com.google.gwt.json.client.', 'JSONException', 139), Lorg_glob3_mobile_generated_GPUVariableType_2_classLit = createForEnum('org.glob3.mobile.generated.', 'GPUVariableType', 536, values_9), _3Lorg_glob3_mobile_generated_GPUVariableType_2_classLit = createForArray('[Lorg.glob3.mobile.generated.', 'GPUVariableType;', 764, Lorg_glob3_mobile_generated_GPUVariableType_2_classLit), Lorg_glob3_mobile_generated_ByteBufferIterator_2_classLit = createForClass('org.glob3.mobile.generated.', 'ByteBufferIterator', 392), Lorg_glob3_mobile_generated_ByteBufferBuilder_2_classLit = createForClass('org.glob3.mobile.generated.', 'ByteBufferBuilder', 391);
if (org_glob3_mobile_G3MWebGLTestingApplication) org_glob3_mobile_G3MWebGLTestingApplication.onScriptLoad(gwtOnLoad);})();